// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.Azure.BlobStorage.Templates.BlobStorageInterface
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\Intent.Modules.NET\Modules\Intent.Modules.Azure.BlobStorage\Templates\BlobStorageInterface\BlobStorageInterfaceTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class BlobStorageInterfaceTemplate : CSharpTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\n[assembly: DefaultIntentManaged(Mode.Fully)]\r\n\r\nnamespace ");
            
            #line 18 "E:\Intent.Modules.NET\Modules\Intent.Modules.Azure.BlobStorage\Templates\BlobStorageInterface\BlobStorageInterfaceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    /// <summary>\r\n    /// Represents a single item used for bulk uploads to blob storage.\r\n    /// </summary>\r\n    public record BulkBlobItem(string Name, Stream DataStream);\r\n\r\n    /// <summary>\r\n    /// A simplified service interface to access Blob Storage.\r\n    /// </summary>\r\n    public interface ");
            
            #line 28 "E:\Intent.Modules.NET\Modules\Intent.Modules.Azure.BlobStorage\Templates\BlobStorageInterface\BlobStorageInterfaceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n        /// <summary>\r\n        /// Retrieves the URI of a specific blob from a given container.\r\n        /// </summary>\r\n        /// <param name=\"containerName\">The name of the blob container.</param>\r\n        /// <param name=\"blobName\">The name of the blob.</param>\r\n        /// <param name=\"cancellationToken\">An optional token to cancel the asynchronous operation.</param>\r\n        /// <returns>The URI of the blob.</returns>\r\n        Task<Uri> GetAsync(string containerName, string blobName, CancellationToken cancellationToken = default);\r\n\r\n        /// <summary>\r\n        /// Lists the URIs of all blobs in a given container.\r\n        /// </summary>\r\n        /// <param name=\"containerName\">The name of the blob container.</param>\r\n        /// <param name=\"cancellationToken\">An optional token to cancel the asynchronous operation.</param>\r\n        /// <returns>An async enumerable of blob URIs.</returns>\r\n        IAsyncEnumerable<Uri> ListAsync(string containerName, CancellationToken cancellationToken = default);\r\n\r\n        /// <summary>\r\n        /// Uploads data to a specific location in blob storage.\r\n        /// </summary>\r\n        /// <param name=\"cloudStorageLocation\">The URI specifying where to upload the data.</param>\r\n        /// <param name=\"dataStream\">The stream of data to upload.</param>\r\n        /// <param name=\"cancellationToken\">An optional token to cancel the asynchronous operation.</param>\r\n        /// <returns>The URI of the uploaded blob.</returns>\r\n        Task<Uri> UploadAsync(Uri cloudStorageLocation, Stream dataStream, CancellationToken cancellationToken = default);\r\n\r\n        /// <summary>\r\n        /// Uploads data to a specific blob in a given container.\r\n        /// </summary>\r\n        /// <param name=\"containerName\">The name of the blob container.</param>\r\n        /// <param name=\"blobName\">The name of the blob.</param>\r\n        /// <param name=\"dataStream\">The stream of data to upload.</param>\r\n        /// <param name=\"cancellationToken\">An optional token to cancel the asynchronous operation.</param>\r\n        /// <returns>The URI of the uploaded blob.</returns>\r\n        Task<Uri> UploadAsync(string containerName, string blobName, Stream dataStream, CancellationToken cancellationToken = default);\r\n\r\n        /// <summary>\r\n        /// Performs bulk upload of multiple blobs to a specific container.\r\n        /// </summary>\r\n        /// <param name=\"containerName\">The name of the blob container.</param>\r\n        /// <param name=\"blobs\">The enumerable of bulk blob items to upload.</param>\r\n        /// <param name=\"cancellationToken\">An optional token to cancel the asynchronous operation.</param>\r\n        /// <returns>An async enumerable of blob URIs for each uploaded blob.</returns>\r\n        IAsyncEnumerable<Uri> BulkUploadAsync(string containerName, IEnumerable<BulkBlobItem> blobs, CancellationToken cancellationToken = default);\r\n\r\n        /// <summary>\r\n        /// Downloads data from a specific location in blob storage.\r\n        /// </summary>\r\n        /// <param name=\"cloudStorageLocation\">The URI specifying where to download the data from.</param>\r\n        /// <param name=\"cancellationToken\">An optional token to cancel the asynchronous operation.</param>\r\n        /// <returns>A stream containing the downloaded data.</returns>\r\n        Task<Stream> DownloadAsync(Uri cloudStorageLocation, CancellationToken cancellationToken = default);\r\n\r\n        /// <summary>\r\n        /// Downloads data from a specific blob in a given container.\r\n        /// </summary>\r\n        /// <param name=\"containerName\">The name of the blob container.</param>\r\n        /// <param name=\"blobName\">The name of the blob.</param>\r\n        /// <param name=\"cancellationToken\">An optional token to cancel the asynchronous operation.</param>\r\n        /// <returns>A stream containing the downloaded data.</returns>\r\n        Task<Stream> DownloadAsync(string containerName, string blobName, CancellationToken cancellationToken = default);\r\n\r\n        /// <summary>\r\n        /// Deletes a blob at a specific location in blob storage.\r\n        /// </summary>\r\n        /// <param name=\"cloudStorageLocation\">The URI specifying the blob to delete.</param>\r\n        /// <param name=\"cancellationToken\">An optional token to cancel the asynchronous operation.</param>\r\n        Task DeleteAsync(Uri cloudStorageLocation, CancellationToken cancellationToken = default);\r\n\r\n        /// <summary>\r\n        /// Deletes a specific blob in a given container.\r\n        /// </summary>\r\n        /// <param name=\"containerName\">The name of the blob container.</param>\r\n        /// <param name=\"blobName\">The name of the blob.</param>\r\n        /// <param name=\"cancellationToken\">An optional token to cancel the asynchronous operation.</param>\r\n        Task DeleteAsync(string containerName, string blobName, CancellationToken cancellationToken = default);\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
}
