<#@ template language="C#" inherits="CSharpTemplateBase<object>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Intent.RoslynWeaver.Attributes;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public class <#= ClassName #> : Exception
    {
        public static async Task<<#= ClassName #>> Create(Uri baseAddress, HttpRequestMessage request, HttpResponseMessage response, CancellationToken cancellationToken)
        {
            var fullRequestUri = new Uri(baseAddress, request.RequestUri!);
            var content = await response.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
            var headers = response.Headers.ToDictionary(k => k.Key, v => v.Value);
            return new <#= ClassName #>(fullRequestUri, response.StatusCode, headers, response.ReasonPhrase, content);
        }

        public <#= ClassName #>(
            Uri requestUri, 
            HttpStatusCode statusCode, 
            IReadOnlyDictionary<string, IEnumerable<string>> responseHeaders,
            string reasonPhrase,
            string responseContent)
            : base(GetMessage(requestUri, statusCode, reasonPhrase, responseContent))
        {
            RequestUri = requestUri;
            StatusCode = statusCode;
            ResponseHeaders = responseHeaders;
            ReasonPhrase = reasonPhrase;
            ResponseContent = responseContent;
        }
        
        public Uri RequestUri { get; private set; }
        public HttpStatusCode StatusCode { get; private set; }
        public IReadOnlyDictionary<string, IEnumerable<string>> ResponseHeaders { get; private set; }
        public string ReasonPhrase { get; private set; }
        public string ResponseContent { get; private set; }
        
        private static string GetMessage(Uri requestUri, HttpStatusCode statusCode, string reasonPhrase, string responseContent)
        {
            var message = $"Request to {requestUri} failed with status code {(int)statusCode} {reasonPhrase}.";
            if (!string.IsNullOrWhiteSpace(responseContent))
            {
                message += " See content for more detail.";
            }
            return message;
        }
    }
}