<?xml version="1.0" encoding="utf-8"?>
<class id="d1993c7e-60e2-4345-a063-3045ba3937a1" type="Element Extension" typeId="e3c7b1ca-f080-45c1-b56f-8d44226c8e20">
  <name>Class Extension</name>
  <display>Class Extension: Class</display>
  <isAbstract>false</isAbstract>
  <sort-children>by-type-then-manually</sort-children>
  <genericTypes />
  <typeReference id="01016564-6c91-44d5-b415-e0217080bb92">
    <typeId>04e12b51-ed12-42a3-9667-a6aa81bb6d10</typeId>
    <isNavigable>true</isNavigable>
    <isNullable>false</isNullable>
    <isCollection>false</isCollection>
    <isRequired>true</isRequired>
    <typePackageName>Intent.Modelers.Domain</typePackageName>
    <typePackageId>6572b98d-5e13-4d4b-9ffc-820057da974e</typePackageId>
    <stereotypes />
    <genericTypeParameters />
  </typeReference>
  <isMapped>false</isMapped>
  <parentFolderId>78be924b-a4c6-40f9-ac4e-103fd8f17ce0</parentFolderId>
  <packageId>a9d2a398-04e4-4300-9fbb-768568c65f9e</packageId>
  <packageName>Intent.EntityFrameworkCore</packageName>
  <stereotypes>
    <stereotype stereotypeDefinitionId="159cbc8e-a910-40f7-8e45-3edadbb863c2" name="Type Reference Extension Settings">
      <addedByDefault>true</addedByDefault>
      <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
      <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
      <properties>
        <property name="35226a83-3965-4224-8aef-20c68a0c5180" display="Mode" value="Inherit" isActive="true" />
        <property name="7d3859d4-084d-4ff0-8b31-850b4a8f8cd0" display="Display Name" isActive="false" />
        <property name="17223dbd-8df0-4700-8b81-02274ca3ed7f" display="Hint" isActive="false" />
        <property name="b2cef034-5706-45d2-8554-f4dc582a18ff" display="Target Types" isActive="false" />
        <property name="93e4efa9-186d-4e88-ae0a-491bcd6e6f5e" display="Default Type Id" isActive="false" />
        <property name="7a0c4185-1c08-4d3e-9185-14683d7a3bd0" display="Allow Collection" value="Inherit" isActive="false" />
        <property name="e3dc90ec-4f5f-4f20-b271-e28a5094dc91" display="Allow Nullable" value="Inherit" isActive="false" />
      </properties>
    </stereotype>
    <stereotype stereotypeDefinitionId="312eab00-f6db-492e-bbb4-e41383c8d3d8" name="Extension Settings">
      <addedByDefault>true</addedByDefault>
      <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
      <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
      <properties>
        <property name="8c964307-9d03-4a14-9fd3-40ea2607955a" display="Display Text Function" value="" isActive="true" />
        <property name="996ed45f-2318-4587-9618-73db3d7cfed0" display="Validate Function" value="" isActive="true" />
      </properties>
    </stereotype>
  </stereotypes>
  <metadata />
  <childElements>
    <childElement id="3bf274e9-35e7-4f4d-adb8-adcee426ac13" type="Element Event Settings" typeId="3c628ab0-2407-4fb0-8507-ddde986cff2e">
      <name>NewElementEventSettings</name>
      <display>[events]</display>
      <isAbstract>false</isAbstract>
      <sort-children>by-type-then-by-name</sort-children>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>d1993c7e-60e2-4345-a063-3045ba3937a1</parentFolderId>
      <packageId>a9d2a398-04e4-4300-9fbb-768568c65f9e</packageId>
      <packageName>Intent.EntityFrameworkCore</packageName>
      <stereotypes />
      <metadata />
      <childElements>
        <childElement id="10aaa1c2-82ab-404d-91b1-da880952f158" type="Element Event Handler" typeId="0ef412e3-d15a-45d3-bcd3-f646165f2eb6">
          <name>On Changed</name>
          <display>On Changed: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="a4b142f5-8ce4-4487-bae6-02b013e7fdcb">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>3bf274e9-35e7-4f4d-adb8-adcee426ac13</parentFolderId>
          <packageId>a9d2a398-04e4-4300-9fbb-768568c65f9e</packageId>
          <packageName>Intent.EntityFrameworkCore</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="const dbSettingsId = &quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;;&#xD;&#xA;const partitionKeyStereotypeId = &quot;3a203a3e-116e-4a7c-b375-e690570efc3f&quot;;&#xD;&#xA;const stringTypeId = &quot;d384db9c-a279-45e1-801e-e4e8099625f2&quot;;&#xD;&#xA;&#xD;&#xA;// console.log(`Class (${element.getName()}) :: On Changed&#xD;&#xA;//     isCosmosDbProvider() = ${isCosmosDbProvider()}&#xD;&#xA;//     isAggregateRoot(element) = ${isAggregateRoot(element)}&#xD;&#xA;//     hasSuperClass(element) = ${hasSuperClass(element)}`);&#xD;&#xA;&#xD;&#xA;if (!isCosmosDbProvider() || (!isAggregateRoot(element) &amp;&amp; !element.hasStereotype(&quot;Table&quot;)) || hasSuperClass(element)) { &#xD;&#xA;    element.getChildren(&quot;Attribute&quot;)&#xD;&#xA;        .filter(x =&gt; x.hasStereotype(partitionKeyStereotypeId))&#xD;&#xA;        .forEach(x =&gt; {&#xD;&#xA;            x.removeStereotype(partitionKeyStereotypeId);&#xD;&#xA;            x.delete();&#xD;&#xA;        });&#xD;&#xA;    return; &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;let partitionKey = element.getPackage()?.getStereotype(&quot;Cosmos DB Container Settings&quot;)?.getProperty(&quot;Partition Key&quot;)?.value?.trim();&#xD;&#xA;if (partitionKey == &quot;&quot;) { partitionKey = null; }&#xD;&#xA;&#xD;&#xA;let primaryKeyAttr = element.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;))[0];&#xD;&#xA;if (!partitionKey &amp;&amp; primaryKeyAttr &amp;&amp; !primaryKeyAttr.hasStereotype(partitionKeyStereotypeId)) { &#xD;&#xA;    primaryKeyAttr.addStereotype(partitionKeyStereotypeId);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if (!partitionKey) { return; }&#xD;&#xA;&#xD;&#xA;let possiblePkAttrs = element.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.getName().toLowerCase() == partitionKey.toLowerCase())&#xD;&#xA;if (possiblePkAttrs.length == 0) {&#xD;&#xA;    let pkAttr = createElement(&quot;Attribute&quot;, partitionKey, element.id);&#xD;&#xA;    pkAttr.setOrder(1);&#xD;&#xA;    pkAttr.typeReference.setType(stringTypeId);&#xD;&#xA;} else if (! possiblePkAttrs[0].hasStereotype(partitionKeyStereotypeId)) {&#xD;&#xA;    possiblePkAttrs[0].addStereotype(partitionKeyStereotypeId);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// === FUNCTIONS ===&#xD;&#xA;&#xD;&#xA;function isCosmosDbProvider() {&#xD;&#xA;    return application.getSettings(dbSettingsId)&#xD;&#xA;        ?.getField(&quot;Database Provider&quot;)&#xD;&#xA;        ?.value == &quot;cosmos&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function isAggregateRoot(element) {&#xD;&#xA;    return !element.getAssociations(&quot;Association&quot;)&#xD;&#xA;        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function hasSuperClass(element) {&#xD;&#xA;    return element.getAssociations(&quot;Generalization&quot;)&#xD;&#xA;        .some(x =&gt; x.isTargetEnd());&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// function getNamingConvention() {&#xD;&#xA;//     return application.getSettings(dbSettingsId)&#xD;&#xA;//         .getField(&quot;Key Naming Convention&quot;)?.value ?? &quot;pascal-case&quot;;&#xD;&#xA;// }" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
        <childElement id="8e83c179-4e80-4bd9-b1fc-b0e512d59c60" type="Element Event Handler" typeId="0ef412e3-d15a-45d3-bcd3-f646165f2eb6">
          <name>On Created</name>
          <display>On Created: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="c368a9b5-2fdb-477b-8780-6fc9353e0d88">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>3bf274e9-35e7-4f4d-adb8-adcee426ac13</parentFolderId>
          <packageId>a9d2a398-04e4-4300-9fbb-768568c65f9e</packageId>
          <packageName>Intent.EntityFrameworkCore</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="const dbSettingsId = &quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;;&#xD;&#xA;const partitionKeyStereotypeId = &quot;3a203a3e-116e-4a7c-b375-e690570efc3f&quot;;&#xD;&#xA;const stringTypeId = &quot;d384db9c-a279-45e1-801e-e4e8099625f2&quot;;&#xD;&#xA;&#xD;&#xA;// console.log(`Class (${element.getName()}) :: On Created&#xD;&#xA;//     isCosmosDbProvider() = ${isCosmosDbProvider()}&#xD;&#xA;//     isAggregateRoot(element) = ${isAggregateRoot(element)}&#xD;&#xA;//     hasSuperClass(element) = ${hasSuperClass(element)}`);&#xD;&#xA;&#xD;&#xA;if (!isCosmosDbProvider() || (!isAggregateRoot(element) &amp;&amp; !element.hasStereotype(&quot;Table&quot;)) || hasSuperClass(element)) { &#xD;&#xA;    element.getChildren(&quot;Attribute&quot;)&#xD;&#xA;        .filter(x =&gt; x.hasStereotype(partitionKeyStereotypeId))&#xD;&#xA;        .forEach(x =&gt; {&#xD;&#xA;            x.removeStereotype(partitionKeyStereotypeId);&#xD;&#xA;            x.delete();&#xD;&#xA;        });&#xD;&#xA;    return; &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if (! (element.getPackage()?.getStereotype(&quot;Cosmos DB Container Settings&quot;)?.getProperty(&quot;Partition Key&quot;))) { return; }&#xD;&#xA;&#xD;&#xA;let partitionKey = element.getPackage().getStereotype(&quot;Cosmos DB Container Settings&quot;).getProperty(&quot;Partition Key&quot;).value?.trim();&#xD;&#xA;if (partitionKey == &quot;&quot;) { partitionKey = null; }&#xD;&#xA;&#xD;&#xA;let primaryKeyAttr = element.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;))[0];&#xD;&#xA;if (!partitionKey &amp;&amp; primaryKeyAttr &amp;&amp; !primaryKeyAttr.hasStereotype(partitionKeyStereotypeId)) { &#xD;&#xA;    primaryKeyAttr.addStereotype(partitionKeyStereotypeId);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if (!partitionKey) { return; }&#xD;&#xA;&#xD;&#xA;let possiblePkAttrs = element.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.getName() == partitionKey)&#xD;&#xA;if (possiblePkAttrs.length == 0) {&#xD;&#xA;    let pkAttr = createElement(&quot;Attribute&quot;, partitionKey, element.id);&#xD;&#xA;    pkAttr.setOrder(element.getChildren(&quot;Attribute&quot;).findIndex(x =&gt; x.hasStereotype(&quot;Primary Key&quot;)) + 1);&#xD;&#xA;    pkAttr.typeReference.setType(stringTypeId);&#xD;&#xA;} else if (! possiblePkAttrs[0].hasStereotype(partitionKeyStereotypeId)) {&#xD;&#xA;    possiblePkAttrs[0].addStereotype(partitionKeyStereotypeId);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// === FUNCTIONS ===&#xD;&#xA;&#xD;&#xA;function isCosmosDbProvider() {&#xD;&#xA;    return application.getSettings(dbSettingsId)&#xD;&#xA;        ?.getField(&quot;Database Provider&quot;)&#xD;&#xA;        ?.value == &quot;cosmos&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function isAggregateRoot(element) {&#xD;&#xA;    return ! element.getAssociations(&quot;Association&quot;)&#xD;&#xA;        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function hasSuperClass(element) {&#xD;&#xA;    return element.getAssociations(&quot;Generalization&quot;)&#xD;&#xA;        .some(x =&gt; x.isTargetEnd());&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getNamingConvention() {&#xD;&#xA;    return application.getSettings(dbSettingsId)&#xD;&#xA;        .getField(&quot;Key Naming Convention&quot;)?.value ?? &quot;pascal-case&quot;;&#xD;&#xA;}" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
        <childElement id="3c3a0ef3-8588-4e1c-8b6d-a0eddaa0cb0b" type="Element Event Handler" typeId="0ef412e3-d15a-45d3-bcd3-f646165f2eb6">
          <name>On Loaded</name>
          <display>On Loaded: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="e2bf8f95-be2c-4b27-afe4-44915ff6dd17">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>3bf274e9-35e7-4f4d-adb8-adcee426ac13</parentFolderId>
          <packageId>a9d2a398-04e4-4300-9fbb-768568c65f9e</packageId>
          <packageName>Intent.EntityFrameworkCore</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="const dbSettingsId = &quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;;&#xD;&#xA;const partitionKeyStereotypeId = &quot;3a203a3e-116e-4a7c-b375-e690570efc3f&quot;;&#xD;&#xA;const stringTypeId = &quot;d384db9c-a279-45e1-801e-e4e8099625f2&quot;;&#xD;&#xA;&#xD;&#xA;// console.log(`Class (${element.getName()}) :: On Loaded&#xD;&#xA;//     isCosmosDbProvider() = ${isCosmosDbProvider()}&#xD;&#xA;//     isAggregateRoot(element) = ${isAggregateRoot(element)}&#xD;&#xA;//     hasSuperClass(element) = ${hasSuperClass(element)}`);&#xD;&#xA;&#xD;&#xA;if (!isCosmosDbProvider() || (!isAggregateRoot(element) &amp;&amp; !element.hasStereotype(&quot;Table&quot;)) || hasSuperClass(element)) { &#xD;&#xA;    element.getChildren(&quot;Attribute&quot;)&#xD;&#xA;        .filter(x =&gt; x.hasStereotype(partitionKeyStereotypeId))&#xD;&#xA;        .forEach(x =&gt; {&#xD;&#xA;            x.removeStereotype(partitionKeyStereotypeId);&#xD;&#xA;            x.delete();&#xD;&#xA;        });&#xD;&#xA;    return; &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;let partitionKey = element.getPackage()?.getStereotype(&quot;Cosmos DB Container Settings&quot;)?.getProperty(&quot;Partition Key&quot;)?.value?.trim();&#xD;&#xA;if (partitionKey == &quot;&quot;) { partitionKey = null; }&#xD;&#xA;&#xD;&#xA;let primaryKeyAttr = element.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;))[0];&#xD;&#xA;if (!partitionKey &amp;&amp; primaryKeyAttr &amp;&amp; !primaryKeyAttr.hasStereotype(partitionKeyStereotypeId)) { &#xD;&#xA;    primaryKeyAttr.addStereotype(partitionKeyStereotypeId);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if (!partitionKey) { return; }&#xD;&#xA;&#xD;&#xA;let possiblePkAttrs = element.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.getName().toLowerCase() == partitionKey.toLowerCase())&#xD;&#xA;if (possiblePkAttrs.length == 0) {&#xD;&#xA;    let pkAttr = createElement(&quot;Attribute&quot;, partitionKey, element.id);&#xD;&#xA;    pkAttr.setOrder(1);&#xD;&#xA;    pkAttr.typeReference.setType(stringTypeId);&#xD;&#xA;} else if (! possiblePkAttrs[0].hasStereotype(partitionKeyStereotypeId)) {&#xD;&#xA;    possiblePkAttrs[0].addStereotype(partitionKeyStereotypeId);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// === FUNCTIONS ===&#xD;&#xA;&#xD;&#xA;function isCosmosDbProvider() {&#xD;&#xA;    return application.getSettings(dbSettingsId)&#xD;&#xA;        ?.getField(&quot;Database Provider&quot;)&#xD;&#xA;        ?.value == &quot;cosmos&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function isAggregateRoot(element) {&#xD;&#xA;    return ! element.getAssociations(&quot;Association&quot;)&#xD;&#xA;        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function hasSuperClass(element) {&#xD;&#xA;    return element.getAssociations(&quot;Generalization&quot;)&#xD;&#xA;        .some(x =&gt; x.isTargetEnd());&#xD;&#xA;}" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
      </childElements>
    </childElement>
  </childElements>
</class>