// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.AspNetCore.Identity.AccountController.Templates.AccountController
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class AccountControllerTemplate : CSharpTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.IdentityModel.Tokens.Jwt;\r\nusing System.Security.Claims;\r\nusing System.Text;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing Intent.RoslynWeaver.Attributes;\r\nusing Microsoft.AspNetCore.Identity;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.AspNetCore.Mvc.ModelBinding;\r\nusing Microsoft.AspNetCore.WebUtilities;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Logging;\r\nusing Microsoft.IdentityModel.Tokens;\r\n\r\n[assembly: DefaultIntentManaged(Mode.Fully)]\r\n\r\nnamespace ");
            
            #line 29 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    [Route(\"api/[controller]/[action]\")]\r\n    [ApiController]\r\n    public class ");
            
            #line 33 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" : ControllerBase\r\n    {\r\n        private readonly SignInManager<IdentityUser> _signInManager;\r\n        private readonly UserManager<IdentityUser> _userManager;\r\n        private readonly IUserStore<IdentityUser> _userStore;\r\n        private readonly ILogger<");
            
            #line 38 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("> _logger;\r\n        private readonly ");
            
            #line 39 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetAccountEmailSenderInterfaceName()));
            
            #line default
            #line hidden
            this.Write(" _accountEmailSender;\r\n        private readonly IConfiguration _configuration;\r\n\r\n        public ");
            
            #line 42 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("(\r\n            SignInManager<IdentityUser> signInManager,\r\n            IUserStore<IdentityUser> userStore,\r\n            UserManager<IdentityUser> userManager,\r\n            ILogger<");
            
            #line 46 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("> logger,\r\n            ");
            
            #line 47 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetAccountEmailSenderInterfaceName()));
            
            #line default
            #line hidden
            this.Write(" accountEmailSender,\r\n            IConfiguration configuration)\r\n        {\r\n            _signInManager = signInManager;\r\n            _userStore = userStore;\r\n            _userManager = userManager;\r\n            _logger = logger;\r\n            _accountEmailSender = accountEmailSender;\r\n            _configuration = configuration;\r\n        }\r\n\r\n        [HttpPost]\r\n        public async Task<IActionResult> Register(RegisterDto input)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(input.Email))\r\n            {\r\n                ModelState.AddModelError<RegisterDto>(x => x.Email, \"Mandatory\");\r\n            }\r\n\r\n            if (string.IsNullOrWhiteSpace(input.Password))\r\n            {\r\n                ModelState.AddModelError<RegisterDto>(x => x.Password, \"Mandatory\");\r\n            }\r\n\r\n            if (!ModelState.IsValid)\r\n            {\r\n                return BadRequest(ModelState);\r\n            }\r\n\r\n            var user = new IdentityUser();\r\n\r\n            await _userStore.SetUserNameAsync(user, input.Email, CancellationToken.None);\r\n            await _userManager.SetEmailAsync(user, input.Email);\r\n            var result = await _userManager.CreateAsync(user, input.Password!);\r\n\r\n            if (!result.Succeeded)\r\n            {\r\n                foreach (var error in result.Errors)\r\n                {\r\n                    ModelState.AddModelError(string.Empty, error.Description);\r\n                }\r\n\r\n                return BadRequest(ModelState);\r\n            }\r\n\r\n            _logger.LogInformation(\"User created a new account with password.\");\r\n\r\n            var userId = await _userManager.GetUserIdAsync(user);\r\n            var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);\r\n            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));\r\n\r\n            if (_userManager.Options.SignIn.RequireConfirmedAccount)\r\n            {\r\n                await _accountEmailSender.SendEmailConfirmationRequest(\r\n                    email: input.Email!,\r\n                    userId: userId,\r\n                    code: code);\r\n            }\r\n\r\n            return Ok();\r\n        }\r\n\r\n        [HttpPost]\r\n        public async Task<IActionResult> Login(LoginDto input)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(input.Email))\r\n            {\r\n                ModelState.AddModelError<LoginDto>(x => x.Email, \"Mandatory\");\r\n            }\r\n\r\n            if (string.IsNullOrWhiteSpace(input.Password))\r\n            {\r\n                ModelState.AddModelError<LoginDto>(x => x.Password, \"Mandatory\");\r\n            }\r\n\r\n            if (!ModelState.IsValid)\r\n            {\r\n                return BadRequest(ModelState);\r\n            }\r\n\r\n            var email = input.Email!;\r\n            var password = input.Password!;\r\n\r\n            var user = await _userManager.FindByEmailAsync(email);\r\n            if (user == null ||\r\n                !await _userManager.CheckPasswordAsync(user, password))\r\n            {\r\n                _logger.LogWarning(\"Invalid login attempt.\");\r\n                return Forbid();\r\n            }\r\n\r\n            if (await _userManager.IsLockedOutAsync(user))\r\n            {\r\n                _logger.LogWarning(\"User account locked out.\");\r\n                return Forbid();\r\n            }\r\n\r\n            var claims = await _userManager.GetClaimsAsync(user);\r\n\t        var roles = await _userManager.GetRolesAsync(user);\r\n\t        foreach (var role in roles)\r\n\t        {\r\n\t\t        claims.Add(new Claim(\"role\", role));\r\n\t        }\r\n\r\n            var token = GetJwtToken(\r\n                username: email,\r\n                signingKey: Convert.FromBase64String(_configuration.GetSection(\"JwtToken:SigningKey\").Get<string>()!),\r\n                issuer: _configuration.GetSection(\"JwtToken:Issuer\").Get<string>()!,\r\n                audience: _configuration.GetSection(\"JwtToken:Audience\").Get<string>()!,\r\n                expiration: TimeSpan.FromMinutes(120),\r\n                claims: claims.ToArray());\r\n\r\n            _logger.LogInformation(\"User logged in.\");\r\n            return Ok(token);\r\n        }\r\n\r\n        private static string GetJwtToken(string username,\r\n\t        byte[] signingKey,\r\n\t        string issuer,\r\n\t        string audience,\r\n\t        TimeSpan expiration,\r\n\t        IReadOnlyCollection<Claim> claims)\r\n        {\r\n\t        var tokenClaims = new List<Claim>\r\n\t        {\r\n\t\t        new Claim(JwtRegisteredClaimNames.Sub, username),\r\n\t\t        new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())\r\n\t        };\r\n\t        tokenClaims.AddRange(claims);\r\n\r\n\t        var token = new JwtSecurityToken(\r\n\t\t        issuer: issuer,\r\n\t\t        audience: audience,\r\n\t\t        expires: DateTime.UtcNow.Add(expiration),\r\n\t\t        claims: tokenClaims,\r\n\t\t        signingCredentials: new(\r\n\t\t\t        key: new SymmetricSecurityKey(signingKey),\r\n\t\t\t        algorithm: SecurityAlgorithms.HmacSha256));\r\n\r\n\t        return new JwtSecurityTokenHandler().WriteToken(token);\r\n        }\r\n\r\n        [HttpPost]\r\n        public async Task<IActionResult> ConfirmEmail(ConfirmEmailDto input)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(input.UserId))\r\n            {\r\n                ModelState.AddModelError<ConfirmEmailDto>(x => x.UserId, \"Mandatory\");\r\n            }\r\n\r\n            if (string.IsNullOrWhiteSpace(input.Code))\r\n            {\r\n                ModelState.AddModelError<ConfirmEmailDto>(x => x.Code, \"Mandatory\");\r\n            }\r\n\r\n            if (!ModelState.IsValid)\r\n            {\r\n                return BadRequest(ModelState);\r\n            }\r\n\r\n            var userId = input.UserId!;\r\n            var code = input.Code!;\r\n            var user = await _userManager.FindByIdAsync(input.UserId!);\r\n            if (user == null)\r\n            {\r\n                return NotFound($\"Unable to load user with ID '{userId}'.\");\r\n            }\r\n\r\n            code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(code));\r\n\r\n            var result = await _userManager.ConfirmEmailAsync(user, code);\r\n            if (!result.Succeeded)\r\n            {\r\n                ModelState.AddModelError<ConfirmEmailDto>(x => x, \"Error confirming your email.\");\r\n                return BadRequest(ModelState);\r\n            }\r\n\r\n            return Ok();\r\n        }\r\n    }\r\n\r\n    public class RegisterDto\r\n    {\r\n        public string? Email { get; set; }\r\n        public string? Password { get; set; }\r\n    }\r\n\r\n    public class LoginDto\r\n    {\r\n        public string? Email { get; set; }\r\n        public string? Password { get; set; }\r\n    }\r\n\r\n    public class ConfirmEmailDto\r\n    {\r\n        public string? UserId { get; set; }\r\n        public string? Code { get; set; }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
}
