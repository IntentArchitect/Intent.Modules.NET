// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.EntityFramework.Templates.EFMapping
{
    using Intent.Modelers.Domain.Api;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Modules.Common;
    using Intent.Metadata.RDBMS.Api;
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class EFMappingTemplate : CSharpTemplateBase<ClassModel>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(" \r\n\r\n");
            
            #line 17 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
//Some initial validation
    foreach (var associationEnd in Model.AssociatedClasses)
    {
        var association = associationEnd.Association;
 
        //if there is more than 1 parent association && there are any which are not 0..1->1 (this is a manual inheritance mapping)
        var multipleCompositions = Model.AssociatedClasses.Where(ae => ae.Association.AssociationType == AssociationType.Composition && ae.Association.TargetEnd.Class == Model);
        if (multipleCompositions.Count() > 1)
        {
            throw new Exception(string.Format("Unsupported Mapping - {0} each have a Compositional relationship with {1}.", multipleCompositions.Select(x => x.Class.Name).Aggregate((x, y) => x + ", " + y), Model.Name));
        }

        if (!association.TargetEnd.IsNavigable)
        {
            throw new Exception(string.Format("Unsupported Source Needs to be Navigable to Target relationship  {0} on {1} ", association.ToString(), association.TargetEnd.Class.Name));
        }

        //Unsupported Associations
        if ((association.AssociationType == AssociationType.Aggregation ) && ( association.RelationshipString() == "1->0..1"))
        {
            throw new Exception(string.Format("Unsupported Aggregation relationship  {0} - this relationship implies composition", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Aggregation ) && ( association.RelationshipString() == "1->1"))
        {
            throw new Exception(string.Format("Unsupported Aggregation relationship  {0} - this relationship implies composition", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Aggregation ) && ( association.RelationshipString() == "1->*"))
        {
            throw new Exception(string.Format("Unsupported Aggregation relationship {0}, this relationship implies Composition", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Composition ) && ( association.RelationshipString() == "0..1->0..1"))
        {
            throw new Exception(string.Format("Unsupported Composition relationship {0}", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Composition ) && ( association.RelationshipString() == "0..1->*"))
        {
            throw new Exception(string.Format("Unsupported Composition relationship {0}, this relationship implies aggregation", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Composition ) && ( association.RelationshipString().StartsWith("*->")))
        {
            throw new Exception(string.Format("Unsupported Composition relationship {0}, this relationship implies aggregation", association.ToString()));
        }
        //Naviagability Requirement
        if ((association.AssociationType == AssociationType.Composition ) && ( association.RelationshipString() == "0..1->1") && (!association.SourceEnd.IsNavigable))
        {
            throw new Exception(string.Format("Unsupported. IsNavigable from Composition Required for Composition relationship {0}", association.ToString()));
        }
    }


            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.Data.Entity.ModelConfiguration;\r\nusing System.Data.En" +
                    "tity.Infrastructure.Annotations;\r\nusing System.ComponentModel.DataAnnotations.Sc" +
                    "hema;\r\n");
            
            #line 71 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DependencyUsings));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n[assembly: DefaultIntentManaged(Mode.Fully)]\r\n\r\nnamespace ");
            
            #line 75 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public partial class ");
            
            #line 77 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" : EntityTypeConfiguration<");
            
            #line 77 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetEntityName(Model)));
            
            #line default
            #line hidden
            this.Write(">\r\n    {\r\n    \r\n        public ");
            
            #line 80 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("()\r\n        {\r\n");
            
            #line 82 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
  if (Model.ParentClass == null || Model.ParentClass.GetStereotypeProperty<string>("InheritanceMapping", "Type") != "TPH")
    {
            
            #line default
            #line hidden
            this.Write("            this.ToTable(\"");
            
            #line 84 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetTable()?.Name() ?? Model.Name));
            
            #line default
            #line hidden
            this.Write("\"");
            
            #line 84 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.HasTable() ? ", \"" + (Model.GetTable().Schema() ?? "dbo") + "\"" : ""));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 85 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
    }
    if (Model.GetStereotypeProperty<string>("InheritanceMapping", "Type") == "TPH")
    {
        foreach (var subClass in Model.ChildClasses)
        {

            
            #line default
            #line hidden
            this.Write("            this.Map<");
            
            #line 91 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(subClass.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write(">(m => m.Requires(\"DbSpecialization\").HasValue((int)");
            
            #line 91 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("Specialization.");
            
            #line 91 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(subClass.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("));\r\n");
            
            #line 92 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
      }
    }


            
            #line default
            #line hidden
            this.Write("            this.HasKey(");
            
            #line 96 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetHasKeyLambda()));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 97 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
  if (UsesImplicitId())
    {
            
            #line default
            #line hidden
            this.Write("            this.Property(x => x.Id).HasColumnName(\"Id\");\r\n");
            
            #line 100 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
  }

    foreach (var childClass in Model.ChildClasses) {
            
            #line default
            #line hidden
            this.Write("            this.Map<");
            
            #line 103 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetEntityName(childClass)));
            
            #line default
            #line hidden
            this.Write(">(m => m.Requires(\"");
            
            #line 103 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("Type\").HasValue(\"");
            
            #line 103 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetEntityName(childClass)));
            
            #line default
            #line hidden
            this.Write("\"));\r\n");
            
            #line 104 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
  }  
    foreach (var attribute in Model.Attributes)
    {
        if (attribute.Name.ToLower() == "id" && UsesImplicitId())
        {
                throw new Exception(string.Format("Surrogate Key is implicit for class {0}. Either remove the 'id' attribute, or disable the 'Implicit Surrogate Key' option for this template", Model.Name));
        }
            
            #line default
            #line hidden
            this.Write("            this.Property(x => x.");
            
            #line 111 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 111 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

        if (!string.IsNullOrEmpty(attribute.GetStereotypeProperty<string>("Index", "UniqueKey")))
        {
            
            #line default
            #line hidden
            this.Write("                .HasColumnAnnotation(\"Index\", new IndexAnnotation(new []\r\n       " +
                    "             {\r\n");
            
            #line 116 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            foreach(var index in attribute.Stereotypes.Where(x => x.Name == "Index")) { 
            
            #line default
            #line hidden
            this.Write("                        new IndexAttribute(\"");
            
            #line 117 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 117 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index.GetProperty("UniqueKey", "Unique1")));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 117 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index.GetProperty("Order", "1")));
            
            #line default
            #line hidden
            this.Write(") { IsUnique = ");
            
            #line 117 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index.GetProperty("IsUnique", "false")));
            
            #line default
            #line hidden
            this.Write(" },\r\n");
            
            #line 118 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

            }
            
            #line default
            #line hidden
            this.Write("                    }))");
            
            #line 120 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

        }
        if (!attribute.Type.IsNullable){
            
            #line default
            #line hidden
            this.Write("\r\n                .IsRequired()");
            
            #line 124 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

        }

        if (attribute.Type.Element.Name == "string")
        {
            var maxLength = attribute.GetTextConstraints()?.MaxLength();     // (Text for backwards compatibility with RichDomain)
            if (maxLength.HasValue){
        
            
            #line default
            #line hidden
            this.Write("\r\n                .HasMaxLength(");
            
            #line 133 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(maxLength.Value));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 133 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

            }
            var isUnicode = attribute.GetTextConstraints()?.IsUnicode() ?? false;    
            if (isUnicode){
        
            
            #line default
            #line hidden
            this.Write("\r\n                .IsUnicode()");
            
            #line 139 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

            }
        }

        var decimalPrecision = attribute.GetDecimalConstraints()?.Precision();
        var decimalScale = attribute.GetDecimalConstraints()?.Scale();
        if (decimalPrecision.HasValue && decimalScale.HasValue){
            
            #line default
            #line hidden
            this.Write("\r\n                .HasPrecision(");
            
            #line 147 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(decimalPrecision));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 147 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(decimalScale));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 147 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

        }


        if (HasTypeOverride(attribute))
        { 
            
            #line default
            #line hidden
            this.Write("                .HasColumnType(\"");
            
            #line 153 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTypeOverride(attribute)));
            
            #line default
            #line hidden
            this.Write("\")\r\n");
            
            #line 154 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
      } 
            
            #line default
            #line hidden
            this.Write("                ;\r\n\r\n");
            
            #line 157 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
  }
            
            #line default
            #line hidden
            
            #line 158 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
    foreach (var associationEnd in Model.AssociatedClasses)
    {

        if (!associationEnd.Equals(associationEnd.Association.TargetEnd))
        {
            continue;
        }

        switch (associationEnd.Relationship())
        {
            case RelationshipType.OneToOne :
                MapOneToOne(associationEnd);
                break;
            case RelationshipType.OneToMany :
            
            #line default
            #line hidden
            this.Write("            ");
            
            #line 172 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Format("this.{0}(x => x.{1})", !associationEnd.IsNullable ? "HasRequired" : "HasOptional", associationEnd.Name().ToPascalCase())));
            
            #line default
            #line hidden
            this.Write("\r\n                .WithMany(");
            
            #line 173 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.OtherEnd().IsNavigable ? "x => x." + associationEnd.OtherEnd().Name().ToPascalCase() : ""));
            
            #line default
            #line hidden
            this.Write(")\r\n");
            
            #line 174 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
              if (RequiresForeignKeyOnAssociatedEnd(associationEnd.OtherEnd())) {
                    if (UseForeignKeys) { 
            
            #line default
            #line hidden
            this.Write("                .HasForeignKey(");
            
            #line 176 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetForeignKeyLambda(associationEnd.OtherEnd())));
            
            #line default
            #line hidden
            this.Write(")\r\n");
            
            #line 177 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
                    } else { 
            
            #line default
            #line hidden
            this.Write("                .Map(m => m.MapKey(\"");
            
            #line 178 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.Name().ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("Id\"))\r\n");
            
            #line 179 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
                    }
                } 
            
            #line default
            #line hidden
            this.Write("                ;\r\n\r\n");
            
            #line 183 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
                  break;
            case RelationshipType.ManyToOne :
            
            #line default
            #line hidden
            this.Write("            this.HasMany(x => x.");
            
            #line 185 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.Name().ToPascalCase()));
            
            #line default
            #line hidden
            this.Write(")\r\n");
            
            #line 186 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
                if(RequiresForeignKeyOnAssociatedEnd(associationEnd)) {  
            
            #line default
            #line hidden
            this.Write("                .");
            
            #line 187 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Format("{0}({1})", !associationEnd.OtherEnd().IsNullable ? "WithRequired" : "WithOptional", "x => x." + associationEnd.OtherEnd().Name().ToPascalCase())));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 188 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
                    if (UseForeignKeys) { 
            
            #line default
            #line hidden
            this.Write("                .HasForeignKey(");
            
            #line 189 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetForeignKeyLambda(associationEnd)));
            
            #line default
            #line hidden
            this.Write(")\r\n");
            
            #line 190 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
                    } else { 
            
            #line default
            #line hidden
            this.Write("                .Map(m => m.MapKey(\"");
            
            #line 191 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.OtherEnd().Name().ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("Id\"))\r\n");
            
            #line 192 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
                    } 
            
            #line default
            #line hidden
            
            #line 193 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
                    if(associationEnd.Association.AssociationType == AssociationType.Composition) {  
            
            #line default
            #line hidden
            this.Write("                .WillCascadeOnDelete()\r\n");
            
            #line 195 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
                    }
                } 
            
            #line default
            #line hidden
            this.Write("                ;\r\n\r\n");
            
            #line 199 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
                  break;
            case RelationshipType.ManyToMany :
            
            #line default
            #line hidden
            this.Write("            this.HasMany(x => x.");
            
            #line 201 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.Name().ToPascalCase()));
            
            #line default
            #line hidden
            this.Write(")\r\n                .WithMany(");
            
            #line 202 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.OtherEnd().IsNavigable ? "x => x." + associationEnd.OtherEnd().Name().ToPascalCase() : ""));
            
            #line default
            #line hidden
            this.Write(")\r\n                .Map(m => \r\n                    {\r\n                        m.T" +
                    "oTable(\"");
            
            #line 205 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.OtherEnd().Class.Name.ToPascalCase() + associationEnd.Name().ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("\");\r\n                        m.MapLeftKey(\"");
            
            #line 206 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.OtherEnd().Class.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("Id\");\r\n                        m.MapRightKey(\"");
            
            #line 207 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.Name().ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("Id\");\r\n                    });\r\n\r\n");
            
            #line 210 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
                  break;
        }       
    }

            
            #line default
            #line hidden
            this.Write("        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 217 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

public void MapOneToOne(AssociationEndModel associationEnd)
{
    var parent = associationEnd.Association.SourceEnd;
    var child = associationEnd.Association.TargetEnd;

    string hasClause = !associationEnd.IsNullable ? "HasRequired" : "HasOptional";
    string withClause = "With" + (!associationEnd.OtherEnd().IsNullable ? "Required" : "Optional") + ((!associationEnd.IsNullable) == (!associationEnd.OtherEnd().IsNullable) ?  DeterminePrinciple(associationEnd)  : "");    

        
        #line default
        #line hidden
        
        #line 225 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
this.Write("            ");

        
        #line default
        #line hidden
        
        #line 226 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Format("this.{0}(x => x.{1})", hasClause, associationEnd.Name().ToPascalCase())));

        
        #line default
        #line hidden
        
        #line 226 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
this.Write("\r\n            ");

        
        #line default
        #line hidden
        
        #line 227 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Format(".{0}({1})", withClause, associationEnd.OtherEnd().IsNavigable ? "x => x." + associationEnd.OtherEnd().Name().ToPascalCase(): "" )));

        
        #line default
        #line hidden
        
        #line 227 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 228 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
  if (((associationEnd.Association.AssociationType == AssociationType.Composition && associationEnd.Association.RelationshipString() == "0..1->1")
            || (associationEnd.Association.AssociationType == AssociationType.Aggregation && associationEnd.Association.RelationshipString() == "0..1->1"))
         && Model.Attributes.All(a => a.Name.ToPascalCase() != associationEnd.OtherEnd().Class.GetStereotypeProperty("Foreign Key", "Column Name", associationEnd.Name().ToPascalCase() + "Id").ToPascalCase()))
    {
        
        #line default
        #line hidden
        
        #line 231 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
this.Write("            .Map(m => m.MapKey(\"");

        
        #line default
        #line hidden
        
        #line 232 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.OtherEnd().Class.GetStereotypeProperty("Foreign Key", "Column Name", associationEnd.Name().ToPascalCase() + "Id")));

        
        #line default
        #line hidden
        
        #line 232 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
this.Write("\"))\r\n");

        
        #line default
        #line hidden
        
        #line 233 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
    }
        
        #line default
        #line hidden
        
        #line 234 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
    if(associationEnd.Association.AssociationType == AssociationType.Composition) {  
        
        #line default
        #line hidden
        
        #line 234 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
this.Write("            .WillCascadeOnDelete()\r\n");

        
        #line default
        #line hidden
        
        #line 236 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
    } 
        
        #line default
        #line hidden
        
        #line 236 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
this.Write("            ;\r\n");

        
        #line default
        #line hidden
        
        #line 238 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
    
}

public string DeterminePrinciple(AssociationEndModel associationEnd)
{
    if (associationEnd.Association.AssociationType == AssociationType.Composition )
    {
        return "Principal";
    }
    if (associationEnd.Association.AssociationType == AssociationType.Aggregation )
    {
        return "Dependent";
    }
    return "";
}



        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
