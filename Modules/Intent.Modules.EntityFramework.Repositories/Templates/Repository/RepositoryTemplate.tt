<#@ template  debug="true"  inherits="CSharpTemplateBase<ClassModel>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ import namespace="Intent.Modelers.Domain.Api" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

[assembly: DefaultIntentManaged(Mode.Ignore)]

namespace <#= Namespace #>
{
    [IntentManaged(Mode.Merge)]
    public class <#= ClassName #> : RepositoryBase<<#= EntityInterfaceName #>, <#= EntityName #>, <#= DbContextName #>>, <#= RepositoryContractName #>
    {
        public <#= ClassName #>(<#= DbContextName #> dbContext) : base (dbContext)
        {
        }

        [IntentManaged(Mode.Fully)]
        public async Task<<#= EntityInterfaceName #>> FindByIdAsync(<#= PrimaryKeyType #> id, CancellationToken cancellationToken = default)
        {
            return await FindAsync(x => x.<#= PrimaryKeyName #> == id, cancellationToken);
        }

        [IntentManaged(Mode.Fully)]
        public async Task<List<<#= EntityInterfaceName #>>> FindByIdsAsync(<#= PrimaryKeyType #>[] ids, CancellationToken cancellationToken = default)
        {
            return await FindAllAsync(x => ids.Contains(x.<#= PrimaryKeyName #>), cancellationToken);
        }
    }
}