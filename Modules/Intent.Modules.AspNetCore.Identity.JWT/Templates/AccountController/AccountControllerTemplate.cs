// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.AspNetCore.Identity.JWT.Templates.AccountController
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.JWT\Templates\AccountController\AccountControllerTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class AccountControllerTemplate : CSharpTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace ");
            
            #line 21 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.JWT\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    [Route(\"api/[controller]/[action]\")]\r\n    [ApiController]\r\n    public cl" +
                    "ass ");
            
            #line 25 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.JWT\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(@" : ControllerBase
    {
        private readonly SignInManager<IdentityUser> _signInManager;
        private readonly UserManager<IdentityUser> _userManager;
        private readonly IUserStore<IdentityUser> _userStore;
        private readonly ILogger<");
            
            #line 30 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.JWT\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("> _logger;\r\n        private readonly ");
            
            #line 31 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.JWT\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetAccountEmailSenderInterfaceName()));
            
            #line default
            #line hidden
            this.Write(" _accountEmailSender;\r\n\r\n        public ");
            
            #line 33 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.JWT\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("(\r\n            SignInManager<IdentityUser> signInManager,\r\n            IUserStore" +
                    "<IdentityUser> userStore,\r\n            UserManager<IdentityUser> userManager,\r\n " +
                    "           ILogger<");
            
            #line 37 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.JWT\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("> logger, ");
            
            #line 37 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.JWT\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetAccountEmailSenderInterfaceName()));
            
            #line default
            #line hidden
            this.Write(" accountEmailSender)\r\n        {\r\n            _signInManager = signInManager;\r\n   " +
                    "         _userStore = userStore;\r\n            _userManager = userManager;\r\n     " +
                    "       _logger = logger;\r\n            _accountEmailSender = accountEmailSender;\r" +
                    "\n        }\r\n\r\n        [HttpPost]\r\n        public async Task<IActionResult> Regis" +
                    "ter(RegisterDto input)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(inp" +
                    "ut.Email))\r\n            {\r\n                ModelState.AddModelError<RegisterDto>" +
                    "(x => x.Email, \"Mandatory\");\r\n            }\r\n\r\n            if (string.IsNullOrWh" +
                    "iteSpace(input.Password))\r\n            {\r\n                ModelState.AddModelErr" +
                    "or<RegisterDto>(x => x.Password, \"Mandatory\");\r\n            }\r\n\r\n            if " +
                    "(!ModelState.IsValid)\r\n            {\r\n                return BadRequest(ModelSta" +
                    "te);\r\n            }\r\n\r\n            var user = new IdentityUser();\r\n\r\n           " +
                    " await _userStore.SetUserNameAsync(user, input.Email, CancellationToken.None);\r\n" +
                    "            await _userManager.SetEmailAsync(user, input.Email);\r\n            va" +
                    "r result = await _userManager.CreateAsync(user, input.Password!);\r\n\r\n           " +
                    " if (!result.Succeeded)\r\n            {\r\n                foreach (var error in re" +
                    "sult.Errors)\r\n                {\r\n                    ModelState.AddModelError(st" +
                    "ring.Empty, error.Description);\r\n                }\r\n\r\n                return Bad" +
                    "Request(ModelState);\r\n            }\r\n\r\n            _logger.LogInformation(\"User " +
                    "created a new account with password.\");\r\n\r\n            var userId = await _userM" +
                    "anager.GetUserIdAsync(user);\r\n            var code = await _userManager.Generate" +
                    "EmailConfirmationTokenAsync(user);\r\n            code = WebEncoders.Base64UrlEnco" +
                    "de(Encoding.UTF8.GetBytes(code));\r\n\r\n            if (_userManager.Options.SignIn" +
                    ".RequireConfirmedAccount)\r\n            {\r\n                await _accountEmailSen" +
                    "der.SendEmailConfirmationRequest(\r\n                    email: input.Email!,\r\n   " +
                    "                 userId: userId,\r\n                    code: code);\r\n            " +
                    "}\r\n\r\n            return Ok();\r\n        }\r\n\r\n        [HttpPost]\r\n        public a" +
                    "sync Task<IActionResult> Login(LoginDto input)\r\n        {\r\n            if (strin" +
                    "g.IsNullOrWhiteSpace(input.Email))\r\n            {\r\n                ModelState.Ad" +
                    "dModelError<LoginDto>(x => x.Email, \"Mandatory\");\r\n            }\r\n\r\n            " +
                    "if (string.IsNullOrWhiteSpace(input.Password))\r\n            {\r\n                M" +
                    "odelState.AddModelError<LoginDto>(x => x.Password, \"Mandatory\");\r\n            }\r" +
                    "\n\r\n            if (!ModelState.IsValid)\r\n            {\r\n                return B" +
                    "adRequest(ModelState);\r\n            }\r\n\r\n            // This doesn\'t count login" +
                    " failures towards account lockout\r\n            // To enable password failures to" +
                    " trigger account lockout, set lockoutOnFailure: true\r\n            var result = a" +
                    "wait _signInManager.PasswordSignInAsync(\r\n                userName: input.Email!" +
                    ",\r\n                password: input.Password!,\r\n                isPersistent: fal" +
                    "se,\r\n                lockoutOnFailure: false);\r\n\r\n            if (result.IsLocke" +
                    "dOut)\r\n            {\r\n                _logger.LogWarning(\"User account locked ou" +
                    "t.\");\r\n                return Forbid();\r\n            }\r\n\r\n            if (!resul" +
                    "t.Succeeded)\r\n            {\r\n                _logger.LogWarning(\"Invalid login a" +
                    "ttempt.\");\r\n                return Forbid();\r\n            }\r\n\r\n            _logg" +
                    "er.LogInformation(\"User logged in.\");\r\n            return Ok();\r\n        }\r\n\r\n  " +
                    "      [HttpPost]\r\n        public async Task<IActionResult> ConfirmEmail(ConfirmE" +
                    "mailDto input)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(input.UserI" +
                    "d))\r\n            {\r\n                ModelState.AddModelError<ConfirmEmailDto>(x " +
                    "=> x.UserId, \"Mandatory\");\r\n            }\r\n\r\n            if (string.IsNullOrWhit" +
                    "eSpace(input.Code))\r\n            {\r\n                ModelState.AddModelError<Con" +
                    "firmEmailDto>(x => x.Code, \"Mandatory\");\r\n            }\r\n\r\n            if (!Mode" +
                    "lState.IsValid)\r\n            {\r\n                return BadRequest(ModelState);\r\n" +
                    "            }\r\n\r\n            var userId = input.UserId!;\r\n            var code =" +
                    " input.Code!;\r\n            var user = await _userManager.FindByIdAsync(input.Use" +
                    "rId!);\r\n            if (user == null)\r\n            {\r\n                return Not" +
                    "Found($\"Unable to load user with ID \'{userId}\'.\");\r\n            }\r\n\r\n           " +
                    " code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(code));\r\n\r\n         " +
                    "   var result = await _userManager.ConfirmEmailAsync(user, code);\r\n            i" +
                    "f (!result.Succeeded)\r\n            {\r\n                ModelState.AddModelError<C" +
                    "onfirmEmailDto>(x => x, \"Error confirming your email.\");\r\n                return" +
                    " BadRequest(ModelState);\r\n            }\r\n\r\n            return Ok();\r\n        }\r\n" +
                    "    }\r\n\r\n    public class RegisterDto\r\n    {\r\n        public string? Email { get" +
                    "; set; }\r\n        public string? Password { get; set; }\r\n    }\r\n\r\n    public cla" +
                    "ss LoginDto\r\n    {\r\n        public string? Email { get; set; }\r\n        public s" +
                    "tring? Password { get; set; }\r\n    }\r\n\r\n    public class ConfirmEmailDto\r\n    {\r" +
                    "\n        public string? UserId { get; set; }\r\n        public string? Code { get;" +
                    " set; }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
