<?xml version="1.0" encoding="utf-8"?>
<class id="04a16b10-1a83-4e5a-aad8-ca86b9638847" type="Element Extension" typeId="e3c7b1ca-f080-45c1-b56f-8d44226c8e20">
  <name>Command Extension</name>
  <display>Command Extension: Command</display>
  <isAbstract>false</isAbstract>
  <sort-children>by-type-then-manually</sort-children>
  <genericTypes />
  <typeReference id="d5c7309d-9ed1-479d-9477-8e564aea5624">
    <typeId>ccf14eb6-3a55-4d81-b5b9-d27311c70cb9</typeId>
    <isNavigable>true</isNavigable>
    <isNullable>false</isNullable>
    <isCollection>false</isCollection>
    <isRequired>true</isRequired>
    <typePackageName>Intent.Modelers.Services.CQRS</typePackageName>
    <typePackageId>45fb22e9-f493-4de5-9fe0-845f783aa9d4</typePackageId>
    <stereotypes />
    <genericTypeParameters />
  </typeReference>
  <isMapped>false</isMapped>
  <parentFolderId>46410048-55e6-4cc9-8ee0-dcd0e24a8ee2</parentFolderId>
  <packageId>4c21efb8-ec70-4d57-8ea4-d6e9f7e6b9f6</packageId>
  <packageName>Intent.Application.MediatR.CRUD</packageName>
  <stereotypes>
    <stereotype stereotypeDefinitionId="159cbc8e-a910-40f7-8e45-3edadbb863c2" name="Type Reference Extension Settings">
      <addedByDefault>true</addedByDefault>
      <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
      <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
      <properties>
        <property name="35226a83-3965-4224-8aef-20c68a0c5180" display="Mode" value="Inherit" isActive="true" />
        <property name="7d3859d4-084d-4ff0-8b31-850b4a8f8cd0" display="Display Name" isActive="false" />
        <property name="17223dbd-8df0-4700-8b81-02274ca3ed7f" display="Hint" isActive="false" />
        <property name="b2cef034-5706-45d2-8554-f4dc582a18ff" display="Target Types" isActive="false" />
        <property name="93e4efa9-186d-4e88-ae0a-491bcd6e6f5e" display="Default Type Id" isActive="false" />
        <property name="7a0c4185-1c08-4d3e-9185-14683d7a3bd0" display="Allow Collection" value="Inherit" isActive="false" />
        <property name="e3dc90ec-4f5f-4f20-b271-e28a5094dc91" display="Allow Nullable" value="Inherit" isActive="false" />
      </properties>
    </stereotype>
    <stereotype stereotypeDefinitionId="312eab00-f6db-492e-bbb4-e41383c8d3d8" name="Extension Settings">
      <addedByDefault>true</addedByDefault>
      <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
      <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
      <properties>
        <property name="8c964307-9d03-4a14-9fd3-40ea2607955a" display="Display Text Function" value="" isActive="true" />
        <property name="996ed45f-2318-4587-9618-73db3d7cfed0" display="Validate Function" value="" isActive="true" />
      </properties>
    </stereotype>
  </stereotypes>
  <metadata />
  <childElements>
    <childElement id="e97592ba-34be-4ad3-9a49-3a181b97b74b" type="Element Event Settings" typeId="3c628ab0-2407-4fb0-8507-ddde986cff2e">
      <name>NewElementEventSettings</name>
      <display>[events]</display>
      <isAbstract>false</isAbstract>
      <sort-children>by-type-then-by-name</sort-children>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>04a16b10-1a83-4e5a-aad8-ca86b9638847</parentFolderId>
      <packageId>4c21efb8-ec70-4d57-8ea4-d6e9f7e6b9f6</packageId>
      <packageName>Intent.Application.MediatR.CRUD</packageName>
      <stereotypes />
      <metadata />
      <childElements>
        <childElement id="56d22886-ac9a-4d4f-b92a-fc1a3dd6f76a" type="Element Event Handler" typeId="0ef412e3-d15a-45d3-bcd3-f646165f2eb6">
          <name>On Mapped</name>
          <display>On Mapped: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="b3d4b894-b4cd-4e4f-8423-0ecbf6143bdf">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>e97592ba-34be-4ad3-9a49-3a181b97b74b</parentFolderId>
          <packageId>4c21efb8-ec70-4d57-8ea4-d6e9f7e6b9f6</packageId>
          <packageName>Intent.Application.MediatR.CRUD</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="/// &lt;reference path=&quot;../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;function getSurrogateKeyType() {&#xD;&#xA;    var _a, _b, _c;&#xD;&#xA;    const commonTypes = {&#xD;&#xA;        guid: &quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;,&#xD;&#xA;        long: &quot;33013006-E404-48C2-AC46-24EF5A5774FD&quot;,&#xD;&#xA;        int: &quot;fb0a362d-e9e2-40de-b6ff-5ce8167cbe74&quot;&#xD;&#xA;    };&#xD;&#xA;    const javaTypes = {&#xD;&#xA;        long: &quot;e9e575eb-f8de-4ce4-9838-2d09665a752d&quot;,&#xD;&#xA;        int: &quot;b3e5cb3b-8a26-4346-810b-9789afa25a82&quot;&#xD;&#xA;    };&#xD;&#xA;    const typeNameToIdMap = new Map();&#xD;&#xA;    typeNameToIdMap.set(&quot;guid&quot;, commonTypes.guid);&#xD;&#xA;    typeNameToIdMap.set(&quot;int&quot;, lookup(javaTypes.int) != null ? javaTypes.int : commonTypes.int);&#xD;&#xA;    typeNameToIdMap.set(&quot;long&quot;, lookup(javaTypes.long) != null ? javaTypes.long : commonTypes.long);&#xD;&#xA;    let typeName = (_c = (_b = (_a = application.getSettings(&quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;)) === null || _a === void 0 ? void 0 : _a.getField(&quot;Key Type&quot;)) === null || _b === void 0 ? void 0 : _b.value) !== null &amp;&amp; _c !== void 0 ? _c : &quot;int&quot;;&#xD;&#xA;    if (typeNameToIdMap.has(typeName)) {&#xD;&#xA;        return typeNameToIdMap.get(typeName);&#xD;&#xA;    }&#xD;&#xA;    return typeNameToIdMap.get(&quot;guid&quot;);&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../../common/getSurrogateKeyType.ts&quot; /&gt;&#xD;&#xA;function getFieldFormat(str) {&#xD;&#xA;    return toPascalCase(str);&#xD;&#xA;}&#xD;&#xA;function getDomainAttributeNameFormat(str) {&#xD;&#xA;    let convention = getDomainAttributeNamingConvention();&#xD;&#xA;    switch (convention) {&#xD;&#xA;        case &quot;pascal-case&quot;:&#xD;&#xA;            return toPascalCase(str);&#xD;&#xA;        case &quot;camel-case&quot;:&#xD;&#xA;            return toCamelCase(str);&#xD;&#xA;        default:&#xD;&#xA;            return str;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function getOrCreateDto(elementName, parentElement) {&#xD;&#xA;    const expectedDtoName = `${elementName}Dto`;&#xD;&#xA;    let existingDto = parentElement.getChildren(&quot;DTO&quot;).filter(x =&gt; x.getName() === expectedDtoName)[0];&#xD;&#xA;    if (existingDto) {&#xD;&#xA;        return existingDto;&#xD;&#xA;    }&#xD;&#xA;    let dto = createElement(&quot;DTO&quot;, expectedDtoName, parentElement.id);&#xD;&#xA;    return dto;&#xD;&#xA;}&#xD;&#xA;function ensureDtoFields(autoAddPrimaryKey, mappedElement, dto) {&#xD;&#xA;    var _a, _b, _c;&#xD;&#xA;    let dtoUpdated = false;&#xD;&#xA;    let domainElement = mappedElement&#xD;&#xA;        .typeReference&#xD;&#xA;        .getType();&#xD;&#xA;    let attributesWithMapPaths = getAttributesWithMapPath(domainElement);&#xD;&#xA;    let isCreateMode = ((_b = (_a = dto.getMetadata(&quot;originalVerb&quot;)) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.startsWith(&quot;create&quot;)) == true;&#xD;&#xA;    for (var keyName of Object.keys(attributesWithMapPaths)) {&#xD;&#xA;        let entry = attributesWithMapPaths[keyName];&#xD;&#xA;        if (isCreateMode &amp;&amp; ((_c = entry.name) === null || _c === void 0 ? void 0 : _c.toLowerCase()) === &quot;id&quot;) {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;        if (isCreateMode &amp;&amp; isOwnerForeignKey(entry.name, domainElement)) {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;        if (dto.getChildren(&quot;DTO-Field&quot;).some(x =&gt; x.getName() == entry.name)) {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;        let field = createElement(&quot;DTO-Field&quot;, entry.name, dto.id);&#xD;&#xA;        field.typeReference.setType(entry.typeId);&#xD;&#xA;        field.typeReference.setIsNullable(entry.isNullable);&#xD;&#xA;        field.typeReference.setIsCollection(entry.isCollection);&#xD;&#xA;        field.setMapping(entry.mapPath);&#xD;&#xA;        dtoUpdated = true;&#xD;&#xA;    }&#xD;&#xA;    if (autoAddPrimaryKey &amp;&amp; !isCreateMode) {&#xD;&#xA;        addPrimaryKeys(dto, domainElement, true);&#xD;&#xA;    }&#xD;&#xA;    if (dtoUpdated) {&#xD;&#xA;        dto.collapse();&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function isOwnerForeignKey(attributeName, domainElement) {&#xD;&#xA;    for (let association of domainElement.getAssociations().filter(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable)) {&#xD;&#xA;        if (attributeName.toLowerCase().indexOf(association.getName().toLowerCase()) &gt;= 0) {&#xD;&#xA;            return true;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    return false;&#xD;&#xA;}&#xD;&#xA;function addPrimaryKeys(dto, entity, map) {&#xD;&#xA;    const primaryKeys = getPrimaryKeysWithMapPath(entity);&#xD;&#xA;    if (primaryKeys.length == 0) {&#xD;&#xA;        // Implicit key:&#xD;&#xA;        primaryKeys.push({&#xD;&#xA;            id: null,&#xD;&#xA;            name: &quot;Id&quot;,&#xD;&#xA;            typeId: getSurrogateKeyType(),&#xD;&#xA;            mapPath: null,&#xD;&#xA;            isNullable: false,&#xD;&#xA;            isCollection: false&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;    for (const primaryKey of primaryKeys) {&#xD;&#xA;        const name = getDomainAttributeNameFormat(primaryKey.name);&#xD;&#xA;        if (dto.getChildren(&quot;DTO-Field&quot;).some(x =&gt; x.getName().toLowerCase() == name.toLowerCase())) {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;        const dtoField = createElement(&quot;DTO-Field&quot;, getFieldFormat(name), dto.id);&#xD;&#xA;        dtoField.typeReference.setType(primaryKey.typeId);&#xD;&#xA;        if (map &amp;&amp; primaryKey.mapPath != null) {&#xD;&#xA;            console.log(`Doing mapping for ${dtoField.id}`);&#xD;&#xA;            dtoField.setMapping(primaryKey.mapPath);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function getPrimaryKeysWithMapPath(entity) {&#xD;&#xA;    let keydict = Object.create(null);&#xD;&#xA;    let keys = entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;    keys.forEach(key =&gt; keydict[key.id] = {&#xD;&#xA;        id: key.id,&#xD;&#xA;        name: key.getName(),&#xD;&#xA;        typeId: key.typeReference.typeId,&#xD;&#xA;        mapPath: [key.id],&#xD;&#xA;        isNullable: false,&#xD;&#xA;        isCollection: false&#xD;&#xA;    });&#xD;&#xA;    traverseInheritanceHierarchyForPrimaryKeys(keydict, entity, []);&#xD;&#xA;    return Object.values(keydict);&#xD;&#xA;    function traverseInheritanceHierarchyForPrimaryKeys(keydict, curEntity, generalizationStack) {&#xD;&#xA;        if (!curEntity) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalizations = curEntity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;        if (generalizations.length == 0) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalization = generalizations[0];&#xD;&#xA;        generalizationStack.push(generalization.id);&#xD;&#xA;        let nextEntity = generalization.typeReference.getType();&#xD;&#xA;        let baseKeys = nextEntity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;        baseKeys.forEach(key =&gt; {&#xD;&#xA;            keydict[key.id] = {&#xD;&#xA;                id: key.id,&#xD;&#xA;                name: key.getName(),&#xD;&#xA;                typeId: key.typeReference.typeId,&#xD;&#xA;                mapPath: generalizationStack.concat([key.id]),&#xD;&#xA;                isNullable: key.typeReference.isNullable,&#xD;&#xA;                isCollection: key.typeReference.isCollection&#xD;&#xA;            };&#xD;&#xA;        });&#xD;&#xA;        traverseInheritanceHierarchyForPrimaryKeys(keydict, nextEntity, generalizationStack);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function getAttributesWithMapPath(entity) {&#xD;&#xA;    let attrDict = Object.create(null);&#xD;&#xA;    let attributes = entity.getChildren(&quot;Attribute&quot;)&#xD;&#xA;        .filter(x =&gt; {&#xD;&#xA;        var _a;&#xD;&#xA;        return !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp;&#xD;&#xA;            !legacyPartitionKey(x) &amp;&amp;&#xD;&#xA;            (x[&quot;hasMetadata&quot;] &amp;&amp; (!x.hasMetadata(&quot;set-by-infrastructure&quot;) || ((_a = x.getMetadata(&quot;set-by-infrastructure&quot;)) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) != &quot;true&quot;));&#xD;&#xA;    });&#xD;&#xA;    attributes.forEach(attr =&gt; attrDict[attr.id] = {&#xD;&#xA;        id: attr.id,&#xD;&#xA;        name: attr.getName(),&#xD;&#xA;        typeId: attr.typeReference.typeId,&#xD;&#xA;        mapPath: [attr.id],&#xD;&#xA;        isNullable: false,&#xD;&#xA;        isCollection: false&#xD;&#xA;    });&#xD;&#xA;    traverseInheritanceHierarchyForAttributes(attrDict, entity, []);&#xD;&#xA;    return attrDict;&#xD;&#xA;    function traverseInheritanceHierarchyForAttributes(attrDict, curEntity, generalizationStack) {&#xD;&#xA;        if (!curEntity) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalizations = curEntity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;        if (generalizations.length == 0) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalization = generalizations[0];&#xD;&#xA;        generalizationStack.push(generalization.id);&#xD;&#xA;        let nextEntity = generalization.typeReference.getType();&#xD;&#xA;        let baseKeys = nextEntity.getChildren(&quot;Attribute&quot;).filter(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp; !legacyPartitionKey(x));&#xD;&#xA;        baseKeys.forEach(attr =&gt; {&#xD;&#xA;            attrDict[attr.id] = {&#xD;&#xA;                id: attr.id,&#xD;&#xA;                name: attr.getName(),&#xD;&#xA;                typeId: attr.typeReference.typeId,&#xD;&#xA;                mapPath: generalizationStack.concat([attr.id]),&#xD;&#xA;                isNullable: attr.typeReference.isNullable,&#xD;&#xA;                isCollection: attr.typeReference.isCollection&#xD;&#xA;            };&#xD;&#xA;        });&#xD;&#xA;        traverseInheritanceHierarchyForAttributes(attrDict, nextEntity, generalizationStack);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function getDomainAttributeNamingConvention() {&#xD;&#xA;    var _a, _b, _c;&#xD;&#xA;    const domainSettingsId = &quot;c4d1e35c-7c0d-4926-afe0-18f17563ce17&quot;;&#xD;&#xA;    return (_c = (_b = (_a = application.getSettings(domainSettingsId)) === null || _a === void 0 ? void 0 : _a.getField(&quot;Attribute Naming Convention&quot;)) === null || _b === void 0 ? void 0 : _b.value) !== null &amp;&amp; _c !== void 0 ? _c : &quot;pascal-case&quot;;&#xD;&#xA;}&#xD;&#xA;// Just in case someone still uses this convention. Used to filter out those attributes when mapping&#xD;&#xA;// to domain entities that are within a Cosmos DB paradigm.&#xD;&#xA;function legacyPartitionKey(attribute) {&#xD;&#xA;    return attribute.hasStereotype(&quot;Partition Key&quot;) &amp;&amp; attribute.getName() === &quot;PartitionKey&quot;;&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;getSurrogateKeyType.ts&quot;/&gt;&#xD;&#xA;class DomainHelper {&#xD;&#xA;    static async openSelectEntityDialog(options) {&#xD;&#xA;        let classes = lookupTypesOf(&quot;Class&quot;).filter(x =&gt; DomainHelper.isAggregateRoot(x) || ((options === null || options === void 0 ? void 0 : options.includeOwnedRelationships) != false &amp;&amp; DomainHelper.ownerIsAggregateRoot(x) &amp;&amp; DomainHelper.hasPrimaryKey(x)) || x.hasStereotype(&quot;Repository&quot;));&#xD;&#xA;        if (classes.length == 0) {&#xD;&#xA;            await dialogService.info(&quot;No Domain types could be found. Please ensure that you have a reference to the Domain package and that at least one class exists in it.&quot;);&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;        let classId = await dialogService.lookupFromOptions(classes.map((x) =&gt; ({&#xD;&#xA;            id: x.id,&#xD;&#xA;            name: this.getFriendlyDisplayNameForClassSelection(x)&#xD;&#xA;        })));&#xD;&#xA;        if (classId == null) {&#xD;&#xA;            await dialogService.error(`No class found with id &quot;${classId}&quot;.`);&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;        let foundEntity = lookup(classId);&#xD;&#xA;        return foundEntity;&#xD;&#xA;    }&#xD;&#xA;    static getFriendlyDisplayNameForClassSelection(element) {&#xD;&#xA;        let found = DomainHelper.getOwningAggregate(element);&#xD;&#xA;        return !found ? element.getName() : `${element.getName()} (${found.getName()})`;&#xD;&#xA;    }&#xD;&#xA;    static isAggregateRoot(element) {&#xD;&#xA;        let result = !element.getAssociations(&quot;Association&quot;)&#xD;&#xA;            .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);&#xD;&#xA;        return result;&#xD;&#xA;    }&#xD;&#xA;    static getOwningAggregate(entity) {&#xD;&#xA;        var _a;&#xD;&#xA;        let invalidAssociations = entity.getAssociations(&quot;Association&quot;).filter(x =&gt; x.typeReference.getType() == null);&#xD;&#xA;        if (invalidAssociations.length &gt; 0) {&#xD;&#xA;            console.warn(&quot;Invalid associations found:&quot;);&#xD;&#xA;            invalidAssociations.forEach(x =&gt; {&#xD;&#xA;                console.warn(&quot;Invalid associations: &quot; + x.getName());&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;        let result = (_a = entity.getAssociations(&quot;Association&quot;)&#xD;&#xA;            .filter(x =&gt; this.isAggregateRoot(x.typeReference.getType()) &amp;&amp; isOwnedBy(x) &amp;&amp;&#xD;&#xA;            // Let's only target collections for now as part of the nested compositional crud support&#xD;&#xA;            // as one-to-one relationships are more expensive to address and possibly not going to&#xD;&#xA;            // be needed.&#xD;&#xA;            x.getOtherEnd().typeReference.isCollection)[0]) === null || _a === void 0 ? void 0 : _a.typeReference.getType();&#xD;&#xA;        return result;&#xD;&#xA;        function isOwnedBy(association) {&#xD;&#xA;            return association.isSourceEnd() &amp;&amp;&#xD;&#xA;                !association.typeReference.isNullable &amp;&amp;&#xD;&#xA;                !association.typeReference.isCollection;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    static ownerIsAggregateRoot(entity) {&#xD;&#xA;        let result = DomainHelper.getOwningAggregate(entity);&#xD;&#xA;        return result ? true : false;&#xD;&#xA;    }&#xD;&#xA;    static hasPrimaryKey(entity) {&#xD;&#xA;        let keys = entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;        return keys.length &gt; 0;&#xD;&#xA;    }&#xD;&#xA;    static getPrimaryKeys(entity) {&#xD;&#xA;        if (!entity) {&#xD;&#xA;            throw new Error(&quot;entity not specified&quot;);&#xD;&#xA;        }&#xD;&#xA;        let primaryKeys = DomainHelper.getPrimaryKeysMap(entity);&#xD;&#xA;        return Object.values(primaryKeys);&#xD;&#xA;    }&#xD;&#xA;    static isUserSuppliedPrimaryKey(pk) {&#xD;&#xA;        if (pk == null)&#xD;&#xA;            return false;&#xD;&#xA;        if (!pk.hasStereotype(&quot;Primary Key&quot;))&#xD;&#xA;            return false;&#xD;&#xA;        var pkStereotype = pk.getStereotype(&quot;Primary Key&quot;);&#xD;&#xA;        if (!pkStereotype.hasProperty(&quot;Data source&quot;)) {&#xD;&#xA;            return false;&#xD;&#xA;        }&#xD;&#xA;        return pkStereotype.getProperty(&quot;Data source&quot;).value == &quot;User supplied&quot;;&#xD;&#xA;    }&#xD;&#xA;    static getPrimaryKeysMap(entity) {&#xD;&#xA;        let keydict = Object.create(null);&#xD;&#xA;        let keys = entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;        keys.forEach(key =&gt; keydict[key.id] = {&#xD;&#xA;            id: key.id,&#xD;&#xA;            name: key.getName(),&#xD;&#xA;            typeId: key.typeReference.typeId,&#xD;&#xA;            mapPath: [key.id],&#xD;&#xA;            isNullable: false,&#xD;&#xA;            isCollection: false&#xD;&#xA;        });&#xD;&#xA;        traverseInheritanceHierarchyForPrimaryKeys(keydict, entity, []);&#xD;&#xA;        return keydict;&#xD;&#xA;        function traverseInheritanceHierarchyForPrimaryKeys(keydict, curEntity, generalizationStack) {&#xD;&#xA;            if (!curEntity) {&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            let generalizations = curEntity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;            if (generalizations.length == 0) {&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            let generalization = generalizations[0];&#xD;&#xA;            generalizationStack.push(generalization.id);&#xD;&#xA;            let nextEntity = generalization.typeReference.getType();&#xD;&#xA;            let baseKeys = nextEntity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;            baseKeys.forEach(key =&gt; {&#xD;&#xA;                keydict[key.id] = {&#xD;&#xA;                    id: key.id,&#xD;&#xA;                    name: key.getName(),&#xD;&#xA;                    typeId: key.typeReference.typeId,&#xD;&#xA;                    mapPath: generalizationStack.concat([key.id]),&#xD;&#xA;                    isNullable: key.typeReference.isNullable,&#xD;&#xA;                    isCollection: key.typeReference.isCollection&#xD;&#xA;                };&#xD;&#xA;            });&#xD;&#xA;            traverseInheritanceHierarchyForPrimaryKeys(keydict, nextEntity, generalizationStack);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    static getForeignKeys(entity, owningAggregate) {&#xD;&#xA;        var _a;&#xD;&#xA;        if (!entity) {&#xD;&#xA;            throw new Error(&quot;entity not specified&quot;);&#xD;&#xA;        }&#xD;&#xA;        if (!owningAggregate) {&#xD;&#xA;            throw new Error(&quot;nestedCompOwner not specified&quot;);&#xD;&#xA;        }&#xD;&#xA;        // Use the new Associated property on the FK stereotype method for FK Attribute lookup&#xD;&#xA;        let foreignKeys = [];&#xD;&#xA;        for (let attr of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Foreign Key&quot;))) {&#xD;&#xA;            let associationId = (_a = attr.getStereotype(&quot;Foreign Key&quot;).getProperty(&quot;Association&quot;)) === null || _a === void 0 ? void 0 : _a.getValue();&#xD;&#xA;            if (owningAggregate.getAssociations(&quot;Association&quot;).some(x =&gt; x.id == associationId)) {&#xD;&#xA;                foreignKeys.push(attr);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        // Backward compatible lookup method&#xD;&#xA;        if (foreignKeys.length == 0) {&#xD;&#xA;            let foundFk = entity.getChildren(&quot;Attribute&quot;)&#xD;&#xA;                .filter(x =&gt; x.getName().toLowerCase().indexOf(owningAggregate.getName().toLowerCase()) &gt;= 0 &amp;&amp; x.hasStereotype(&quot;Foreign Key&quot;))[0];&#xD;&#xA;            if (foundFk) {&#xD;&#xA;                foreignKeys.push(foundFk);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return foreignKeys.map(x =&gt; ({&#xD;&#xA;            name: DomainHelper.getAttributeNameFormat(x.getName()),&#xD;&#xA;            typeId: x.typeReference.typeId,&#xD;&#xA;            id: x.id,&#xD;&#xA;            mapPath: [x.id],&#xD;&#xA;            isCollection: x.typeReference.isCollection,&#xD;&#xA;            isNullable: x.typeReference.isNullable,&#xD;&#xA;            element: x&#xD;&#xA;        }));&#xD;&#xA;    }&#xD;&#xA;    static getChildrenOfType(entity, type) {&#xD;&#xA;        let attrDict = Object.create(null);&#xD;&#xA;        let attributes = entity.getChildren(type);&#xD;&#xA;        attributes.forEach(attr =&gt; attrDict[attr.id] = {&#xD;&#xA;            id: attr.id,&#xD;&#xA;            name: attr.getName(),&#xD;&#xA;            typeId: attr.typeReference.typeId,&#xD;&#xA;            mapPath: [attr.id],&#xD;&#xA;            isNullable: false,&#xD;&#xA;            isCollection: false&#xD;&#xA;        });&#xD;&#xA;        return Object.values(attrDict);&#xD;&#xA;    }&#xD;&#xA;    static getAttributesWithMapPath(entity) {&#xD;&#xA;        let attrDict = Object.create(null);&#xD;&#xA;        let attributes = entity&#xD;&#xA;            .getChildren(&quot;Attribute&quot;)&#xD;&#xA;            .filter(x =&gt; {&#xD;&#xA;            var _a;&#xD;&#xA;            return !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp;&#xD;&#xA;                !DomainHelper.legacyPartitionKey(x) &amp;&amp;&#xD;&#xA;                (x[&quot;hasMetadata&quot;] &amp;&amp; (!x.hasMetadata(&quot;set-by-infrastructure&quot;) || ((_a = x.getMetadata(&quot;set-by-infrastructure&quot;)) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) != &quot;true&quot;));&#xD;&#xA;        });&#xD;&#xA;        attributes.forEach(attr =&gt; attrDict[attr.id] = {&#xD;&#xA;            id: attr.id,&#xD;&#xA;            name: attr.getName(),&#xD;&#xA;            typeId: attr.typeReference.typeId,&#xD;&#xA;            mapPath: [attr.id],&#xD;&#xA;            isNullable: false,&#xD;&#xA;            isCollection: false&#xD;&#xA;        });&#xD;&#xA;        traverseInheritanceHierarchyForAttributes(attrDict, entity, []);&#xD;&#xA;        return Object.values(attrDict);&#xD;&#xA;        function traverseInheritanceHierarchyForAttributes(attrDict, curEntity, generalizationStack) {&#xD;&#xA;            if (!curEntity) {&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            let generalizations = curEntity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;            if (generalizations.length == 0) {&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            let generalization = generalizations[0];&#xD;&#xA;            generalizationStack.push(generalization.id);&#xD;&#xA;            let nextEntity = generalization.typeReference.getType();&#xD;&#xA;            let baseKeys = nextEntity.getChildren(&quot;Attribute&quot;).filter(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp; !DomainHelper.legacyPartitionKey(x));&#xD;&#xA;            baseKeys.forEach(attr =&gt; {&#xD;&#xA;                attrDict[attr.id] = {&#xD;&#xA;                    id: attr.id,&#xD;&#xA;                    name: attr.getName(),&#xD;&#xA;                    typeId: attr.typeReference.typeId,&#xD;&#xA;                    mapPath: generalizationStack.concat([attr.id]),&#xD;&#xA;                    isNullable: attr.typeReference.isNullable,&#xD;&#xA;                    isCollection: attr.typeReference.isCollection&#xD;&#xA;                };&#xD;&#xA;            });&#xD;&#xA;            traverseInheritanceHierarchyForAttributes(attrDict, nextEntity, generalizationStack);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    static getAttributeNameFormat(str) {&#xD;&#xA;        let convention = DomainHelper.getDomainAttributeNamingConvention();&#xD;&#xA;        switch (convention) {&#xD;&#xA;            case &quot;pascal-case&quot;:&#xD;&#xA;                return toPascalCase(str);&#xD;&#xA;            case &quot;camel-case&quot;:&#xD;&#xA;                return toCamelCase(str);&#xD;&#xA;        }&#xD;&#xA;        return str;&#xD;&#xA;    }&#xD;&#xA;    static getDomainAttributeNamingConvention() {&#xD;&#xA;        var _a, _b, _c;&#xD;&#xA;        const domainSettingsId = &quot;c4d1e35c-7c0d-4926-afe0-18f17563ce17&quot;;&#xD;&#xA;        return (_c = (_b = (_a = application.getSettings(domainSettingsId)) === null || _a === void 0 ? void 0 : _a.getField(&quot;Attribute Naming Convention&quot;)) === null || _b === void 0 ? void 0 : _b.value) !== null &amp;&amp; _c !== void 0 ? _c : &quot;pascal-case&quot;;&#xD;&#xA;    }&#xD;&#xA;    static getSurrogateKeyType() {&#xD;&#xA;        return getSurrogateKeyType();&#xD;&#xA;    }&#xD;&#xA;    // Just in case someone still uses this convention. Used to filter out those attributes when mapping&#xD;&#xA;    // to domain entities that are within a Cosmos DB paradigm.&#xD;&#xA;    static legacyPartitionKey(attribute) {&#xD;&#xA;        return attribute.hasStereotype(&quot;Partition Key&quot;) &amp;&amp; attribute.getName() === &quot;PartitionKey&quot;;&#xD;&#xA;    }&#xD;&#xA;    static requiresForeignKey(associationEnd) {&#xD;&#xA;        return DomainHelper.isManyToVariantsOfOne(associationEnd) || DomainHelper.isSelfReferencingZeroToOne(associationEnd);&#xD;&#xA;    }&#xD;&#xA;    static isManyToVariantsOfOne(associationEnd) {&#xD;&#xA;        return !associationEnd.typeReference.isCollection &amp;&amp; associationEnd.getOtherEnd().typeReference.isCollection;&#xD;&#xA;    }&#xD;&#xA;    static isSelfReferencingZeroToOne(associationEnd) {&#xD;&#xA;        return !associationEnd.typeReference.isCollection &amp;&amp; associationEnd.typeReference.isNullable &amp;&amp;&#xD;&#xA;            associationEnd.typeReference.typeId == associationEnd.getOtherEnd().typeReference.typeId;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;;&#xD;&#xA;class ServicesConstants {&#xD;&#xA;}&#xD;&#xA;ServicesConstants.dtoToEntityMappingId = &quot;942eae46-49f1-450e-9274-a92d40ac35fa&quot;; //&quot;01d74d4f-e478-4fde-a2f0-9ea92255f3c5&quot;;&#xD;&#xA;ServicesConstants.dtoFromEntityMappingId = &quot;1f747d14-681c-4a20-8c68-34223f41b825&quot;;&#xD;&#xA;class ServicesHelper {&#xD;&#xA;    static addDtoFieldsFromDomain(dto, attributes) {&#xD;&#xA;        var _a;&#xD;&#xA;        for (let key of attributes) {&#xD;&#xA;            if (dto &amp;&amp; !dto.getChildren(&quot;DTO-Field&quot;).some(x =&gt; x.getName() == ServicesHelper.getFieldFormat(key.name))) {&#xD;&#xA;                let field = createElement(&quot;DTO-Field&quot;, ServicesHelper.getFieldFormat(key.name), dto.id);&#xD;&#xA;                field.typeReference.setType(key.typeId);&#xD;&#xA;                if (((_a = key.mapPath) !== null &amp;&amp; _a !== void 0 ? _a : []).length &gt; 0) {&#xD;&#xA;                    field.setMapping(key.mapPath);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    static getParameterFormat(str) {&#xD;&#xA;        return toCamelCase(str);&#xD;&#xA;    }&#xD;&#xA;    static getRoutingFormat(str) {&#xD;&#xA;        return pluralize(str);&#xD;&#xA;    }&#xD;&#xA;    static getFieldFormat(str) {&#xD;&#xA;        return toPascalCase(str);&#xD;&#xA;    }&#xD;&#xA;    static formatName(str, type) {&#xD;&#xA;        switch (type) {&#xD;&#xA;            case &quot;property&quot;:&#xD;&#xA;            case &quot;class&quot;:&#xD;&#xA;                return toPascalCase(str);&#xD;&#xA;            case &quot;parameter&quot;:&#xD;&#xA;                return toCamelCase(str);&#xD;&#xA;            default:&#xD;&#xA;                return str;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;class ElementManager {&#xD;&#xA;    constructor(command, settings) {&#xD;&#xA;        var _a;&#xD;&#xA;        this.command = command;&#xD;&#xA;        this.settings = settings;&#xD;&#xA;        this.mappedElement = (_a = command.getMapping()) === null || _a === void 0 ? void 0 : _a.getElement();&#xD;&#xA;    }&#xD;&#xA;    get id() { return this.command.id; }&#xD;&#xA;    ;&#xD;&#xA;    setReturnType(typeId, isCollection) {&#xD;&#xA;        this.command.typeReference.setType(typeId);&#xD;&#xA;        if (isCollection != null) {&#xD;&#xA;            this.command.typeReference.setIsCollection(isCollection);&#xD;&#xA;        }&#xD;&#xA;        return this;&#xD;&#xA;    }&#xD;&#xA;    addChild(name, type) {&#xD;&#xA;        var _a;&#xD;&#xA;        let field = createElement(this.settings.childSpecialization, ServicesHelper.formatName(name, (_a = this.settings.childType) !== null &amp;&amp; _a !== void 0 ? _a : &quot;property&quot;), this.command.id);&#xD;&#xA;        const typeReferenceDetails = type == null&#xD;&#xA;            ? null&#xD;&#xA;            : typeof (type) === &quot;string&quot;&#xD;&#xA;                ? { id: type, isNullable: false, isCollection: false }&#xD;&#xA;                : { id: type.typeId, isNullable: type.isNullable, isCollection: type.isCollection };&#xD;&#xA;        if (typeReferenceDetails != null) {&#xD;&#xA;            field.typeReference.setType(typeReferenceDetails.id);&#xD;&#xA;            field.typeReference.setIsCollection(typeReferenceDetails.isCollection);&#xD;&#xA;            field.typeReference.setIsNullable(typeReferenceDetails.isNullable);&#xD;&#xA;        }&#xD;&#xA;        return field;&#xD;&#xA;    }&#xD;&#xA;    addChildrenFrom(elements, options) {&#xD;&#xA;        let order = 0;&#xD;&#xA;        elements.forEach(e =&gt; {&#xD;&#xA;            if (e.mapPath != null) {&#xD;&#xA;                if (this.command.getChildren(this.settings.childSpecialization).some(x =&gt; { var _a, _b; return ((_b = (_a = x.getMapping()) === null || _a === void 0 ? void 0 : _a.getElement()) === null || _b === void 0 ? void 0 : _b.id) == e.id; })) {&#xD;&#xA;                    return;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            else if (this.command.getChildren(this.settings.childSpecialization).some(x =&gt; x.getName().toLowerCase() === e.name.toLowerCase())) {&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            let field = this.addChild(e.name, e.typeId);&#xD;&#xA;            field.typeReference.setIsCollection(e.isCollection);&#xD;&#xA;            field.typeReference.setIsNullable(e.isNullable);&#xD;&#xA;            if (options === null || options === void 0 ? void 0 : options.addToTop) {&#xD;&#xA;                field.setOrder(order++);&#xD;&#xA;            }&#xD;&#xA;            if (this.mappedElement != null &amp;&amp; e.mapPath) {&#xD;&#xA;                field.setMapping(e.mapPath);&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;        return this;&#xD;&#xA;    }&#xD;&#xA;    mapToElement(param1, mappingSettingsId) {&#xD;&#xA;        let elementIds;&#xD;&#xA;        let element;&#xD;&#xA;        if (Array.isArray(param1)) {&#xD;&#xA;            elementIds = param1;&#xD;&#xA;            element = lookup(elementIds[elementIds.length - 1]);&#xD;&#xA;        }&#xD;&#xA;        else {&#xD;&#xA;            elementIds = [param1.id];&#xD;&#xA;            element = param1;&#xD;&#xA;        }&#xD;&#xA;        this.mappedElement = element;&#xD;&#xA;        this.command.setMapping(elementIds, mappingSettingsId);&#xD;&#xA;        return this;&#xD;&#xA;    }&#xD;&#xA;    getElement() {&#xD;&#xA;        return this.command;&#xD;&#xA;    }&#xD;&#xA;    collapse() {&#xD;&#xA;        this.command.collapse();&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;/**&#xD;&#xA; * Workaround for element's from referenced packages not having getParent()&#xD;&#xA; * @param element The element whose parent should be searched for&#xD;&#xA; * @param parentSpecializationType The specialization type of the parent&#xD;&#xA; */&#xD;&#xA;function getParent(element, parentSpecializationType) {&#xD;&#xA;    const elements = lookupTypesOf(parentSpecializationType);&#xD;&#xA;    const parent = elements&#xD;&#xA;        .find(x =&gt; x.getChildren(element.specialization)&#xD;&#xA;        .some(child =&gt; child.id === element.id));&#xD;&#xA;    if (parent == null) {&#xD;&#xA;        throw new Error(&quot;Could not find parent&quot;);&#xD;&#xA;    }&#xD;&#xA;    return parent;&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../common/domainHelper.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../common/servicesHelper.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../common/getParent.ts&quot; /&gt;&#xD;&#xA;/**&#xD;&#xA; * Gets select details of a mapped Command/Query. Intended for centralized logic of working out&#xD;&#xA; * things like keys for both the entity and owning entity if applicable.&#xD;&#xA; *&#xD;&#xA; * If the Command is for entity creation (either due to being mapped to a constructor or being&#xD;&#xA; * prefixed with &quot;Create&quot;), then primary keys for the entity are not populated.&#xD;&#xA; * @param request The Command or Query that has been mapped&#xD;&#xA; */&#xD;&#xA;function getMappedRequestDetails(request) {&#xD;&#xA;    var _a;&#xD;&#xA;    const queryEntityMappingTypeId = &quot;25f25af9-c38b-4053-9474-b0fabe9d7ea7&quot;;&#xD;&#xA;    const createEntityMappingTypeId = &quot;5f172141-fdba-426b-980e-163e782ff53e&quot;;&#xD;&#xA;    // Basic mapping:&#xD;&#xA;    let mappedElement = (_a = request.getMapping()) === null || _a === void 0 ? void 0 : _a.getElement();&#xD;&#xA;    // Advanced mapping:&#xD;&#xA;    if (mappedElement == null) {&#xD;&#xA;        const advancedMappings = request.getAssociations()&#xD;&#xA;            .filter(x =&gt; x.hasMappings(queryEntityMappingTypeId) ||&#xD;&#xA;            x.hasMappings(createEntityMappingTypeId))&#xD;&#xA;            .map(x =&gt; x.getMapping(queryEntityMappingTypeId) ||&#xD;&#xA;            x.getMapping(createEntityMappingTypeId));&#xD;&#xA;        if (advancedMappings.length === 1) {&#xD;&#xA;            mappedElement = advancedMappings[0].getTargetElement();&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    if (mappedElement == null) {&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;    let entity = mappedElement;&#xD;&#xA;    if (entity.specialization !== &quot;Class&quot;) {&#xD;&#xA;        entity = getParent(entity, &quot;Class&quot;);&#xD;&#xA;    }&#xD;&#xA;    const result = {&#xD;&#xA;        entity: entity,&#xD;&#xA;        mappingTargetType: mappedElement.specialization,&#xD;&#xA;        entityKeyFields: [],&#xD;&#xA;        ownerKeyFields: []&#xD;&#xA;    };&#xD;&#xA;    result.owningEntity = DomainHelper.getOwningAggregate(entity);&#xD;&#xA;    // As long as it's not for creation, populate the PKs of the entity:&#xD;&#xA;    if (result.mappingTargetType !== &quot;Class Constructor&quot; &amp;&amp;&#xD;&#xA;        !request.getName().toLowerCase().startsWith(&quot;Create&quot;)) {&#xD;&#xA;        result.entityKeyFields = result.mappingTargetType === &quot;Class&quot;&#xD;&#xA;            ? getKeysForClassMapping(request, entity)&#xD;&#xA;            : getKeysForOperationMapping(request, entity);&#xD;&#xA;    }&#xD;&#xA;    // If the entity is owned, populate its fields:&#xD;&#xA;    if (result.owningEntity != null) {&#xD;&#xA;        result.ownerKeyFields = result.mappingTargetType === &quot;Class&quot;&#xD;&#xA;            ? getKeysForClassMapping(request, entity, result.owningEntity)&#xD;&#xA;            : getKeysForOperationMapping(request, entity, result.owningEntity);&#xD;&#xA;    }&#xD;&#xA;    return result;&#xD;&#xA;    /**&#xD;&#xA;     * Return field details for primary keys. As requests mapped to operations and constructors can&#xD;&#xA;     * never possibly map the attributes, these fields can only ever be matched by name.&#xD;&#xA;     * @param request The CQRS Command or Query entity&#xD;&#xA;     * @param owningEntity The Owning Aggregate Class&#xD;&#xA;     */&#xD;&#xA;    function getKeysForOperationMapping(request, entity, owningEntity) {&#xD;&#xA;        const pks = DomainHelper.getPrimaryKeys(owningEntity !== null &amp;&amp; owningEntity !== void 0 ? owningEntity : entity);&#xD;&#xA;        return pks.map(pk =&gt; {&#xD;&#xA;            let fieldName = toPascalCase(pk.name);&#xD;&#xA;            if (owningEntity != null) {&#xD;&#xA;                fieldName = removePrefix(fieldName, toPascalCase(owningEntity.getName()));&#xD;&#xA;                fieldName = `${owningEntity.getName()}${toCamelCase(fieldName)}`;&#xD;&#xA;            }&#xD;&#xA;            fieldName = ServicesHelper.getFieldFormat(fieldName);&#xD;&#xA;            const existingField = request.getChildren(&quot;DTO-Field&quot;).find(field =&gt; field.getName().toLowerCase() == fieldName.toLowerCase());&#xD;&#xA;            return {&#xD;&#xA;                existingId: existingField === null || existingField === void 0 ? void 0 : existingField.id,&#xD;&#xA;                mappingPath: [],&#xD;&#xA;                name: fieldName,&#xD;&#xA;                typeId: pk.typeId,&#xD;&#xA;                isCollection: pk.isCollection,&#xD;&#xA;                isNullable: pk.isNullable&#xD;&#xA;            };&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;    function getKeysForClassMapping(request, entity, owningEntity) {&#xD;&#xA;        const keys = owningEntity != null&#xD;&#xA;            ? DomainHelper.getForeignKeys(entity, owningEntity)&#xD;&#xA;            : DomainHelper.getPrimaryKeys(entity);&#xD;&#xA;        return keys.map(pk =&gt; {&#xD;&#xA;            const existingField = request.getChildren(&quot;DTO-Field&quot;).find(field =&gt; {&#xD;&#xA;                if (field.getMapping() != null) {&#xD;&#xA;                    return field.getMapping().getPath().some(x =&gt; x.id == pk.id);&#xD;&#xA;                }&#xD;&#xA;                return (pk.name.toLowerCase() === field.getName().toLowerCase());&#xD;&#xA;            });&#xD;&#xA;            return {&#xD;&#xA;                existingId: existingField === null || existingField === void 0 ? void 0 : existingField.id,&#xD;&#xA;                mappingPath: pk.mapPath,&#xD;&#xA;                name: pk.name,&#xD;&#xA;                typeId: pk.typeId,&#xD;&#xA;                isCollection: pk.isCollection,&#xD;&#xA;                isNullable: pk.isNullable&#xD;&#xA;            };&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../../common/getMappedRequestDetails.ts&quot; /&gt;&#xD;&#xA;/**&#xD;&#xA; * Ensures that for the provided contract, it has the provided field creating it if necessary and&#xD;&#xA; * then ensure the field has the correct typeReference details and order.&#xD;&#xA; * The field's element is returned.&#xD;&#xA; */&#xD;&#xA;function ensureHasField(options) {&#xD;&#xA;    const { contract, fieldDetail, mappingSettingsId, order } = options;&#xD;&#xA;    let field = fieldDetail.existingId != null&#xD;&#xA;        ? contract.getChildren(&quot;DTO-Field&quot;).find(x =&gt; x.id === fieldDetail.existingId)&#xD;&#xA;        : createElement(&quot;DTO-Field&quot;, fieldDetail.name, contract.id);&#xD;&#xA;    field.typeReference.setType(fieldDetail.typeId);&#xD;&#xA;    field.typeReference.setIsCollection(fieldDetail.isCollection);&#xD;&#xA;    field.typeReference.setIsNullable(fieldDetail.isNullable);&#xD;&#xA;    if (order != null) {&#xD;&#xA;        field.setOrder(order);&#xD;&#xA;    }&#xD;&#xA;    if (mappingSettingsId != null) {&#xD;&#xA;        field.setMapping(fieldDetail.mappingPath, mappingSettingsId);&#xD;&#xA;    }&#xD;&#xA;    return field;&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;./onMapFunctions.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../../common/domainHelper.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../../common/servicesHelper.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../../common/getMappedRequestDetails.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;ensureHasField.ts&quot; /&gt;&#xD;&#xA;function onMapCommand(element, isForCrudScript, isForCreate = false) {&#xD;&#xA;    var _a, _b, _c;&#xD;&#xA;    const projectMappingSettingId = &quot;942eae46-49f1-450e-9274-a92d40ac35fa&quot;;&#xD;&#xA;    const mapFromDomainMappingSettingId = &quot;1f747d14-681c-4a20-8c68-34223f41b825&quot;;&#xD;&#xA;    // const mapToDomainDataSettingsId = &quot;735c87d0-06fc-4491-8b5f-5adc6f953c54&quot;;&#xD;&#xA;    const mappingDetails = getMappedRequestDetails(element);&#xD;&#xA;    if (mappingDetails == null) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    if (isForCrudScript ||&#xD;&#xA;        mappingDetails.mappingTargetType !== &quot;Class&quot;) {&#xD;&#xA;        let order = 0;&#xD;&#xA;        let keyFields = mappingDetails.ownerKeyFields;&#xD;&#xA;        if (!isForCreate) {&#xD;&#xA;            keyFields = keyFields.concat(mappingDetails.entityKeyFields);&#xD;&#xA;        }&#xD;&#xA;        for (const keyField of keyFields) {&#xD;&#xA;            ensureHasField({&#xD;&#xA;                contract: element,&#xD;&#xA;                fieldDetail: keyField,&#xD;&#xA;                order: order++&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    if (mappingDetails.mappingTargetType === &quot;Operation&quot; &amp;&amp;&#xD;&#xA;        isComplexType((_c = (_b = (_a = element.getMapping()) === null || _a === void 0 ? void 0 : _a.getElement()) === null || _b === void 0 ? void 0 : _b.typeReference) === null || _c === void 0 ? void 0 : _c.getType())) {&#xD;&#xA;        getOrCreateCommandCrudDto(element, element, false, mapFromDomainMappingSettingId);&#xD;&#xA;    }&#xD;&#xA;    const fields = element.getChildren(&quot;DTO-Field&quot;)&#xD;&#xA;        .filter(x =&gt; { var _a, _b; return ((_a = x.typeReference.getType()) === null || _a === void 0 ? void 0 : _a.specialization) != &quot;DTO&quot; &amp;&amp; x.isMapped() &amp;&amp; ((_b = x.getMapping()) === null || _b === void 0 ? void 0 : _b.getElement().specialization.startsWith(&quot;Association&quot;)); });&#xD;&#xA;    fields.forEach(field =&gt; {&#xD;&#xA;        getOrCreateCommandCrudDto(element, field, true, projectMappingSettingId);&#xD;&#xA;    });&#xD;&#xA;    const complexFields = element.getChildren(&quot;DTO-Field&quot;)&#xD;&#xA;        .filter(x =&gt; {&#xD;&#xA;        var _a, _b, _c, _d;&#xD;&#xA;        return ((_a = x.typeReference.getType()) === null || _a === void 0 ? void 0 : _a.specialization) != &quot;DTO&quot; &amp;&amp;&#xD;&#xA;            isComplexType((_d = (_c = (_b = x.getMapping()) === null || _b === void 0 ? void 0 : _b.getElement()) === null || _c === void 0 ? void 0 : _c.typeReference) === null || _d === void 0 ? void 0 : _d.getType());&#xD;&#xA;    });&#xD;&#xA;    complexFields.forEach(cf =&gt; {&#xD;&#xA;        getOrCreateCommandCrudDto(element, cf, false, projectMappingSettingId);&#xD;&#xA;    });&#xD;&#xA;    function isComplexType(element) {&#xD;&#xA;        if (element == null) {&#xD;&#xA;            console.warn(&quot;isComplexType element parameter received null&quot;);&#xD;&#xA;        }&#xD;&#xA;        return (element === null || element === void 0 ? void 0 : element.specialization) === &quot;Data Contract&quot; ||&#xD;&#xA;            (element === null || element === void 0 ? void 0 : element.specialization) === &quot;Value Object&quot;;&#xD;&#xA;    }&#xD;&#xA;    function getOrCreateCommandCrudDto(command, dtoField, autoAddPrimaryKey, mappingTypeSettingId) {&#xD;&#xA;        let mappedElement = dtoField.getMapping().getElement();&#xD;&#xA;        if (mappedElement.typeReference == null)&#xD;&#xA;            throw new Error(&quot;TypeReference is undefined&quot;);&#xD;&#xA;        let originalVerb = (command.getName().split(/(?=[A-Z])/))[0];&#xD;&#xA;        let domainName = mappedElement.typeReference.getType().getName();&#xD;&#xA;        let baseName = command.getMetadata(&quot;baseName&quot;)&#xD;&#xA;            ? `${command.getMetadata(&quot;baseName&quot;)}${domainName}`&#xD;&#xA;            : domainName;&#xD;&#xA;        let dtoName = `${originalVerb}${baseName}`;&#xD;&#xA;        let dto = getOrCreateDto(dtoName, command.getParent());&#xD;&#xA;        dto.setMetadata(&quot;originalVerb&quot;, originalVerb);&#xD;&#xA;        dto.setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;        dto.setMapping(mappedElement.typeReference.getTypeId(), mappingTypeSettingId);&#xD;&#xA;        ensureDtoFields(autoAddPrimaryKey, mappedElement, dto);&#xD;&#xA;        dtoField.typeReference.setType(dto.id);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../_common/onMapCommand.ts&quot; /&gt;&#xD;&#xA;/**&#xD;&#xA; * Used by Intent.Modules\Modules\Intent.Modules.Application.MediatR.CRUD&#xD;&#xA; *&#xD;&#xA; * Source code here:&#xD;&#xA; * https://github.com/IntentArchitect/Intent.Modules/blob/development/DesignerMacros/src/services-cqrs-crud/command-on-map/command-on-map.ts&#xD;&#xA; */&#xD;&#xA;onMapCommand(element, false);&#xD;&#xA;" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
      </childElements>
    </childElement>
  </childElements>
</class>