<#@ template language="C#" inherits="CSharpTemplateBase<object>" #>
<#@ output extension=".cs"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure.Storage.Blobs;
using Microsoft.Extensions.Configuration;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public class <#= ClassName #> : <#= this.GetCloudStorageInterfaceName() #>
    {
    private readonly BlobServiceClient _client;

        public <#= ClassName #>(IConfiguration configuration)
        {
            _client = new BlobServiceClient(configuration.GetValue<string>("AzureBlobStorage"));
        }

        public Task<Stream> DownloadContentAsync(Uri cloudStorageLocation, CancellationToken cancellationToken = default)
        {
            var blobUriBuilder = new BlobUriBuilder(cloudStorageLocation);
            return DownloadContentAsync(blobUriBuilder.BlobContainerName, blobUriBuilder.BlobName, cancellationToken);
        }
        
        public async Task<Stream> DownloadContentAsync(string containerName, string blobName, CancellationToken cancellationToken = default)
        {
            var containerClient = _client.GetBlobContainerClient(containerName);
            var blobClient = containerClient.GetBlobClient(blobName);
            var result = await blobClient.DownloadAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
            return result.Value.Content;
        }

        public Task UploadContent(Uri cloudStorageLocation, Stream streamToUpload, bool overwrite = true, CancellationToken cancellationToken = default)
        {
            var blobUriBuilder = new BlobUriBuilder(cloudStorageLocation);
            return UploadContent(blobUriBuilder.BlobContainerName, blobUriBuilder.BlobName, streamToUpload, overwrite, cancellationToken);
        }

        public async Task UploadContent(string containerName, string blobName, Stream streamToUpload, bool overwrite = true, CancellationToken cancellationToken = default)
        {
            var containerClient = _client.GetBlobContainerClient(containerName);
            var blobClient = containerClient.GetBlobClient(blobName);
            await blobClient.UploadAsync(streamToUpload, overwrite, cancellationToken).ConfigureAwait(false);
        }
    }
}