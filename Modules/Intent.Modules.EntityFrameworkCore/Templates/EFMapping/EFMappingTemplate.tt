<#@ template  debug="true" inherits="CSharpTemplateBase<ClassModel>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="Intent.Modelers.Domain.Api" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Modules.Common"#>
<#@ import namespace="Intent.Metadata.RDBMS.Api"#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public class <#= ClassName #> : IEntityTypeConfiguration<<#= EntityStateName #>>
    {
        public void Configure(EntityTypeBuilder<<#= EntityStateName #>> builder)
        {
<#
if (Model.ParentClass == null && Model.HasTable())
{
#>
            builder.ToTable("<#= Model.GetTable()?.Name() ?? Model.Name #>", "<#= Model.GetTable()?.Schema() ?? "dbo" #>");
<#
}

var explicitPrimaryKeys = Model.Attributes.Where(x => x.HasPrimaryKey()).ToList();
var addedImplicitKey = false;
if (Model.ParentClass == null && !explicitPrimaryKeys.Any())
{
    addedImplicitKey = true;
#>
            builder.HasKey(x => x.Id);
            builder.Property(x => x.Id).UsePropertyAccessMode(PropertyAccessMode.Property);
<#
}
else
{
#>
            builder.HasKey(x => <#= (explicitPrimaryKeys.Count() == 1 ? "x." + explicitPrimaryKeys.Single().Name.ToPascalCase() : string.Format("new {{ {0} }}", string.Join(", ", explicitPrimaryKeys.Select(x => "x." + x.Name)))) #>);
<#
}

if (Model.ParentClass != null) {
#>
            builder.HasBaseType<<#= Model.ParentClass.Name #>>();
<#
}

foreach (var attribute in Model.Attributes)
{
    if (attribute.Name.ToLower() == "id" && addedImplicitKey)
    {
        throw new Exception(string.Format("Surrogate Key is implicit for class {0}. Either remove the 'id' attribute, or disable the 'Implicit Surrogate Key' option for this template", Model.Name));
    }
#>
            builder.Property(x => x.<#= attribute.Name.ToPascalCase()#>)
<#
    if (!attribute.Type.IsNullable)
    {#>
                .IsRequired()<#
    }

    if (attribute.GetPrimaryKey()?.Identity() == true){#>
                .UseSqlServerIdentityColumn()
<#
    }

    if (attribute.GetDefaultConstraint()?.Value() != null)
    {#>
                .HasDefaultValueSql("<#= attribute.GetDefaultConstraint().Value() #>")
<#
    }

    if (attribute.Type.Element.Name == "string" )
    {
        var maxLength = attribute.GetTextConstraints()?.MaxLength();
        if (maxLength.HasValue)
        {
#>
                .HasMaxLength(<#= maxLength.Value#>)
<#
        }
    }

    var decimalPrecision = attribute.GetDecimalConstraints().Precision();
    var decimalScale = attribute.GetDecimalConstraints().Scale();
    if (decimalPrecision.HasValue && decimalScale.HasValue)
    {
#>
                .HasColumnType("decimal(<#= decimalPrecision#>, <#= decimalScale #>)")
<#
    }

    if (HasTypeOverride(attribute))
    {
#>
                .HasColumnType("<#= GetTypeOverride(attribute) #>")
<#
    }

    if (attribute.HasStereotype(Stereotypes.EntityFrameworkCore.ConcurrencyToken.Name))
    {
#>
                .IsConcurrencyToken()
<#
    }

    if (attribute.HasStereotype(Stereotypes.EntityFrameworkCore.RowVersion.Name))
    {
#>
                .IsRowVersion()
<#
    }
#>
                ;

<#
}

var indexes = Model.Attributes
    .Where(x => x.HasIndex())
    .GroupBy(x => x.GetIndex().UniqueKey() ?? "IX_" + Model.Name + "_" + x.Name);
foreach(var index in indexes)
{
#>
            builder.HasIndex(x => <#= index.Count() == 1 ? "x." + index.Single().Name.ToPascalCase() : string.Format("new {{ {0} }}", string.Join(", ", index.OrderBy(x => x.GetStereotypeProperty<int>("Index", "Order", 0)).Select(x => "x." + x.Name))) #>)
                .HasName("<#= index.Key #>")
                .IsUnique(<#= index.First().GetIndex().IsUnique().ToString().ToLower() ?? "false" #>)
                ;
<#
}

foreach (var associationEnd in Model.AssociatedClasses)
{

    if (!associationEnd.Equals(associationEnd.Association.TargetEnd))
    {
        continue;
    }

    switch (associationEnd.Relationship())
    {
        case RelationshipType.OneToOne:
#>
            builder.HasOne(x => x.<#=associationEnd.Name().ToPascalCase()#>)
                .WithOne(<#= associationEnd.OtherEnd().IsNavigable ? "x => x." + associationEnd.OtherEnd().Name().ToPascalCase() : "" #>)
<#
            if (!associationEnd.OtherEnd().IsNullable)
            {
#>
                .HasForeignKey<<#= Model.Name #>>(x => x.Id)
                .IsRequired()
                .OnDelete(DeleteBehavior.Cascade)
<#
            }
            else
            {
#>
                .HasForeignKey<<#= Model.Name #>>(<#= GetForeignKeyLambda(associationEnd.OtherEnd()) #>)
                .OnDelete(DeleteBehavior.Restrict)
<#
            }
#>
                ;

<#
            break;
        case RelationshipType.OneToMany:
#>
            builder.HasOne(x => x.<#=associationEnd.Name().ToPascalCase()#>)
                .WithMany(<#= associationEnd.OtherEnd().IsNavigable ? "x => x." + associationEnd.OtherEnd().Name().ToPascalCase() : "" #>)
<#
            if (UseForeignKeys)
            {
#>
                .HasForeignKey(<#= GetForeignKeyLambda(associationEnd.OtherEnd()) #>)
<#
            }
            else
            {
#>
                .HasForeignKey("<#= associationEnd.Name().ToPascalCase()#>Id"))
<#
            }
#>
                .OnDelete(DeleteBehavior.Restrict)
                ;

<#
            break;
        case RelationshipType.ManyToOne:
#>
            builder.HasMany(x => x.<#= associationEnd.Name().ToPascalCase()#>)
                .WithOne(x => x.<#= associationEnd.OtherEnd().Name().ToPascalCase() #>)
<#
            if (UseForeignKeys)
            {
#>
                .HasForeignKey(<#= GetForeignKeyLambda(associationEnd) #>)
<#
            }
            else
            {
#>
                .Map(m => m.MapKey("<#= associationEnd.OtherEnd().Name().ToPascalCase()#>Id"))
<#
            }

            if (!associationEnd.OtherEnd().IsNullable)
            {
#>
                .IsRequired()
                .OnDelete(DeleteBehavior.Cascade)
<#
            }
#>
                ;

<#          break;
        case RelationshipType.ManyToMany:
            IssueManyToManyWarning(associationEnd);
#>
            builder.Ignore(x => x.<#= associationEnd.Name().ToPascalCase()#>)
                ;

<#
            break;
    }
}
#>
        }
    }
}