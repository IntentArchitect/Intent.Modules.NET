<?xml version="1.0" encoding="utf-8"?>
<settings version="3.1.1">
  <id>564b5228-003c-4eb3-b7ad-8f6111b93f95</id>
  <name>CRUD Enhancements</name>
  <designerReferences />
  <packageSettings />
  <packageExtensions>
    <packageExtension type="Services Package" typeId="df45eaf6-9202-4c25-8dd5-677e9ba1e906">
      <requiredPackages />
      <creationOptions />
      <scriptOptions>
        <option>
          <text>Create CRUD Operations</text>
          <shortcut>ctrl + shift + u</shortcut>
          <icon type="FontAwesome" source="code" />
          <script>// Generalized script which can be used for both Azure Functions and the general HTTP services

// To test in designers by using the "Execute Dialogue", uncomment and set applicable fields:
const debug = {
    // targetElementId: null,
    // targetPackageId: "74333502-aeda-4945-aa8b-14832cb550c0",
    // targetClassName: null
};

if (debug?.targetElementId != null) {
    element = lookup(elementId);
}
else if (debug?.targetPackageId != null) {
    element = {
        id: debug.targetPackageId
    };
}

/**
 * Use this to help debug by show objects
 */
async function dump(object) {
    await dialogService.info(JSON.stringify(object, null, "  "));
}

function getSurrogateKeyType() {
    let keyType = application.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")?.getField("Key Type")?.value ?? "int";
    if (keyType == "guid")
        return "6b649125-18ea-48fd-a6ba-0bfff0d8f488"; // guid id
    if (keyType == "int")
        return "fb0a362d-e9e2-40de-b6ff-5ce8167cbe74"; // int id
    if (keyType == "long")
        return "33013006-E404-48C2-AC46-24EF5A5774FD"; // long id
    return "6b649125-18ea-48fd-a6ba-0bfff0d8f488"; // guid id
}

async function setStereotype(operation, verb, route) {
    // Dynamically work out stereotype name to configure based on auto applied stereotype
    let stereotype = operation.getStereotype("Http Settings");
    if (stereotype != null) {
        if (verb) stereotype.getProperty("Verb").setValue(verb);
        if (route) stereotype.getProperty("Route").setValue(route);
        return;
    }

    stereotype = operation.getStereotype("Azure Function");
    if (stereotype != null) {
        stereotype.getProperty("Type").setValue("Http Trigger");
        if (verb) stereotype.getProperty("Method").setValue(verb);
        if (route) stereotype.getProperty("Route").setValue(route);
        return;
    }
    
    await dialogService.error("Could not determine Stereotype to update, please contact Intent Architect Support.");
}

function getServiceName(entity) {
    return `${pluralize(toPascalCase(entity.getName()))}Service`;
}

function getServiceNameForRoute(entity) {
    return entity.getName().toLowerCase();
}

let options = lookupTypesOf("Class");
if (options.length == 0) {
    await dialogService.info("No Domain types could be found. Please ensure that you have a reference to the Domain package.");
    return;
}

let classId = debug?.targetClassName != null
    ? options.find(x =&gt; x.getName() === debug.targetClassName)?.id
    : await dialogService.lookupFromOptions(options);

let entity = lookup(classId);
if (entity == null) {
    await dialogService.error(`Could not find an Entity with id '${classId}'. The name of your service must correlate to an Entity in the domain.`);
    return;
}

const entityName = entity.name;
// Auto detect if we're running in the context of a service or package
const service = element.specialization === "Service"
    ? element
    : createElement("Service", getServiceName(entity), element.id);

// SET UP FOLDER:
var existing = service.getParent().getChildren("Folder").find(x =&gt; x.name == pluralize(entityName));
var folder = existing || createElement("Folder", pluralize(entityName), service.getParent().id);

// CREATE DTO:
let createDTO = createElement("DTO", `${entityName}CreateDTO`, folder.id);
for (let attribute of entity.getChildren("Attribute").filter(x =&gt; !x.hasStereotype("Primary Key"))) {
    let field = createElement("DTO-Field", attribute.name, createDTO.id);
    field.typeReference.setType(attribute.typeReference.typeId);
    field.typeReference.setIsNullable(attribute.typeReference.isNullable);
    field.typeReference.setIsCollection(attribute.typeReference.isCollection);
}

// CREATE OPERATION:
let createOperation = createElement("Operation", "Create", service.id);
let createOperationParam = createElement("Parameter", "dto", createOperation.id);
createOperationParam.typeReference.setType(createDTO.id);
await setStereotype(createOperation, "POST", getServiceNameForRoute(entity));
createOperation.collapse();

// FIND-BY-ID
let findByIdOperation = createElement("Operation", "FindById", service.id);
let dto = createElement("DTO", `${entityName}DTO`, folder.id);
dto.setMapping(entity.id);
findByIdOperation.typeReference.setType(dto.id);
if (entity.getChildren("Attribute").every(x =&gt; !x.hasStereotype("Primary Key"))) {
    let idField = createElement("DTO-Field", "Id", dto.id);
    idField.typeReference.setType(getSurrogateKeyType())

    let idParam = createElement("Parameter", "id", findByIdOperation.id);
    idParam.typeReference.setType(getSurrogateKeyType());
} else {
    for (let attribute of entity.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"))) {
        let field = createElement("DTO-Field", attribute.getName(), dto.id);
        field.typeReference.setType(attribute.typeReference.typeId)
        field.setMapping(attribute.id);

        let param = createElement("Parameter", toCamelCase(field.getName()), findByIdOperation.id);
        param.typeReference.setType(attribute.typeReference.typeId);
    }
}

for (let attribute of entity.getChildren("Attribute").filter(x =&gt; !x.hasStereotype("Primary Key"))) {
    let field = createElement("DTO-Field", attribute.getName(), dto.id);
    field.typeReference.setType(attribute.typeReference.typeId);
    field.typeReference.setIsNullable(attribute.typeReference.isNullable);
    field.typeReference.setIsCollection(attribute.typeReference.isCollection);
    field.setMapping(attribute.id);
}
await setStereotype(findByIdOperation, "GET", `${getServiceNameForRoute(entity)}/{id}`);
findByIdOperation.collapse();

// FIND-ALL:
let findByAllOperation = createElement("Operation", "FindAll", service.id);
findByAllOperation.typeReference.setType(dto.id);
findByAllOperation.typeReference.setIsCollection(true);
await setStereotype(findByAllOperation, "GET", getServiceNameForRoute(entity));
findByAllOperation.collapse();

// UPDATE OPERATION AND DTO:
let updateOperation = createElement("Operation", "Update", service.id);
await setStereotype(updateOperation, "PUT", `${getServiceNameForRoute(entity)}/{id}`);

let updateDTO = createElement("DTO", `${entityName}UpdateDTO`, folder.id);

if (entity.getChildren("Attribute").every(x =&gt; !x.hasStereotype("Primary Key"))) {
    // let idField = createElement("DTO-Field", "Id", updateDTO.id);
    // idField.typeReference.setType(getSurrogateKeyType())

    let idParam = createElement("Parameter", "id", updateOperation.id);
    idParam.typeReference.setType(getSurrogateKeyType());
} else {
    for (let attribute of entity.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"))) {
        let field = createElement("DTO-Field", attribute.getName(), updateDTO.id);
        field.typeReference.setType(attribute.typeReference.typeId)

        let param = createElement("Parameter", toCamelCase(field.getName()), updateOperation.id);
        param.typeReference.setType(field.typeReference.typeId);
    }
}

let updateOperationDtoParam = createElement("Parameter", "dto", updateOperation.id);
updateOperationDtoParam.typeReference.setType(updateDTO.id);

for (let attribute of entity.getChildren("Attribute").filter(x =&gt; !x.hasStereotype("Primary Key"))) {
    let field = createElement("DTO-Field", attribute.getName(), updateDTO.id);
    field.typeReference.setType(attribute.typeReference.typeId);
    field.typeReference.setIsNullable(attribute.typeReference.isNullable);
    field.typeReference.setIsCollection(attribute.typeReference.isCollection);
}

updateOperation.collapse();

// DELETE:
let deleteOperation = createElement("Operation", "Delete", service.id);
if (entity.getChildren("Attribute").every(x =&gt; !x.hasStereotype("Primary Key"))) {
    let idParam = createElement("Parameter", "id", deleteOperation.id);
    idParam.typeReference.setType(getSurrogateKeyType());
} else {
    for (let attribute of entity.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"))) {
        let param = createElement("Parameter", toCamelCase(attribute.getName()), deleteOperation.id);
        param.typeReference.setType(attribute.typeReference.typeId);
    }
}
await setStereotype(deleteOperation, "DELETE", `${getServiceNameForRoute(entity)}/{id}`);
deleteOperation.collapse();
</script>
        </option>
      </scriptOptions>
      <typeOrder />
    </packageExtension>
  </packageExtensions>
  <elementSettings />
  <elementExtensions>
    <elementExtension type="Service" typeId="b16578a5-27b1-4047-a8df-f0b783d706bd">
      <creationOptions />
      <scriptOptions>
        <option>
          <text>Create CRUD Operations</text>
          <shortcut>ctrl + shift + u</shortcut>
          <icon type="FontAwesome" source="code" />
          <script>// Generalized script which can be used for both Azure Functions and the general HTTP services

// To test in designers by using the "Execute Dialogue", uncomment and set applicable fields:
const debug = {
    // targetElementId: null,
    // targetPackageId: "74333502-aeda-4945-aa8b-14832cb550c0",
    // targetClassName: null
};

if (debug?.targetElementId != null) {
    element = lookup(elementId);
}
else if (debug?.targetPackageId != null) {
    element = {
        id: debug.targetPackageId
    };
}

/**
 * Use this to help debug by show objects
 */
async function dump(object) {
    await dialogService.info(JSON.stringify(object, null, "  "));
}

function getSurrogateKeyType() {
    let keyType = application.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")?.getField("Key Type")?.value ?? "int";
    if (keyType == "guid")
        return "6b649125-18ea-48fd-a6ba-0bfff0d8f488"; // guid id
    if (keyType == "int")
        return "fb0a362d-e9e2-40de-b6ff-5ce8167cbe74"; // int id
    if (keyType == "long")
        return "33013006-E404-48C2-AC46-24EF5A5774FD"; // long id
    return "6b649125-18ea-48fd-a6ba-0bfff0d8f488"; // guid id
}

async function setStereotype(operation, verb, route) {
    // Dynamically work out stereotype name to configure based on auto applied stereotype
    let stereotype = operation.getStereotype("Http Settings");
    if (stereotype != null) {
        if (verb) stereotype.getProperty("Verb").setValue(verb);
        if (route) stereotype.getProperty("Route").setValue(route);
        return;
    }

    stereotype = operation.getStereotype("Azure Function");
    if (stereotype != null) {
        stereotype.getProperty("Type").setValue("Http Trigger");
        if (verb) stereotype.getProperty("Method").setValue(verb);
        if (route) stereotype.getProperty("Route").setValue(route);
        return;
    }
    
    await dialogService.error("Could not determine Stereotype to update, please contact Intent Architect Support.");
}

function getServiceName(entity) {
    return `${pluralize(toPascalCase(entity.getName()))}Service`;
}

function getServiceNameForRoute(entity) {
    return entity.getName().toLowerCase();
}

let options = lookupTypesOf("Class");
if (options.length == 0) {
    await dialogService.info("No Domain types could be found. Please ensure that you have a reference to the Domain package.");
    return;
}

let classId = debug?.targetClassName != null
    ? options.find(x =&gt; x.getName() === debug.targetClassName)?.id
    : await dialogService.lookupFromOptions(options);

let entity = lookup(classId);
if (entity == null) {
    await dialogService.error(`Could not find an Entity with id '${classId}'. The name of your service must correlate to an Entity in the domain.`);
    return;
}

const entityName = entity.name;
// Auto detect if we're running in the context of a service or package
const service = element.specialization === "Service"
    ? element
    : createElement("Service", getServiceName(entity), element.id);

// SET UP FOLDER:
var existing = service.getParent().getChildren("Folder").find(x =&gt; x.name == pluralize(entityName));
var folder = existing || createElement("Folder", pluralize(entityName), service.getParent().id);

// CREATE DTO:
let createDTO = createElement("DTO", `${entityName}CreateDTO`, folder.id);
for (let attribute of entity.getChildren("Attribute").filter(x =&gt; !x.hasStereotype("Primary Key"))) {
    let field = createElement("DTO-Field", attribute.name, createDTO.id);
    field.typeReference.setType(attribute.typeReference.typeId);
    field.typeReference.setIsNullable(attribute.typeReference.isNullable);
    field.typeReference.setIsCollection(attribute.typeReference.isCollection);
}

// CREATE OPERATION:
let createOperation = createElement("Operation", "Create", service.id);
let createOperationParam = createElement("Parameter", "dto", createOperation.id);
createOperationParam.typeReference.setType(createDTO.id);
await setStereotype(createOperation, "POST", getServiceNameForRoute(entity));
createOperation.collapse();

// FIND-BY-ID
let findByIdOperation = createElement("Operation", "FindById", service.id);
let dto = createElement("DTO", `${entityName}DTO`, folder.id);
dto.setMapping(entity.id);
findByIdOperation.typeReference.setType(dto.id);
if (entity.getChildren("Attribute").every(x =&gt; !x.hasStereotype("Primary Key"))) {
    let idField = createElement("DTO-Field", "Id", dto.id);
    idField.typeReference.setType(getSurrogateKeyType())

    let idParam = createElement("Parameter", "id", findByIdOperation.id);
    idParam.typeReference.setType(getSurrogateKeyType());
} else {
    for (let attribute of entity.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"))) {
        let field = createElement("DTO-Field", attribute.getName(), dto.id);
        field.typeReference.setType(attribute.typeReference.typeId)
        field.setMapping(attribute.id);

        let param = createElement("Parameter", toCamelCase(field.getName()), findByIdOperation.id);
        param.typeReference.setType(attribute.typeReference.typeId);
    }
}

for (let attribute of entity.getChildren("Attribute").filter(x =&gt; !x.hasStereotype("Primary Key"))) {
    let field = createElement("DTO-Field", attribute.getName(), dto.id);
    field.typeReference.setType(attribute.typeReference.typeId);
    field.typeReference.setIsNullable(attribute.typeReference.isNullable);
    field.typeReference.setIsCollection(attribute.typeReference.isCollection);
    field.setMapping(attribute.id);
}
await setStereotype(findByIdOperation, "GET", `${getServiceNameForRoute(entity)}/{id}`);
findByIdOperation.collapse();

// FIND-ALL:
let findByAllOperation = createElement("Operation", "FindAll", service.id);
findByAllOperation.typeReference.setType(dto.id);
findByAllOperation.typeReference.setIsCollection(true);
await setStereotype(findByAllOperation, "GET", getServiceNameForRoute(entity));
findByAllOperation.collapse();

// UPDATE OPERATION AND DTO:
let updateOperation = createElement("Operation", "Update", service.id);
await setStereotype(updateOperation, "PUT", `${getServiceNameForRoute(entity)}/{id}`);

let updateDTO = createElement("DTO", `${entityName}UpdateDTO`, folder.id);

if (entity.getChildren("Attribute").every(x =&gt; !x.hasStereotype("Primary Key"))) {
    // let idField = createElement("DTO-Field", "Id", updateDTO.id);
    // idField.typeReference.setType(getSurrogateKeyType())

    let idParam = createElement("Parameter", "id", updateOperation.id);
    idParam.typeReference.setType(getSurrogateKeyType());
} else {
    for (let attribute of entity.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"))) {
        let field = createElement("DTO-Field", attribute.getName(), updateDTO.id);
        field.typeReference.setType(attribute.typeReference.typeId)

        let param = createElement("Parameter", toCamelCase(field.getName()), updateOperation.id);
        param.typeReference.setType(field.typeReference.typeId);
    }
}

let updateOperationDtoParam = createElement("Parameter", "dto", updateOperation.id);
updateOperationDtoParam.typeReference.setType(updateDTO.id);

for (let attribute of entity.getChildren("Attribute").filter(x =&gt; !x.hasStereotype("Primary Key"))) {
    let field = createElement("DTO-Field", attribute.getName(), updateDTO.id);
    field.typeReference.setType(attribute.typeReference.typeId);
    field.typeReference.setIsNullable(attribute.typeReference.isNullable);
    field.typeReference.setIsCollection(attribute.typeReference.isCollection);
}

updateOperation.collapse();

// DELETE:
let deleteOperation = createElement("Operation", "Delete", service.id);
if (entity.getChildren("Attribute").every(x =&gt; !x.hasStereotype("Primary Key"))) {
    let idParam = createElement("Parameter", "id", deleteOperation.id);
    idParam.typeReference.setType(getSurrogateKeyType());
} else {
    for (let attribute of entity.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"))) {
        let param = createElement("Parameter", toCamelCase(attribute.getName()), deleteOperation.id);
        param.typeReference.setType(attribute.typeReference.typeId);
    }
}
await setStereotype(deleteOperation, "DELETE", `${getServiceNameForRoute(entity)}/{id}`);
deleteOperation.collapse();
</script>
        </option>
      </scriptOptions>
      <typeOrder />
      <mappingSettings />
    </elementExtension>
  </elementExtensions>
  <associationSettings />
  <associationExtensions />
</settings>