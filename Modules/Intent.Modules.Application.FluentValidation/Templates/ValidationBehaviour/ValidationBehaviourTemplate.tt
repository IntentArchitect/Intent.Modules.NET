<#@ template language="C#" inherits="CSharpTemplateBase<object, Intent.Modules.Application.FluentValidation.Templates.ValidationBehaviour.ValidationBehaviourContract>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using FluentValidation;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public class <#= ClassName #><#= GetGenericTypeParameters() #><#= GetInheritanceDeclarations() #><#= GetGenericTypeConstraints() #>
    {
        private readonly IEnumerable<IValidator<TRequest>> _validators;

        public <#= ClassName #>(IEnumerable<IValidator<TRequest>> validators)
        {
            _validators = validators;
        }

        public async <#= GetHandleReturnType() #> Handle(<#= GetHandleParameterList() #>)
        {
            if (_validators.Any())
            {
                var context = new ValidationContext<TRequest>(request);

                var validationResults = await Task.WhenAll(_validators.Select(v => v.ValidateAsync(context, cancellationToken)));
                var failures = validationResults.SelectMany(r => r.Errors).Where(f => f != null).ToList();

                if (failures.Count != 0)
                    throw new <#= GetValidationException() #>(failures);
            }
            <#= GetHandleExitStatementList() #>
        }
    }
}