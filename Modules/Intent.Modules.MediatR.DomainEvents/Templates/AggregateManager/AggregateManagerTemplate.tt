<#@ template language="C#" inherits="CSharpTemplateBase<Intent.Modelers.Domain.Api.ClassModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.DomainEvents.Templates" #>
using MediatR;
using System;
using System.Threading;
using System.Threading.Tasks;

[assembly: DefaultIntentManaged(Mode.Merge)]

namespace <#= Namespace #>
{
    [IntentManaged(Mode.Merge, Signature = Mode.Fully)]
    public class <#= ClassName #> : <#= GetInterfaces() #>
    {
        [IntentInitialGen]
        public <#= ClassName #>()
        {
        }
<#  foreach(var domainEvent in GetDomainEventModels()) {#>

        [IntentManaged(Mode.Fully, Body = Mode.Ignore)]
        public async Task Handle(<#= this.GetDomainEventNotificationName() #><<#= this.GetDomainEventName(domainEvent) #>> notification, CancellationToken cancellationToken)
        {
            // TODO: Implement Handle (<#= ClassName #>) functionality
            throw new NotImplementedException("Implement your handler logic here...");
        }
<#  }#>
    }
}