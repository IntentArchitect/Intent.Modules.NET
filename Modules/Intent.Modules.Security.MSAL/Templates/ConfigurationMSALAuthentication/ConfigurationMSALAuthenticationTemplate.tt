<#@ template language="C#" inherits="CSharpTemplateBase<object, Intent.Modules.Security.MSAL.Templates.ConfigurationMSALAuthentication.MSALAuthenticationDecorator>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.Application.Identity.Templates" #>
using System;
using System.Collections.Generic;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Authorization;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public static class <#= ClassName #>
    {
        // Use '[IntentManaged(Mode.Ignore)]' on this method should you want to deviate from the standard MSAL token approach
        public static IServiceCollection ConfigureMSALSecurity(this IServiceCollection services, IConfiguration configuration)
        {
            services.AddScoped<<#= this.GetCurrentUserServiceInterfaceName() #>, <#= this.GetCurrentUserServiceName() #>>();
            services.AddHttpContextAccessor();
            <#= base.GetDecoratorsOutput(p => p.GetConfigurationCode()) #>
            services.AddAuthorization(ConfigureAuthorization);

            return services;
        }

        [IntentManaged(Mode.Ignore)]
        private static void ConfigureAuthorization(AuthorizationOptions options)
        {
            //Configure policies and other authorization options here. For example:
            //options.AddPolicy("EmployeeOnly", policy => policy.RequireClaim("roles", "employee"));
            //options.AddPolicy("AdminOnly", policy => policy.RequireClaim("roles", "admin"));
            //options.AddPolicy("DefaultPolicy", policy => policy.Requirements.Add(new ClaimsScopeOrRoleRequirement()));
        }
    }
}