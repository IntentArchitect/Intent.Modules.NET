@page "/Account/ResetPassword"
@using System.ComponentModel.DataAnnotations
@using System.Text
@using Blazor.InteractiveWebAssembly.AspNetCoreIdentity.Common
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService AuthService
@inject IdentityRedirectManager RedirectManager

<PageTitle>Reset password</PageTitle>
<h1>Reset password</h1>
<h2>Reset your password</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input"
                  FormName="resend-email-confirmation"
                  OnValidSubmit="OnValidSubmitAsync"
                  method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger"
                               role="alert" />
            <div class="form-floating mb-3">
                <InputText class="form-control"
                           @bind-Value="Input.Email"
                           autocomplete="username"
                           aria-required="true"
                           placeholder="name@example.com" />
                <label class="form-label"
                       for="email">
                    Email
                </label>
                <ValidationMessage class="text-danger"
                                   For="() => Input.Email" />
                <div class="form-floating mb-3">
                    <InputText class="form-control"
                               type="password"
                               @bind-Value="Input.Password"
                               autocomplete="new-password"
                               aria-required="true"
                               placeholder="Please enter your password." />
                    <label class="form-label"
                           for="password">
                        Password
                    </label>
                    <ValidationMessage class="text-danger"
                                       For="() => Input.Password" />
                    <div class="form-floating mb-3">
                        <InputText class="form-control"
                                   type="password"
                                   @bind-Value="Input.ConfirmPassword"
                                   autocomplete="new-password"
                                   aria-required="true"
                                   placeholder="Please confirm your password." />
                        <label class="form-label"
                               for="confirm-password">
                            Confirm password
                        </label>
                        <ValidationMessage class="text-danger"
                                           For="() => Input.ConfirmPassword" />
                        <button class="w-100 btn btn-lg btn-primary"
                                type="submit">
                            Resend
                        </button>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>
@code {

    private IEnumerable<IdentityError>? identityErrors;
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    [SupplyParameterFromQuery]
    private string? Code { get; set; }
    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }
        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        await AuthService.ResetPassword(Input.Email, Input.Code, Input.Password);
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
        [Required]
        public string Code { get; set; } = "";
    }
}
