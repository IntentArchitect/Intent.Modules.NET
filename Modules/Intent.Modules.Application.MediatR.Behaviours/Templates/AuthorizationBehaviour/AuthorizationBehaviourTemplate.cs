// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.Application.MediatR.Behaviours.Templates.AuthorizationBehaviour
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Application.MediatR.Behaviours\Templates\AuthorizationBehaviour\AuthorizationBehaviourTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class AuthorizationBehaviourTemplate : CSharpTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using MediatR;\r\nusing System;\r\nusing System.Linq;\r\nusing System.Reflection;\r\nusin" +
                    "g System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\n[assembly: DefaultIntentMa" +
                    "naged(Mode.Fully)]\r\n\r\nnamespace ");
            
            #line 19 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Application.MediatR.Behaviours\Templates\AuthorizationBehaviour\AuthorizationBehaviourTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public class ");
            
            #line 21 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Application.MediatR.Behaviours\Templates\AuthorizationBehaviour\AuthorizationBehaviourTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse>\r\n        where TRe" +
                    "quest : IRequest<TResponse>\r\n    {\r\n        private readonly ");
            
            #line 24 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Application.MediatR.Behaviours\Templates\AuthorizationBehaviour\AuthorizationBehaviourTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetCurrentUserServiceInterface()));
            
            #line default
            #line hidden
            this.Write(" _currentUserService;\r\n\r\n        public ");
            
            #line 26 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Application.MediatR.Behaviours\Templates\AuthorizationBehaviour\AuthorizationBehaviourTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("(\r\n            ");
            
            #line 27 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Application.MediatR.Behaviours\Templates\AuthorizationBehaviour\AuthorizationBehaviourTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetCurrentUserServiceInterface()));
            
            #line default
            #line hidden
            this.Write(@" currentUserService)
        {
            _currentUserService = currentUserService;
        }

        public async Task<TResponse> Handle(TRequest request, RequestHandlerDelegate<TResponse> next, CancellationToken cancellationToken)
        {
            var authorizeAttributes = request.GetType().GetCustomAttributes<");
            
            #line 34 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Application.MediatR.Behaviours\Templates\AuthorizationBehaviour\AuthorizationBehaviourTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetAuthorizationAttribute()));
            
            #line default
            #line hidden
            this.Write(@">();

            if (authorizeAttributes.Any())
            {
                // Must be authenticated user
                if (_currentUserService.UserId == null)
                {
                    throw new UnauthorizedAccessException();
                }

                // Role-based authorization
                var authorizeAttributesWithRoles = authorizeAttributes.Where(a => !string.IsNullOrWhiteSpace(a.Roles));

                if (authorizeAttributesWithRoles.Any())
                {
                    foreach (var roles in authorizeAttributesWithRoles.Select(a => a.Roles.Split(',')))
                    {
                        var authorized = false;
                        foreach (var role in roles)
                        {
                            var isInRole = await _currentUserService.IsInRoleAsync(role.Trim());
                            if (isInRole)
                            {
                                authorized = true;
                                break;
                            }
                        }

                        // Must be a member of at least one role in roles
                        if (!authorized)
                        {
                            throw new ");
            
            #line 65 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Application.MediatR.Behaviours\Templates\AuthorizationBehaviour\AuthorizationBehaviourTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetForbiddenAccessException()));
            
            #line default
            #line hidden
            this.Write(@"();
                        }
                    }
                }

                // Policy-based authorization
                var authorizeAttributesWithPolicies = authorizeAttributes.Where(a => !string.IsNullOrWhiteSpace(a.Policy));
                if (authorizeAttributesWithPolicies.Any())
                {
                    foreach(var policy in authorizeAttributesWithPolicies.Select(a => a.Policy))
                    {
                        var authorized = await _currentUserService.AuthorizeAsync(policy);

                        if (!authorized)
                        {
                            throw new ");
            
            #line 80 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Application.MediatR.Behaviours\Templates\AuthorizationBehaviour\AuthorizationBehaviourTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetForbiddenAccessException()));
            
            #line default
            #line hidden
            this.Write("();\r\n                        }\r\n                    }\r\n                }\r\n       " +
                    "     }\r\n\r\n            // User is authorized / authorization not required\r\n      " +
                    "      return await next();\r\n        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
