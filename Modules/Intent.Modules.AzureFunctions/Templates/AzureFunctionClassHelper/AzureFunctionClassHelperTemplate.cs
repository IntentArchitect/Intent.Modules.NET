// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.AzureFunctions.Templates.AzureFunctionClassHelper
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\Intent.Modules.NET\Modules\Intent.Modules.AzureFunctions\Templates\AzureFunctionClassHelper\AzureFunctionClassHelperTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class AzureFunctionClassHelperTemplate : CSharpTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics.CodeAnalysis;\r\nusing Intent.RoslynWeaver.Attributes;\r\nusing Microsoft.AspNetCore.Http;\r\n\r\n[assembly: DefaultIntentManaged(Mode.Fully)]\r\n\r\nnamespace ");
            
            #line 18 "E:\Intent.Modules.NET\Modules\Intent.Modules.AzureFunctions\Templates\AzureFunctionClassHelper\AzureFunctionClassHelperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    static class ");
            
            #line 20 "E:\Intent.Modules.NET\Modules\Intent.Modules.AzureFunctions\Templates\AzureFunctionClassHelper\AzureFunctionClassHelperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n        public static T GetQueryParam<T>(string paramName, IQueryCollection query, ParseDelegate<T> parse)\r\n            where T : struct\r\n        {\r\n            var strVal = query[paramName];\r\n            if (string.IsNullOrEmpty(strVal) || !parse(strVal, out T parsed))\r\n            {\r\n                throw new FormatException($\"Parameter '{paramName}' could not be parsed as a {typeof(T).Name}.\");\r\n            }\r\n\r\n            return parsed;\r\n        }\r\n        \r\n        public static T? GetQueryParamNullable<T>(string paramName, IQueryCollection query, ParseDelegate<T> parse)\r\n            where T : struct\r\n        {\r\n            var strVal = query[paramName];\r\n            if (string.IsNullOrEmpty(strVal))\r\n            {\r\n                return null;\r\n            }\r\n\r\n            if (!parse(strVal, out T parsed))\r\n            {\r\n                throw new FormatException($\"Parameter '{paramName}' could not be parsed as a {typeof(T).Name}.\");\r\n            }\r\n\r\n            return parsed;\r\n        }\r\n\r\n        public static IEnumerable<T> GetQueryParamCollection<T>(string paramName, IQueryCollection query, ParseDelegate<T> parse)\r\n            where T : struct\r\n        {\r\n            var result = new List<T>();\r\n            var strVal = query[paramName];\r\n            var values = strVal.ToString().Split(\",\");\r\n            foreach (var v in values ) \r\n            {\r\n                if (string.IsNullOrEmpty(v) || !parse(v, out T parsed))\r\n                {\r\n                    throw new FormatException($\"Parameter '{paramName}' could not be parsed as a {typeof(T).Name}.\");\r\n                }\r\n                result.Add(parsed);\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public static T GetHeadersParam<T>(string paramName, IHeaderDictionary headers, ParseDelegate<T> parse)\r\n            where T : struct\r\n        {\r\n            var strVal = headers[paramName];\r\n            if (string.IsNullOrEmpty(strVal) || !parse(strVal, out T parsed))\r\n            {\r\n                throw new FormatException($\"Parameter '{paramName}' could not be parsed as a {typeof(T).Name}.\");\r\n            }\r\n\r\n            return parsed;\r\n        }\r\n\r\n        public static T? GetHeadersParamNullable<T>(string paramName, IHeaderDictionary headers, ParseDelegate<T> parse)\r\n            where T : struct\r\n        {\r\n            var strVal = headers[paramName];\r\n            if (string.IsNullOrEmpty(strVal))\r\n            {\r\n                return null;\r\n            }\r\n\r\n            if (!parse(strVal, out T parsed))\r\n            {\r\n                throw new FormatException($\"Parameter '{paramName}' could not be parsed as a {typeof(T).Name}.\");\r\n            }\r\n\r\n            return parsed;\r\n        }\r\n\r\n        public static IEnumerable<T> GetHeadersParamCollection<T>(string paramName, IHeaderDictionary headers, ParseDelegate<T> parse)\r\n            where T : struct\r\n        {\r\n            var result = new List<T>();\r\n            var strVal = headers[paramName];\r\n            var values = strVal.ToString().Split(\",\");\r\n            foreach (var v in values ) \r\n            {\r\n                if (string.IsNullOrEmpty(v) || !parse(v, out T parsed))\r\n                {\r\n                    throw new FormatException($\"Parameter '{paramName}' could not be parsed as a {typeof(T).Name}.\");\r\n                }\r\n                result.Add(parsed);\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public static TEnum GetEnumParam<TEnum>(string paramName, string enumString)\r\n            where TEnum : struct\r\n        {\r\n            if (!Enum.TryParse<TEnum>(enumString, true, out var enumValue))\r\n            {\r\n                throw new FormatException($\"Parameter {paramName} has value of {enumString} which is not a valid literal value for Enum {typeof(TEnum).Name}\");\r\n            }\r\n\r\n            return enumValue;\r\n        }\r\n        \r\n        public static TEnum? GetEnumParamNullable<TEnum>(string paramName, ");
            
            #line 127 "E:\Intent.Modules.NET\Modules\Intent.Modules.AzureFunctions\Templates\AzureFunctionClassHelper\AzureFunctionClassHelperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NullableStringDefinition));
            
            #line default
            #line hidden
            this.Write(" enumString)\r\n            where TEnum : struct\r\n        {\r\n            if (enumString is null)\r\n            {\r\n                return null;\r\n            }\r\n            \r\n            if (!Enum.TryParse<TEnum>(enumString, true, out var enumValue))\r\n            {\r\n                throw new FormatException($\"Parameter {paramName} has value of {enumString} which is not a valid literal value for Enum {typeof(TEnum).Name}\");\r\n            }\r\n\r\n            return enumValue;\r\n        }\r\n        \r\n        public delegate bool ParseDelegate<T>(string strVal, out T parsed);\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
}
