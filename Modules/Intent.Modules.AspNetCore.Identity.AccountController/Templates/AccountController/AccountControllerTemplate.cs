// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.AspNetCore.Identity.AccountController.Templates.AccountController
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class AccountControllerTemplate : CSharpTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"using System;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace ");
            
            #line 25 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    [Route(\"api/[controller]/[action]\")]\r\n    [ApiController]\r\n    public cl" +
                    "ass ");
            
            #line 29 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" : ControllerBase\r\n    {\r\n        private readonly SignInManager<");
            
            #line 31 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetIdentityUserClass()));
            
            #line default
            #line hidden
            this.Write("> _signInManager;\r\n        private readonly UserManager<");
            
            #line 32 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetIdentityUserClass()));
            
            #line default
            #line hidden
            this.Write("> _userManager;\r\n        private readonly IUserStore<");
            
            #line 33 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetIdentityUserClass()));
            
            #line default
            #line hidden
            this.Write("> _userStore;\r\n        private readonly ILogger<");
            
            #line 34 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("> _logger;\r\n        private readonly ");
            
            #line 35 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetAccountEmailSenderInterfaceName()));
            
            #line default
            #line hidden
            this.Write(" _accountEmailSender;\r\n        private readonly ");
            
            #line 36 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetTokenServiceInterfaceName()));
            
            #line default
            #line hidden
            this.Write(" _tokenService;\r\n\r\n        public ");
            
            #line 38 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("(\r\n            SignInManager<");
            
            #line 39 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetIdentityUserClass()));
            
            #line default
            #line hidden
            this.Write("> signInManager,\r\n            IUserStore<");
            
            #line 40 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetIdentityUserClass()));
            
            #line default
            #line hidden
            this.Write("> userStore,\r\n            UserManager<");
            
            #line 41 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetIdentityUserClass()));
            
            #line default
            #line hidden
            this.Write("> userManager,\r\n            ILogger<");
            
            #line 42 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("> logger,\r\n            ");
            
            #line 43 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetAccountEmailSenderInterfaceName()));
            
            #line default
            #line hidden
            this.Write(" accountEmailSender,\r\n            ");
            
            #line 44 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetTokenServiceInterfaceName()));
            
            #line default
            #line hidden
            this.Write(@" tokenService)
        {
            _signInManager = signInManager;
            _userStore = userStore;
            _userManager = userManager;
            _logger = logger;
            _accountEmailSender = accountEmailSender;
            _tokenService = tokenService;
        }

        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> Register(RegisterDto input)
        {
            if (string.IsNullOrWhiteSpace(input.Email))
            {
                ModelState.AddModelError<RegisterDto>(x => x.Email, ""Mandatory"");
            }

            if (string.IsNullOrWhiteSpace(input.Password))
            {
                ModelState.AddModelError<RegisterDto>(x => x.Password, ""Mandatory"");
            }

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var user = new ");
            
            #line 73 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.AspNetCore.Identity.AccountController\Templates\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetIdentityUserClass()));
            
            #line default
            #line hidden
            this.Write("();\r\n\r\n            await _userStore.SetUserNameAsync(user, input.Email, Cancellat" +
                    "ionToken.None);\r\n            await _userManager.SetEmailAsync(user, input.Email)" +
                    ";\r\n            var result = await _userManager.CreateAsync(user, input.Password!" +
                    ");\r\n\r\n            if (!result.Succeeded)\r\n            {\r\n                foreach" +
                    " (var error in result.Errors)\r\n                {\r\n                    ModelState" +
                    ".AddModelError(string.Empty, error.Description);\r\n                }\r\n\r\n         " +
                    "       return BadRequest(ModelState);\r\n            }\r\n\r\n            _logger.LogI" +
                    "nformation(\"User created a new account with password.\");\r\n\r\n            var user" +
                    "Id = await _userManager.GetUserIdAsync(user);\r\n            var code = await _use" +
                    "rManager.GenerateEmailConfirmationTokenAsync(user);\r\n            code = WebEncod" +
                    "ers.Base64UrlEncode(Encoding.UTF8.GetBytes(code));\r\n\r\n            if (_userManag" +
                    "er.Options.SignIn.RequireConfirmedAccount)\r\n            {\r\n                await" +
                    " _accountEmailSender.SendEmailConfirmationRequest(\r\n                    email: i" +
                    "nput.Email!,\r\n                    userId: userId,\r\n                    code: cod" +
                    "e);\r\n            }\r\n\r\n            return Ok();\r\n        }\r\n\r\n        [HttpPost]\r" +
                    "\n        [AllowAnonymous]\r\n        public async Task<ActionResult<TokenResultDto" +
                    ">> Login(LoginDto input)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(i" +
                    "nput.Email))\r\n            {\r\n                ModelState.AddModelError<LoginDto>(" +
                    "x => x.Email, \"Mandatory\");\r\n            }\r\n\r\n            if (string.IsNullOrWhi" +
                    "teSpace(input.Password))\r\n            {\r\n                ModelState.AddModelErro" +
                    "r<LoginDto>(x => x.Password, \"Mandatory\");\r\n            }\r\n\r\n            if (!Mo" +
                    "delState.IsValid)\r\n            {\r\n                return BadRequest(ModelState);" +
                    "\r\n            }\r\n\r\n            var email = input.Email!;\r\n            var passwo" +
                    "rd = input.Password!;\r\n\r\n            var user = await _userManager.FindByEmailAs" +
                    "ync(email);\r\n            if (user == null ||\r\n                !await _userManage" +
                    "r.CheckPasswordAsync(user, password))\r\n            {\r\n                _logger.Lo" +
                    "gWarning(\"Invalid login attempt.\");\r\n                return Forbid();\r\n         " +
                    "   }\r\n\r\n            if (await _userManager.IsLockedOutAsync(user))\r\n            " +
                    "{\r\n                _logger.LogWarning(\"User account locked out.\");\r\n            " +
                    "    return Forbid();\r\n            }\r\n\r\n            var claims = await _userManag" +
                    "er.GetClaimsAsync(user);\r\n            var roles = await _userManager.GetRolesAsy" +
                    "nc(user);\r\n            foreach (var role in roles)\r\n            {\r\n             " +
                    "   claims.Add(new Claim(\"role\", role));\r\n            }\r\n\r\n            var token " +
                    "= _tokenService.GenerateAccessToken(username: email, claims: claims.ToArray());\r" +
                    "\n            var newRefreshToken = _tokenService.GenerateRefreshToken();\r\n\r\n    " +
                    "        user.RefreshToken = newRefreshToken.Token;\r\n            user.RefreshToke" +
                    "nExpired = newRefreshToken.Expiry;\r\n            await _userManager.UpdateAsync(u" +
                    "ser);\r\n            \r\n            _logger.LogInformation(\"User logged in.\");\r\n   " +
                    "         \r\n            return Ok(new TokenResultDto\r\n            {\r\n            " +
                    "    AuthenticationToken = token,\r\n                RefreshToken = newRefreshToken" +
                    ".Token\r\n            });\r\n        }\r\n\r\n        [HttpPost]\r\n        [AllowAnonymou" +
                    "s]\r\n        public async Task<ActionResult<TokenResultDto>> RefreshToken(string " +
                    "authenticationToken, string refreshToken)\r\n        {\r\n            var principal " +
                    "= _tokenService.GetPrincipalFromExpiredToken(authenticationToken);\r\n            " +
                    "var username = principal.Identity.Name;\r\n\r\n            var user = await _userMan" +
                    "ager.FindByNameAsync(username);\r\n            if (user == null || user.RefreshTok" +
                    "en != refreshToken) return BadRequest();\r\n\r\n            var claims = await _user" +
                    "Manager.GetClaimsAsync(user);\r\n\r\n            var newJwtToken = _tokenService.Gen" +
                    "erateAccessToken(username, claims);\r\n            var newRefreshToken = _tokenSer" +
                    "vice.GenerateRefreshToken();\r\n\r\n            user.RefreshToken = newRefreshToken." +
                    "Token;\r\n            user.RefreshTokenExpired = newRefreshToken.Expiry;\r\n        " +
                    "    await _userManager.UpdateAsync(user);\r\n\r\n            return Ok(new TokenResu" +
                    "ltDto\r\n            {\r\n                AuthenticationToken = newJwtToken,\r\n      " +
                    "          RefreshToken = newRefreshToken.Token\r\n            });\r\n        }\r\n\r\n  " +
                    "      [HttpPost]\r\n        [AllowAnonymous]\r\n        public async Task<IActionRes" +
                    "ult> ConfirmEmail(ConfirmEmailDto input)\r\n        {\r\n            if (string.IsNu" +
                    "llOrWhiteSpace(input.UserId))\r\n            {\r\n                ModelState.AddMode" +
                    "lError<ConfirmEmailDto>(x => x.UserId, \"Mandatory\");\r\n            }\r\n\r\n         " +
                    "   if (string.IsNullOrWhiteSpace(input.Code))\r\n            {\r\n                Mo" +
                    "delState.AddModelError<ConfirmEmailDto>(x => x.Code, \"Mandatory\");\r\n            " +
                    "}\r\n\r\n            if (!ModelState.IsValid)\r\n            {\r\n                return" +
                    " BadRequest(ModelState);\r\n            }\r\n\r\n            var userId = input.UserId" +
                    "!;\r\n            var code = input.Code!;\r\n            var user = await _userManag" +
                    "er.FindByIdAsync(input.UserId!);\r\n            if (user == null)\r\n            {\r\n" +
                    "                return NotFound($\"Unable to load user with ID \'{userId}\'.\");\r\n  " +
                    "          }\r\n\r\n            code = Encoding.UTF8.GetString(WebEncoders.Base64UrlD" +
                    "ecode(code));\r\n\r\n            var result = await _userManager.ConfirmEmailAsync(u" +
                    "ser, code);\r\n            if (!result.Succeeded)\r\n            {\r\n                " +
                    "ModelState.AddModelError<ConfirmEmailDto>(x => x, \"Error confirming your email.\"" +
                    ");\r\n                return BadRequest(ModelState);\r\n            }\r\n\r\n           " +
                    " return Ok();\r\n        }\r\n\r\n        [HttpPost]\r\n        [Authorize]\r\n        pub" +
                    "lic async Task<IActionResult> Logout()\r\n        {\r\n            var username = Us" +
                    "er.Identity?.Name;\r\n            var user = await _userManager.FindByNameAsync(us" +
                    "ername);\r\n            user.RefreshToken = null;\r\n            user.RefreshTokenEx" +
                    "pired = null;\r\n            await _userManager.UpdateAsync(user);\r\n            \r\n" +
                    "            _logger.LogInformation($\"User [{username}] logged out the system.\");" +
                    "\r\n            return Ok();\r\n        }\r\n    }\r\n\r\n    public class TokenResultDto\r" +
                    "\n    {\r\n        public string? AuthenticationToken { get; set; }\r\n        public" +
                    " string? RefreshToken { get; set; }\r\n    }\r\n\r\n    public class RegisterDto\r\n    " +
                    "{\r\n        public string? Email { get; set; }\r\n        public string? Password {" +
                    " get; set; }\r\n    }\r\n\r\n    public class LoginDto\r\n    {\r\n        public string? " +
                    "Email { get; set; }\r\n        public string? Password { get; set; }\r\n    }\r\n\r\n   " +
                    " public class ConfirmEmailDto\r\n    {\r\n        public string? UserId { get; set; " +
                    "}\r\n        public string? Code { get; set; }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
