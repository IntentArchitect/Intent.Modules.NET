<#@ template language="C#" inherits="CSharpTemplateBase<Intent.Modelers.Services.CQRS.Api.CommandModel, Intent.Modules.Application.MediatR.Templates.CommandHandler.CommandHandlerDecorator>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modelers.Services.CQRS.Api" #>
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

[assembly: DefaultIntentManaged(Mode.Merge)]

namespace <#= Namespace #>
{
    [IntentManaged(Mode.Merge, Signature = Mode.Fully)]
    public class <#= ClassName #> : <#= GetRequestHandlerInterface() #>
    {<#= GetFields() #>

        [IntentManaged(Mode.Ignore)]
        public <#= ClassName #>(<#= GetCtorParams() #>)
        {<#= GetCtorInitializations() #>
        }

        [IntentManaged(Mode.Fully, Body = Mode.<#= HasImplementation() ? "Fully": "Ignore" #>)]
        public async Task<<#= GetReturnType() #>> Handle(<#= GetCommandModelName() #> request, CancellationToken cancellationToken)
        {<#= GetImplementation() #>
        }
    }
}