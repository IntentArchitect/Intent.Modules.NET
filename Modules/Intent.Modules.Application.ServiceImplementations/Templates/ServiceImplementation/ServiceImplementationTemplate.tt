<#@ template  debug="true"  inherits="CSharpTemplateBase<Intent.Modelers.Services.Api.ServiceModel, Intent.Modules.Application.ServiceImplementations.Templates.ServiceImplementation.ServiceImplementationDecorator>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Modules.Application.Contracts" #> 
<#@ import namespace="Intent.Modelers.Services.Api" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Threading.Tasks;
using Intent.RoslynWeaver.Attributes;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#=Namespace#>
{
    [IntentManaged(Mode.Merge)]
    public class <#=ClassName#> : <#= GetServiceInterfaceName() #>
    {
<#  var parameters = GetConstructorDependencies(); 
    foreach (var parameter in parameters)
    { #>
        private readonly <#= parameter.ParameterType #> _<#= parameter.ParameterName #>;
<#	} #>

        [IntentManaged(Mode.Fully, Body = Mode.Ignore)]
        public <#=ClassName#>(<#= string.Join(", ", parameters.Select(s => $"{s.ParameterType} {s.ParameterName}")) #>)
        {
<#  foreach (var parameter in parameters)
    { #>
            _<#= parameter.ParameterName #> = <#= parameter.ParameterName #>;
<#  } #>
        }

<#  foreach (var o in Model.Operations) 
    { #>
        [IntentManaged(Mode.Fully, Body = Mode.Ignore)]
        public <#= GetOperationReturnType(o) #> <#= o.Name.ToPascalCase() #>(<#= GetOperationDefinitionParameters(o) #>)
        {<#= GetImplementation(o) #>
        }

<#  } #>
        public void Dispose()
        {
        }
    }
}