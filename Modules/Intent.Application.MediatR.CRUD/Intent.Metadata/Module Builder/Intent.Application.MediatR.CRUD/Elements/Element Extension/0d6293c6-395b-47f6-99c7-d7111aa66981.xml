<?xml version="1.0" encoding="utf-8"?>
<class id="0d6293c6-395b-47f6-99c7-d7111aa66981" type="Element Extension" typeId="e3c7b1ca-f080-45c1-b56f-8d44226c8e20">
  <name>Service Extension</name>
  <display>Service Extension: Service</display>
  <isAbstract>false</isAbstract>
  <order>0</order>
  <genericTypes />
  <typeReference id="cfec30f5-ba0f-4e56-bbd3-102c78ff0e1c">
    <typeId>b16578a5-27b1-4047-a8df-f0b783d706bd</typeId>
    <isNavigable>true</isNavigable>
    <isNullable>false</isNullable>
    <isCollection>false</isCollection>
    <isRequired>true</isRequired>
    <typePackageName>Intent.Modelers.Services</typePackageName>
    <typePackageId>4ba53041-59f9-4446-a207-6da4fbdf86fe</typePackageId>
    <stereotypes />
    <genericTypeParameters />
  </typeReference>
  <isMapped>false</isMapped>
  <parentFolderId>46410048-55e6-4cc9-8ee0-dcd0e24a8ee2</parentFolderId>
  <packageId>4c21efb8-ec70-4d57-8ea4-d6e9f7e6b9f6</packageId>
  <packageName>Intent.Application.MediatR.CRUD</packageName>
  <stereotypes>
    <stereotype stereotypeDefinitionId="159cbc8e-a910-40f7-8e45-3edadbb863c2" name="Type Reference Extension Settings">
      <addedByDefault>true</addedByDefault>
      <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
      <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
      <properties>
        <property name="35226a83-3965-4224-8aef-20c68a0c5180" display="Mode" value="Inherit" isActive="true" />
        <property name="7d3859d4-084d-4ff0-8b31-850b4a8f8cd0" display="Display Name" isActive="false" />
        <property name="17223dbd-8df0-4700-8b81-02274ca3ed7f" display="Hint" isActive="false" />
        <property name="b2cef034-5706-45d2-8554-f4dc582a18ff" display="Target Types" isActive="false" />
        <property name="93e4efa9-186d-4e88-ae0a-491bcd6e6f5e" display="Default Type Id" isActive="false" />
        <property name="7a0c4185-1c08-4d3e-9185-14683d7a3bd0" display="Allow Collection" value="Inherit" isActive="false" />
        <property name="e3dc90ec-4f5f-4f20-b271-e28a5094dc91" display="Allow Nullable" value="Inherit" isActive="false" />
      </properties>
    </stereotype>
  </stereotypes>
  <metadata />
  <childElements>
    <childElement id="b03de4cd-ac32-48f8-af0c-8df938845d98" type="Context Menu" typeId="d45e383d-90ba-4b64-aca7-34ca100cea21">
      <name>[context menu]</name>
      <display>[context menu]</display>
      <isAbstract>false</isAbstract>
      <order>1</order>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>0d6293c6-395b-47f6-99c7-d7111aa66981</parentFolderId>
      <packageId>4c21efb8-ec70-4d57-8ea4-d6e9f7e6b9f6</packageId>
      <packageName>Intent.Application.MediatR.CRUD</packageName>
      <stereotypes />
      <metadata />
      <childElements>
        <childElement id="f68e3c40-be00-44d0-9a67-196dc1d96eae" type="Run Script Option" typeId="345d46fb-c500-409a-88c7-26720572c9af">
          <name>Create CRUD Operations</name>
          <display>Create CRUD Operations: Script</display>
          <isAbstract>false</isAbstract>
          <order>0</order>
          <genericTypes />
          <typeReference id="c4f5d33d-f6ac-41db-a494-f812f2a0d649">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>b03de4cd-ac32-48f8-af0c-8df938845d98</parentFolderId>
          <packageId>4c21efb8-ec70-4d57-8ea4-d6e9f7e6b9f6</packageId>
          <packageName>Intent.Application.MediatR.CRUD</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="let options = element.lookupTypesOf(&quot;Class&quot;);&#xD;&#xA;if (options.length == 0) {&#xD;&#xA;    await dialogService.info(&quot;No Domain types could be found. Please ensure that you have a reference to the Domain package.&quot;);&#xD;&#xA;} else {&#xD;&#xA;    let classId = await dialogService.lookupFromOptions(options);&#xD;&#xA;    let entity = element.lookup(classId);&#xD;&#xA;    if (entity != null) {&#xD;&#xA;        let entityName = entity.name;&#xD;&#xA;&#xD;&#xA;        // SET UP FOLDER:&#xD;&#xA;        var existing = element.getParent().getChildren().find(x =&gt; x.name == pluralize(entityName));&#xD;&#xA;        var folder = existing || createElement(&quot;Folder&quot;, pluralize(entityName), element.getParent().id);&#xD;&#xA;&#xD;&#xA;        // CREATE:&#xD;&#xA;        if (!folder.getChildren().some(x =&gt; x.name == `Create${entityName}Command`))&#xD;&#xA;        {&#xD;&#xA;            let command = createElement(&quot;Command&quot;, `Create${entityName}Command`, folder.id);&#xD;&#xA;            command.setMapping(entity.id);&#xD;&#xA;            for(let attribute of entity.getChildren(&quot;Attribute&quot;)) {&#xD;&#xA;                let field = createElement(&quot;DTO-Field&quot;, attribute.name, command.id);&#xD;&#xA;                field.typeReference.setType(attribute.typeReference.typeId)&#xD;&#xA;                field.setMapping(attribute.id);&#xD;&#xA;            }&#xD;&#xA;            command.collapse();&#xD;&#xA;            let operation = createElement(&quot;Operation&quot;, &quot;Post&quot;, element.id);&#xD;&#xA;            operation.setMapping(command.id);&#xD;&#xA;            let stereotype = operation.getStereotype(&quot;Http Settings&quot;);&#xD;&#xA;            stereotype.getProperty(&quot;Verb&quot;).setValue(&quot;POST&quot;);&#xD;&#xA;&#xD;&#xA;            let param = createElement(&quot;Parameter&quot;, &quot;command&quot;, operation.id);&#xD;&#xA;            param.typeReference.setType(command.id);&#xD;&#xA;            operation.collapse();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        // UPDATE:&#xD;&#xA;        if (!folder.getChildren().some(x =&gt; x.name == `Update${entityName}Command`))&#xD;&#xA;        {&#xD;&#xA;            let command = createElement(&quot;Command&quot;, `Update${entityName}Command`, folder.id);&#xD;&#xA;            command.setMapping(entity.id);&#xD;&#xA;            &#xD;&#xA;            let idField = createElement(&quot;DTO-Field&quot;, &quot;id&quot;, command.id);&#xD;&#xA;            idField.typeReference.setType(&quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;)&#xD;&#xA;&#xD;&#xA;            for(let attribute of entity.getChildren(&quot;Attribute&quot;)) {&#xD;&#xA;                let field = createElement(&quot;DTO-Field&quot;, attribute.name, command.id);&#xD;&#xA;                field.typeReference.setType(attribute.typeReference.typeId)&#xD;&#xA;                field.setMapping(attribute.id);&#xD;&#xA;            }&#xD;&#xA;            command.collapse();&#xD;&#xA;&#xD;&#xA;            let operation = createElement(&quot;Operation&quot;, &quot;Put&quot;, element.id);&#xD;&#xA;            operation.setMapping(command.id);&#xD;&#xA;            let stereotype = operation.getStereotype(&quot;Http Settings&quot;);&#xD;&#xA;            stereotype.getProperty(&quot;Verb&quot;).setValue(&quot;PUT&quot;);&#xD;&#xA;            stereotype.getProperty(&quot;Route&quot;).setValue(&quot;{id}&quot;);&#xD;&#xA;            &#xD;&#xA;            let idParam = createElement(&quot;Parameter&quot;, &quot;id&quot;, operation.id);&#xD;&#xA;            idParam.typeReference.setType(&quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;);&#xD;&#xA;            idParam.setMapping(idField.id);&#xD;&#xA;            &#xD;&#xA;            let commandParam = createElement(&quot;Parameter&quot;, &quot;command&quot;, operation.id);&#xD;&#xA;            commandParam.typeReference.setType(command.id);&#xD;&#xA;            operation.collapse();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        // DELETE:&#xD;&#xA;        if (!folder.getChildren().some(x =&gt; x.name == `Delete${entityName}Command`))&#xD;&#xA;        {&#xD;&#xA;            let command = createElement(&quot;Command&quot;, `Delete${entityName}Command`, folder.id);&#xD;&#xA;            &#xD;&#xA;            let idField = createElement(&quot;DTO-Field&quot;, &quot;id&quot;, command.id);&#xD;&#xA;            idField.typeReference.setType(&quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;)&#xD;&#xA;            command.collapse();&#xD;&#xA;&#xD;&#xA;            let operation = createElement(&quot;Operation&quot;, &quot;Delete&quot;, element.id);&#xD;&#xA;            operation.setMapping(command.id);&#xD;&#xA;            let stereotype = operation.getStereotype(&quot;Http Settings&quot;);&#xD;&#xA;            stereotype.getProperty(&quot;Verb&quot;).setValue(&quot;DELETE&quot;);&#xD;&#xA;            stereotype.getProperty(&quot;Route&quot;).setValue(&quot;{id}&quot;);&#xD;&#xA;            &#xD;&#xA;            let idParam = createElement(&quot;Parameter&quot;, &quot;id&quot;, operation.id);&#xD;&#xA;            idParam.typeReference.setType(&quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;);&#xD;&#xA;            idParam.setMapping(idField.id);&#xD;&#xA;            operation.collapse();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        // DTO:&#xD;&#xA;        if (!folder.getChildren().some(x =&gt; x.name == `${entityName}DTO`))&#xD;&#xA;        {&#xD;&#xA;            var dto = createElement(&quot;DTO&quot;, `${entityName}DTO`, folder.id);&#xD;&#xA;            dto.setMapping(entity.id);&#xD;&#xA;            &#xD;&#xA;            let idField = createElement(&quot;DTO-Field&quot;, &quot;id&quot;, dto.id);&#xD;&#xA;            idField.typeReference.setType(&quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;)&#xD;&#xA;&#xD;&#xA;            for(let attribute of entity.getChildren(&quot;Attribute&quot;)) {&#xD;&#xA;                let field = createElement(&quot;DTO-Field&quot;, attribute.name, dto.id);&#xD;&#xA;                field.typeReference.setType(attribute.typeReference.typeId);&#xD;&#xA;                field.typeReference.setIsNullable(attribute.typeReference.isNullable);&#xD;&#xA;                field.typeReference.setIsCollection(attribute.typeReference.isCollection);&#xD;&#xA;                field.setMapping(attribute.id);&#xD;&#xA;            }&#xD;&#xA;            dto.collapse();&#xD;&#xA;        }&#xD;&#xA;        // Get BY ID:&#xD;&#xA;        if (!folder.getChildren().some(x =&gt; x.name == `Get${entityName}ByIdQuery`))&#xD;&#xA;        {&#xD;&#xA;            let query = createElement(&quot;Query&quot;, `Get${entityName}ByIdQuery`, folder.id);&#xD;&#xA;            query.typeReference.setType(dto.id)&#xD;&#xA;            &#xD;&#xA;            let idField = createElement(&quot;DTO-Field&quot;, &quot;id&quot;, query.id);&#xD;&#xA;            idField.typeReference.setType(&quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;)&#xD;&#xA;            query.collapse();&#xD;&#xA;&#xD;&#xA;            let operation = createElement(&quot;Operation&quot;, &quot;Get&quot;, element.id);&#xD;&#xA;            operation.setMapping(query.id);&#xD;&#xA;            let stereotype = operation.getStereotype(&quot;Http Settings&quot;);&#xD;&#xA;            stereotype.getProperty(&quot;Verb&quot;).setValue(&quot;GET&quot;);&#xD;&#xA;            stereotype.getProperty(&quot;Route&quot;).setValue(&quot;{id}&quot;);&#xD;&#xA;            &#xD;&#xA;            let idParam = createElement(&quot;Parameter&quot;, &quot;id&quot;, operation.id);&#xD;&#xA;            idParam.typeReference.setType(&quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;);&#xD;&#xA;            idParam.setMapping(idField.id);&#xD;&#xA;            operation.collapse();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        // Get All:&#xD;&#xA;        if (!folder.getChildren().some(x =&gt; x.name == `Get${pluralize(entityName)}Query`))&#xD;&#xA;        {&#xD;&#xA;            let query = createElement(&quot;Query&quot;, `Get${pluralize(entityName)}Query`, folder.id);&#xD;&#xA;            query.typeReference.setType(dto.id)&#xD;&#xA;            query.typeReference.setIsCollection(true);&#xD;&#xA;            query.collapse();&#xD;&#xA;            &#xD;&#xA;            let operation = createElement(&quot;Operation&quot;, &quot;Get&quot;, element.id);&#xD;&#xA;            operation.setMapping(query.id);&#xD;&#xA;            let stereotype = operation.getStereotype(&quot;Http Settings&quot;);&#xD;&#xA;            stereotype.getProperty(&quot;Verb&quot;).setValue(&quot;GET&quot;);&#xD;&#xA;            stereotype.getProperty(&quot;Route&quot;).setValue(&quot;&quot;);&#xD;&#xA;            operation.collapse();&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    else {&#xD;&#xA;        await dialogService.error(`Could not find an Entity with the name '${entityName}'. The name of your service must correlate to an Entity in the domain.`);&#xD;&#xA;    }&#xD;&#xA;}" isActive="true" />
              </properties>
            </stereotype>
            <stereotype stereotypeDefinitionId="cbe77364-d1d0-400b-a8c4-646a4c869612" name="Option Settings">
              <comment />
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="b2c3a117-23d3-47e5-8b83-5b902c55a226" display="Icon" isActive="true" />
                <property name="0abff08a-3986-40b1-a28f-4cc03c4fc1ec" display="Shortcut" value="ctrl + shift + u" isActive="true" />
                <property name="79f6973f-5e3a-4618-9d4c-d7cc604bffe0" display="Shortcut (macOS)" isActive="true" />
                <property name="e034a0ca-0101-4594-8384-43048b714578" display="Type Order" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
      </childElements>
    </childElement>
  </childElements>
</class>