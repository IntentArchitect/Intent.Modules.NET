//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:7.0.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Intent.Modules.Eventing.GoogleCloud.PubSub.Templates.EventingTemplates.GoogleEventBusTopicEventManager {
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using System;
    
    
    public partial class GoogleEventBusTopicEventManagerTemplate : CSharpTemplateBase<object> {
        
        public override string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 10 ""
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing Google.Cloud.PubSub.V1;\r\n" +
                    "\r\n[assembly: DefaultIntentManaged(Mode.Fully)]\r\n\r\nnamespace ");
            
            #line default
            #line hidden
            
            #line 16 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Namespace ));
            
            #line default
            #line hidden
            
            #line 16 ""
            this.Write(";\r\n\r\npublic class ");
            
            #line default
            #line hidden
            
            #line 18 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( ClassName ));
            
            #line default
            #line hidden
            
            #line 18 ""
            this.Write(" : ");
            
            #line default
            #line hidden
            
            #line 18 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( this.GetEventBusTopicEventManagerInterfaceName() ));
            
            #line default
            #line hidden
            
            #line 18 ""
            this.Write("\r\n{\r\n    private readonly ");
            
            #line default
            #line hidden
            
            #line 20 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( this.GetCloudResourceManagerInterfaceName() ));
            
            #line default
            #line hidden
            
            #line 20 ""
            this.Write(" _resourceManager;\r\n    private readonly Dictionary<string, string> _topicLookup;" +
                    "\r\n\r\n    public ");
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( ClassName ));
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write("(");
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( this.GetCloudResourceManagerInterfaceName() ));
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write(@" resourceManager)
    {
        _resourceManager = resourceManager;
        _topicLookup = new Dictionary<string, string>();
    }
    
    public void RegisterTopicEvent<TMessage>(string topicId) where TMessage : class
    {
        _topicLookup.Add(typeof(TMessage).FullName!, topicId);
    }
    
    public TopicName GetTopicName(PubsubMessage message)
    {
        var messageType = message.Attributes[""MessageType""]!;
        if (!_topicLookup.TryGetValue(messageType, out var topicId))
        {
            throw new InvalidOperationException($""Could not find a Topic Id for Message Type: {messageType}"");
        }
        return new TopicName(_resourceManager.ProjectId, topicId);
    }
}");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public override void Initialize() {
            base.Initialize();
        }
    }
}
