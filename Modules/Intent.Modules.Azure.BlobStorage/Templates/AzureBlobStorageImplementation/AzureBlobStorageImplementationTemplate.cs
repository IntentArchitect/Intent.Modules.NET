// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.Azure.BlobStorage.Templates.AzureBlobStorageImplementation
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Azure.BlobStorage\Templates\AzureBlobStorageImplementation\AzureBlobStorageImplementationTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class AzureBlobStorageImplementationTemplate : CSharpTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using System;\r\nusing System.IO;\r\nusing System.Threading;\r\nusing System.Threading." +
                    "Tasks;\r\nusing Azure.Storage.Blobs;\r\nusing Microsoft.Extensions.Configuration;\r\n\r" +
                    "\n[assembly: DefaultIntentManaged(Mode.Fully)]\r\n\r\nnamespace ");
            
            #line 20 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Azure.BlobStorage\Templates\AzureBlobStorageImplementation\AzureBlobStorageImplementationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public class ");
            
            #line 22 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Azure.BlobStorage\Templates\AzureBlobStorageImplementation\AzureBlobStorageImplementationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 22 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Azure.BlobStorage\Templates\AzureBlobStorageImplementation\AzureBlobStorageImplementationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetBlobStorageInterfaceName()));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n    private readonly BlobServiceClient _client;\r\n\r\n        public ");
            
            #line 26 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Azure.BlobStorage\Templates\AzureBlobStorageImplementation\AzureBlobStorageImplementationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("(IConfiguration configuration)\r\n        {\r\n            _client = new BlobServiceC" +
                    "lient(configuration.GetValue<string>(\"AzureBlobStorage\"));\r\n        }\r\n\r\n       " +
                    " public Task<Stream> DownloadContentAsync(Uri cloudStorageLocation, Cancellation" +
                    "Token cancellationToken = default)\r\n        {\r\n            var blobUriBuilder = " +
                    "new BlobUriBuilder(cloudStorageLocation);\r\n            return DownloadContentAsy" +
                    "nc(blobUriBuilder.BlobContainerName, blobUriBuilder.BlobName, cancellationToken)" +
                    ";\r\n        }\r\n        \r\n        public async Task<Stream> DownloadContentAsync(s" +
                    "tring containerName, string blobName, CancellationToken cancellationToken = defa" +
                    "ult)\r\n        {\r\n            var containerClient = _client.GetBlobContainerClien" +
                    "t(containerName);\r\n            var blobClient = containerClient.GetBlobClient(bl" +
                    "obName);\r\n            var result = await blobClient.DownloadAsync(cancellationTo" +
                    "ken: cancellationToken).ConfigureAwait(false);\r\n            return result.Value." +
                    "Content;\r\n        }\r\n\r\n        public Task UploadContent(Uri cloudStorageLocatio" +
                    "n, Stream streamToUpload, bool overwrite = true, CancellationToken cancellationT" +
                    "oken = default)\r\n        {\r\n            var blobUriBuilder = new BlobUriBuilder(" +
                    "cloudStorageLocation);\r\n            return UploadContent(blobUriBuilder.BlobCont" +
                    "ainerName, blobUriBuilder.BlobName, streamToUpload, overwrite, cancellationToken" +
                    ");\r\n        }\r\n\r\n        public async Task UploadContent(string containerName, s" +
                    "tring blobName, Stream streamToUpload, bool overwrite = true, CancellationToken " +
                    "cancellationToken = default)\r\n        {\r\n            var containerClient = _clie" +
                    "nt.GetBlobContainerClient(containerName);\r\n            var blobClient = containe" +
                    "rClient.GetBlobClient(blobName);\r\n            await blobClient.UploadAsync(strea" +
                    "mToUpload, overwrite, cancellationToken).ConfigureAwait(false);\r\n        }\r\n\r\n  " +
                    "      public Task DeleteContent(Uri cloudStorageLocation, CancellationToken canc" +
                    "ellationToken = default)\r\n        {\r\n            var blobUriBuilder = new BlobUr" +
                    "iBuilder(cloudStorageLocation);\r\n            return DeleteContent(blobUriBuilder" +
                    ".BlobContainerName, blobUriBuilder.BlobName, cancellationToken);\r\n        }\r\n\r\n " +
                    "       public async Task DeleteContent(string containerName, string blobName, Ca" +
                    "ncellationToken cancellationToken = default)\r\n        {\r\n            var contain" +
                    "erClient = _client.GetBlobContainerClient(containerName);\r\n            var blobC" +
                    "lient = containerClient.GetBlobClient(blobName);\r\n            await blobClient.D" +
                    "eleteAsync(cancellationToken: cancellationToken).ConfigureAwait(false);\r\n       " +
                    " }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
