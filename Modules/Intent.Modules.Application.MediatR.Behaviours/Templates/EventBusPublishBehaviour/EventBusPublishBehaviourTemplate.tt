<#@ template language="C#" inherits="CSharpTemplateBase<object>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
using System.Threading;
using System.Threading.Tasks;
using MediatR;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>;

public class <#= ClassName #><TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse>
where TRequest : notnull
{
    private readonly <#= this.GetEventBusInterfaceName() #> _eventBus;

    public <#= ClassName #>(<#= this.GetEventBusInterfaceName() #> eventBus)
    {
        _eventBus = eventBus;
    }
    
    public async Task<TResponse> Handle(TRequest request, RequestHandlerDelegate<TResponse> next, CancellationToken cancellationToken)
    {
        var response = await next(cancellationToken);

        await _eventBus.FlushAllAsync(cancellationToken);

        return response;
    }
}