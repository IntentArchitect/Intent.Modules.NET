<#@ template  debug="true"  inherits="CSharpTemplateBase<Intent.Modelers.Services.Api.DTOModel, Intent.Modules.Application.Dtos.Templates.DtoModel.DtoModelDecorator>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="Intent.Modelers.Services.Api" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
using System;
using System.Collections.Generic;
<#=DependencyUsings#>

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
<# 
    foreach (var line in Model.GetXmlDocLines())
    {
#>
    /// <#= line #>
<#
    }
#>
    <#= ClassAttributes()#>
    public<#= AbstractDefinition #> class <#=ClassName#><#= GenericTypes #><#= GetBaseTypes() #>
    {<#= EnterClass() #>
        public <#=ClassName#>()
        {
        }
<# if (!Model.IsAbstract) { #>

        public static <#=ClassName#><#= GenericTypes #> Create(<#= ConstructorParameters() #>)
        {
            return new <#=ClassName#><#= GenericTypes #>
            {
<#    foreach (var field in Model.Fields) {#>
                <#= field.Name.ToPascalCase() #> = <#= field.Name.ToCamelCase(reservedWordEscape: true) #>,
<#    } #>
            };
        }
<# } #>
<#  foreach (var field in Model.Fields)
    {#>
<#
        foreach (var line in field.GetXmlDocLines())
        {
#>
        /// <#= line #>
<#
        }
#><#= PropertyAttributes(field)#>
        public <#= GetTypeName(field.TypeReference)#> <#=field.Name.ToPascalCase()#> { get; set; }
<#    }
#><#= ExitClass() #>
    }
}