// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.Eventing.GoogleCloud.PubSub.Templates.ImplementationTemplates.GoogleCloudResourceManager
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Eventing.GoogleCloud.PubSub\Templates\ImplementationTemplates\GoogleCloudResourceManager\GoogleCloudResourceManagerTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class GoogleCloudResourceManagerTemplate : CSharpTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using System;\r\nusing System.Net.Http;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing Google.Cloud.PubSub.V1;\r\nusing Grpc.Core;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Logging;\r\n\r\n[assembly: DefaultIntentManaged(Mode.Fully)]\r\n\r\nnamespace ");
            
            #line 21 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Eventing.GoogleCloud.PubSub\Templates\ImplementationTemplates\GoogleCloudResourceManager\GoogleCloudResourceManagerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\npublic class ");
            
            #line 23 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Eventing.GoogleCloud.PubSub\Templates\ImplementationTemplates\GoogleCloudResourceManager\GoogleCloudResourceManagerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 23 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Eventing.GoogleCloud.PubSub\Templates\ImplementationTemplates\GoogleCloudResourceManager\GoogleCloudResourceManagerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetCloudResourceManagerInterfaceName()));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    private readonly ILogger<");
            
            #line 25 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Eventing.GoogleCloud.PubSub\Templates\ImplementationTemplates\GoogleCloudResourceManager\GoogleCloudResourceManagerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("> _logger;\r\n    private readonly HttpClient _httpClient;\r\n    \r\n    public ");
            
            #line 28 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Eventing.GoogleCloud.PubSub\Templates\ImplementationTemplates\GoogleCloudResourceManager\GoogleCloudResourceManagerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("(IConfiguration configuration, ILogger<");
            
            #line 28 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Eventing.GoogleCloud.PubSub\Templates\ImplementationTemplates\GoogleCloudResourceManager\GoogleCloudResourceManagerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("> logger)\r\n    {\r\n        _logger = logger;\r\n        _httpClient = new HttpClient();\r\n        _httpClient.DefaultRequestHeaders.Add(\"Metadata-Flavor\", \"Google\");\r\n        PopulateDetails(configuration);\r\n    }\r\n\r\n    public string ProjectId { get; private set; }\r\n    public bool ShouldSetupCloudResources { get; private set; }\r\n\r\n    public async Task CreateTopicIfNotExistAsync(string topicId, CancellationToken cancellationToken = default)\r\n    {\r\n        var publisherService = await PublisherServiceApiClient.CreateAsync(cancellationToken);\r\n        try\r\n        {\r\n            var topic = await publisherService.GetTopicAsync($\"projects/{ProjectId}/topics/{topicId}\");\r\n            return;\r\n        }\r\n        catch (RpcException ex)\r\n        {\r\n            if (ex.Status.StatusCode != StatusCode.NotFound)\r\n            {\r\n                throw;\r\n            }\r\n        }\r\n\r\n        try\r\n        {\r\n            _logger.LogInformation($\"Creating Topic {topicId} for Project {ProjectId} on Google Cloud Pub/Sub...\");\r\n            var newTopic = await publisherService.CreateTopicAsync(\r\n                name: new TopicName(ProjectId, topicId), \r\n                cancellationToken);\r\n        }\r\n        catch (RpcException ex)\r\n        {\r\n            if (ex.Status.StatusCode != StatusCode.AlreadyExists)\r\n            {\r\n                throw;\r\n            }\r\n        }\r\n    }\r\n\r\n    public async Task CreateSubscriptionIfNotExistAsync((string SubscriptionId, string TopicId) subscription, CancellationToken cancellationToken = default)\r\n    {\r\n        var subscriberService = await SubscriberServiceApiClient.CreateAsync(cancellationToken);\r\n        try\r\n        {\r\n            var existingSubscription = await subscriberService.GetSubscriptionAsync($\"projects/{ProjectId}/subscriptions/{subscription.SubscriptionId}\", cancellationToken);\r\n            return;\r\n        }\r\n        catch (RpcException ex)\r\n        {\r\n            if (ex.Status.StatusCode != StatusCode.NotFound)\r\n            {\r\n                throw;\r\n            }\r\n        }\r\n\r\n        try\r\n        {\r\n            _logger.LogInformation($\"Creating Subscription {subscription.SubscriptionId} for Topic {subscription.TopicId} in Project {ProjectId} on Google Cloud Pub/Sub...\");\r\n            var newSubscription = await subscriberService.CreateSubscriptionAsync(\r\n                name: new SubscriptionName(ProjectId, subscription.SubscriptionId),\r\n                topic: new TopicName(ProjectId, subscription.TopicId),\r\n                pushConfig: null,\r\n                ackDeadlineSeconds: 60,\r\n                cancellationToken: cancellationToken);\r\n        }\r\n        catch (RpcException nestedEx)\r\n        {\r\n            if (nestedEx.Status.StatusCode != StatusCode.AlreadyExists)\r\n            {\r\n                throw;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void PopulateDetails(IConfiguration configuration)\r\n    {\r\n        bool.TryParse(configuration[\"GoogleCloud:UseMetadataServer\"], out var useMetadataServer);\r\n        ProjectId = useMetadataServer ? GetGoogleProjectId() : configuration[\"GoogleCloud:ProjectId\"];\r\n\r\n        if (ProjectId == null)\r\n        {\r\n            throw new Exception(@\"No Project Id has been specified for use with Google Cloud Pub/Sub.\r\nEither configure 'GoogleCloud:UseMetadataServer' to 'true' to use the Metadata server or configure 'GoogleCloud:ProjectId' to be the actual Project Id in your appsettings.json file.\");\r\n        }\r\n\r\n        bool.TryParse(configuration[\"GoogleCloud:ShouldSetupCloudResources\"], out var shouldSetupCloudResources);\r\n        ShouldSetupCloudResources = shouldSetupCloudResources;\r\n    }\r\n\r\n    private string GetGoogleProjectId()\r\n    {\r\n        var request = new HttpRequestMessage() {\r\n            RequestUri = new Uri(\"http://metadata.google.internal/computeMetadata/v1/project/project-id\"),\r\n            Method = HttpMethod.Get\r\n        };\r\n        return _httpClient.Send(request).Content.ReadAsStringAsync().Result;\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
}
