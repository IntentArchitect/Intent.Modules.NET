<#@ template language="C#" inherits="CSharpTemplateBase<Intent.Modelers.Domain.Api.ClassModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using Ardalis.Specification;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    [IntentManaged(Mode.Merge, Signature = Mode.Fully)]
    public interface <#= ClassName #> : IReadRepositoryBase<<#= GetPersistenceEntityTypeName() #>>
    {
<#
    if (HasSinglePrimaryKey())
    {
#>
        [IntentManaged(Mode.Fully)]
        Task<<#= GetDomainEntityTypeName() #>?> FindByIdAsync(<#= GetSurrogateKey() #> id, CancellationToken cancellationToken = default);

        [IntentManaged(Mode.Fully)]
        Task<List<<#= GetDomainEntityTypeName() #>>> FindByIdsAsync(<#= GetSurrogateKey() #>[] ids, CancellationToken cancellationToken = default);
<#
    } 
#>  }
}