<#@ template language="C#" inherits="CSharpTemplateBase<Intent.Modelers.Types.ServiceProxies.Api.ServiceProxyModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.Application.Contracts.Clients.Templates" #>
using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.WebUtilities;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public class <#= ClassName #> : <#= this.GetServiceContractName() #>
    {
        private readonly HttpClient _httpClient;

        private readonly JsonSerializerOptions _serializerOptions = new JsonSerializerOptions()
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        };

        public <#= ClassName #>(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

<#
    foreach (var operation in Model.MappedService.Operations)
    {
#>
        public async <#= GetReturnType(operation) #> <#= GetOperationName(operation) #>(<#= GetOperationParameters(operation) #>)
        {<#
        // We're leveraging the C# $"" notation to actually take leverage of the parameters
        // that are meant to be Route-based.
#>
            var relativeUri = $"<#= GetRelativeUri(operation) #>";
<#
        if (HasQueryParameter(operation))
        {
#>
            
            var queryParams = new Dictionary<string, string>();
<#
            foreach (var queryParameter in GetQueryParameters(operation))
            {
#>
            queryParams.Add("<#= queryParameter.Name.ToCamelCase() #>", <#= GetParameterValueExpression(queryParameter) #>);
<#
            }
#>
            relativeUri = QueryHelpers.AddQueryString(relativeUri, queryParams);

<#
        }
#>
            var request = new HttpRequestMessage(<#= GetHttpVerb(operation) #>, relativeUri);
            request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
<#
        foreach (var headerParameter in GetHeaderParameters(operation))
        {
#>
            request.Headers.Add("<#= headerParameter.HeaderName #>", <#= headerParameter.Parameter.Name.ToParameterName() #>);

<#
        }

        if (HasBodyParameter(operation))
        {
#>
            
            var content = JsonSerializer.Serialize(<#= GetBodyParameterName(operation) #>, _serializerOptions);
            request.Content = new StringContent(content, Encoding.Default, "application/json");

<#
        }
        else if (HasFormUrlEncodedParameter(operation))
        {
#>
            
            var formVariables = new List<KeyValuePair<string, string>>();
<#
            foreach (var formParameter in GetFormUrlEncodedParameters(operation))
            {
#>
            formVariables.Add(new KeyValuePair<string, string>("<#= formParameter.Name.ToPascalCase() #>", <#= GetParameterValueExpression(formParameter) #>));
<#
            }
#>
            var content = new FormUrlEncodedContent(formVariables);
            request.Content = content;
<#
        }
#>
            
            using (var response = await _httpClient.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false))
            {
                if (!response.IsSuccessStatusCode)
                {
                    throw await GetHttpRequestException(request, response, cancellationToken).ConfigureAwait(false);
                }
<#
        if (HasResponseType(operation))
        {
#>
                if (response.StatusCode == HttpStatusCode.NoContent || response.Content.Headers.ContentLength == 0)
                {
                    return default;
                }

                using (var contentStream = await response.Content.ReadAsStreamAsync(cancellationToken).ConfigureAwait(false))
                {
                    return await JsonSerializer.DeserializeAsync<<#= GetTypeName(operation.ReturnType) #>>(contentStream, _serializerOptions, cancellationToken).ConfigureAwait(false);
                }
<#
        }
#>
            }
        }
<#
    }
#>

        public void Dispose()
        {
        }

        private async Task<<#= this.GetRequestHttpExceptionName() #>> GetHttpRequestException(HttpRequestMessage request, HttpResponseMessage response, CancellationToken cancellationToken)
        {
            var fullRequestUri = new Uri(_httpClient.BaseAddress<#= NotNull #>, request.RequestUri<#= NotNull #>);
            var content = await response.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
            var headers = response.Headers.ToDictionary(k => k.Key, v => v.Value);
            return new <#= this.GetRequestHttpExceptionName() #>(fullRequestUri, response.StatusCode, headers, response.ReasonPhrase, content);
        }
    }
}