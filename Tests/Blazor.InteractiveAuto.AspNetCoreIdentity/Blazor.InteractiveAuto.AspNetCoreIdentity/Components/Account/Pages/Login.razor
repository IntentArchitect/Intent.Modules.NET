@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using Blazor.InteractiveAuto.AspNetCoreIdentity.Common
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Log in</PageTitle>
<h1>Log in</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input"
                      FormName="login"
                      OnValidSubmit="LoginUser"
                      method="post">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger"
                                   role="alert" />
                <div class="form-floating mb-3">
                    <InputText class="form-control"
                               @bind-Value="Input.Email"
                               autocomplete="username"
                               aria-required="true"
                               placeholder="name@example.com" />
                    <label class="form-label"
                           for="email">
                        Email
                    </label>
                    <ValidationMessage class="text-danger"
                                       For="() => Input.Email" />
                </div>
                <div class="form-floating mb-3">
                    <InputText class="form-control"
                               @bind-Value="Input.Password"
                               autocomplete="current-password"
                               aria-required="true"
                               placeholder="password"
                               type="password" />
                    <label class="form-label"
                           for="password">
                        Password
                    </label>
                    <ValidationMessage class="text-danger"
                                       For="() => Input.Password" />
                </div>
                <div class="form-check mb-3">
                    <InputCheckbox class="darker-border-checkbox form-check-input"
                                   @bind-Value="Input.RememberMe" />
                    <label class="form-check-label"
                           for="rememberMe">
                        Remember me
                    </label>
                </div>
                <div>
                    <button class="w-100 btn btn-lg btn-primary"
                            type="submit">
                        Login
                    </button>
                </div>
                <div>
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                </div>
                <div>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                </div>
                <div>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
</div>
<div class="col-md-6 col-md-offset-2">
    <section>
        <h3>Use another service to log in.</h3>
        <hr />
        <ExternalLoginPicker />
    </section>
</div>
@code {

    private string? errorMessage;
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task LoginUser()
    {
        await AuthService.Login(Input.Email, Input.Password, Input.RememberMe, ReturnUrl);
    }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
