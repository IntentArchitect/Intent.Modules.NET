using System;
using System.Threading;
using System.Threading.Tasks;
using AdvancedMappingCrud.Repositories.Tests.Domain.Entities.ExplicitAutoGenerated;
using AdvancedMappingCrud.Repositories.Tests.Domain.Repositories.ExplicitAutoGenerated;
using Intent.RoslynWeaver.Attributes;
using MediatR;

[assembly: DefaultIntentManaged(Mode.Fully)]
[assembly: IntentTemplate("Intent.Application.MediatR.CommandHandler", Version = "2.0")]

namespace AdvancedMappingCrud.Repositories.Tests.Application.DBAssigneds.CreateDBAssigned
{
    [IntentManaged(Mode.Merge, Signature = Mode.Fully)]
    public class CreateDBAssignedCommandHandler : IRequestHandler<CreateDBAssignedCommand, Guid>
    {
        private readonly IDBAssignedRepository _dBAssignedRepository;

        [IntentManaged(Mode.Merge)]
        public CreateDBAssignedCommandHandler(IDBAssignedRepository dBAssignedRepository)
        {
            _dBAssignedRepository = dBAssignedRepository;
        }

        [IntentManaged(Mode.Fully, Body = Mode.Fully)]
        public async Task<Guid> Handle(CreateDBAssignedCommand request, CancellationToken cancellationToken)
        {
            var dBAssigned = new DBAssigned
            {
                Name = request.Name
            };

            _dBAssignedRepository.Add(dBAssigned);
            await _dBAssignedRepository.UnitOfWork.SaveChangesAsync(cancellationToken);
            return dBAssigned.Id;
        }
    }
}