<#@ template language="C#" inherits="CSharpTemplateBase<object>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.Eventing.Contracts.Templates" #>
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using MassTransit;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public class <#= ClassName #> : <#= this.GetEventBusInterfaceName() #>
    {
        private readonly List<object> _messagesToPublish = new List<object>();

        public <#= ClassName #>(IPublishEndpoint publishEndpoint)
        {
            Current = publishEndpoint;
        }

        public IPublishEndpoint Current { get; set; }
        
        public void Publish<T>(T message) where T : class
        {
            _messagesToPublish.Add(message);
        }

        public async Task FlushAllAsync(CancellationToken cancellationToken = default)
        {
            await Current.PublishBatch(_messagesToPublish, cancellationToken);
            _messagesToPublish.Clear();
        }
    }
}