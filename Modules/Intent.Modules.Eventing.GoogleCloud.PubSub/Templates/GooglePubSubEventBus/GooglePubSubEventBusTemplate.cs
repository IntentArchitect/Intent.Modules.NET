// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.Eventing.GoogleCloud.PubSub.Templates.GooglePubSubEventBus
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using Intent.Modules.Eventing.Contracts.Templates;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Eventing.GoogleCloud.PubSub\Templates\GooglePubSubEventBus\GooglePubSubEventBusTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class GooglePubSubEventBusTemplate : CSharpTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text.Json;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing Google.Cloud.PubSub.V1;\r\nusing Google.Protobuf;\r\n\r\n[assembly: DefaultIntentManaged(Mode.Fully)]\r\n\r\nnamespace ");
            
            #line 22 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Eventing.GoogleCloud.PubSub\Templates\GooglePubSubEventBus\GooglePubSubEventBusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\npublic class ");
            
            #line 24 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Eventing.GoogleCloud.PubSub\Templates\GooglePubSubEventBus\GooglePubSubEventBusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 24 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Eventing.GoogleCloud.PubSub\Templates\GooglePubSubEventBus\GooglePubSubEventBusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetEventBusInterfaceName()));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    private readonly ");
            
            #line 26 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Eventing.GoogleCloud.PubSub\Templates\GooglePubSubEventBus\GooglePubSubEventBusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetEventBusTopicEventManagerInterfaceName()));
            
            #line default
            #line hidden
            this.Write(" _topicEventManager;\r\n\r\n    private readonly List<PubsubMessage> _messagesToPublish = new();\r\n\r\n    public GooglePubSubEventBus(");
            
            #line 30 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Eventing.GoogleCloud.PubSub\Templates\GooglePubSubEventBus\GooglePubSubEventBusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetEventBusTopicEventManagerInterfaceName()));
            
            #line default
            #line hidden
            this.Write(" topicEventManager)\r\n    {\r\n        _topicEventManager = topicEventManager;\r\n    }\r\n    \r\n    public void Publish<T>(T message) where T : class\r\n    {\r\n        if (typeof(T) == typeof(GenericMessage))\r\n        {\r\n            throw new ArgumentException($\"{nameof(GenericMessage)} is not meant to be published. Create a new Message type intended for your given use case.\");\r\n        }\r\n        _messagesToPublish.Add(new PubsubMessage\r\n        {\r\n            Attributes = { { \"MessageType\", typeof(T).FullName } },\r\n            Data = ByteString.CopyFromUtf8(JsonSerializer.Serialize(message))\r\n        });\r\n    }\r\n\r\n    public async Task FlushAllAsync(CancellationToken cancellationToken = default)\r\n    {\r\n        await Task.WhenAll(_messagesToPublish.Select(async message =>\r\n        {\r\n            var topicName = _topicEventManager.GetTopicName(message);\r\n            var publisher = await PublisherClient.CreateAsync(topicName);\r\n            await publisher.PublishAsync(message);\r\n        }));\r\n        _messagesToPublish.Clear();\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
}
