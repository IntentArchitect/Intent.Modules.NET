//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.13
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Intent.Modules.Eventing.GoogleCloud.PubSub.Templates.ImplementationTemplates.GoogleCloudResourceManager {
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using System;
    
    
    public partial class GoogleCloudResourceManagerTemplate : CSharpTemplateBase<object> {
        
        public override string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 10 ""
            this.Write(@"using System;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Google.Cloud.PubSub.V1;
using Grpc.Core;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace ");
            
            #line default
            #line hidden
            
            #line 21 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Namespace ));
            
            #line default
            #line hidden
            
            #line 21 ""
            this.Write(";\r\n\r\npublic class ");
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( ClassName ));
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write(" : ");
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( this.GetCloudResourceManagerInterfaceName() ));
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write("\r\n{\r\n    private readonly ILogger<");
            
            #line default
            #line hidden
            
            #line 25 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( ClassName ));
            
            #line default
            #line hidden
            
            #line 25 ""
            this.Write("> _logger;\r\n    private readonly HttpClient _httpClient;\r\n    \r\n    public ");
            
            #line default
            #line hidden
            
            #line 28 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( ClassName ));
            
            #line default
            #line hidden
            
            #line 28 ""
            this.Write("(IConfiguration configuration, ILogger<");
            
            #line default
            #line hidden
            
            #line 28 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( ClassName ));
            
            #line default
            #line hidden
            
            #line 28 ""
            this.Write("> logger)\r\n    {\r\n        _logger = logger;\r\n        _httpClient = new HttpClient" +
                    "();\r\n        _httpClient.DefaultRequestHeaders.Add(\"Metadata-Flavor\", \"Google\");" +
                    "\r\n        PopulateDetails(configuration);\r\n    }\r\n\r\n    public string ProjectId " +
                    "{ get; private set; }\r\n    public bool ShouldSetupCloudResources { get; private " +
                    "set; }\r\n\r\n    public async Task CreateTopicIfNotExistAsync(string topicId, Cance" +
                    "llationToken cancellationToken = default)\r\n    {\r\n        var publisherService =" +
                    " await PublisherServiceApiClient.CreateAsync(cancellationToken);\r\n        try\r\n " +
                    "       {\r\n            var topic = await publisherService.GetTopicAsync($\"project" +
                    "s/{ProjectId}/topics/{topicId}\");\r\n            return;\r\n        }\r\n        catch" +
                    " (RpcException ex)\r\n        {\r\n            if (ex.Status.StatusCode != StatusCod" +
                    "e.NotFound)\r\n            {\r\n                throw;\r\n            }\r\n        }\r\n\r\n" +
                    "        try\r\n        {\r\n            var newTopic = await publisherService.Create" +
                    "TopicAsync(\r\n                name: new TopicName(ProjectId, topicId), \r\n        " +
                    "        cancellationToken);\r\n        }\r\n        catch (RpcException ex)\r\n       " +
                    " {\r\n            if (ex.Status.StatusCode != StatusCode.AlreadyExists)\r\n         " +
                    "   {\r\n                throw;\r\n            }\r\n        }\r\n    }\r\n\r\n    public asyn" +
                    "c Task CreateSubscriptionIfNotExistAsync((string SubscriptionId, string TopicId)" +
                    " subscription, CancellationToken cancellationToken = default)\r\n    {\r\n        va" +
                    "r subscriberService = await SubscriberServiceApiClient.CreateAsync(cancellationT" +
                    "oken);\r\n        try\r\n        {\r\n            var existingSubscription = await sub" +
                    "scriberService.GetSubscriptionAsync($\"projects/{ProjectId}/subscriptions/{subscr" +
                    "iption.SubscriptionId}\", cancellationToken);\r\n            return;\r\n        }\r\n  " +
                    "      catch (RpcException ex)\r\n        {\r\n            if (ex.Status.StatusCode !" +
                    "= StatusCode.NotFound)\r\n            {\r\n                throw;\r\n            }\r\n  " +
                    "      }\r\n\r\n        try\r\n        {\r\n            var newSubscription = await subsc" +
                    "riberService.CreateSubscriptionAsync(\r\n                name: new SubscriptionNam" +
                    "e(ProjectId, subscription.SubscriptionId),\r\n                topic: new TopicName" +
                    "(ProjectId, subscription.TopicId),\r\n                pushConfig: null,\r\n         " +
                    "       ackDeadlineSeconds: 60,\r\n                cancellationToken: cancellationT" +
                    "oken);\r\n        }\r\n        catch (RpcException nestedEx)\r\n        {\r\n           " +
                    " if (nestedEx.Status.StatusCode != StatusCode.AlreadyExists)\r\n            {\r\n   " +
                    "             throw;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void Populat" +
                    "eDetails(IConfiguration configuration)\r\n    {\r\n        bool.TryParse(configurati" +
                    "on[\"GoogleCloud:UseMetadataServer\"], out var useMetadataServer);\r\n        Projec" +
                    "tId = useMetadataServer ? GetGoogleProjectId() : configuration[\"GoogleCloud:Proj" +
                    "ectId\"];\r\n\r\n        bool.TryParse(configuration[\"GoogleCloud:ShouldSetupCloudRes" +
                    "ources\"], out var shouldSetupCloudResources);\r\n        ShouldSetupCloudResources" +
                    " = shouldSetupCloudResources;\r\n    }\r\n\r\n    private string GetGoogleProjectId()\r" +
                    "\n    {\r\n        var request = new HttpRequestMessage() {\r\n            RequestUri" +
                    " = new Uri(\"http://metadata.google.internal/computeMetadata/v1/project/project-i" +
                    "d\"),\r\n            Method = HttpMethod.Get\r\n        };\r\n        return _httpClien" +
                    "t.Send(request).Content.ReadAsStringAsync().Result;\r\n    }\r\n}");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public override void Initialize() {
            base.Initialize();
        }
    }
}
