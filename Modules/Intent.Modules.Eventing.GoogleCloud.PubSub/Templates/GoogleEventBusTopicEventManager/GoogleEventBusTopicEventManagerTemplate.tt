<#@ template language="C#" inherits="CSharpTemplateBase<object>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
using System;
using System.Collections.Generic;
using Google.Cloud.PubSub.V1;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>;

public class <#= ClassName #> : <#= this.GetEventBusTopicEventManagerInterfaceName() #>
{
    private readonly <#= this.GetCloudResourceManagerInterfaceName() #> _resourceManager;
    private readonly Dictionary<string, string> _topicLookup;

    public <#= ClassName #>(<#= this.GetCloudResourceManagerInterfaceName() #> resourceManager)
    {
        _resourceManager = resourceManager;
        _topicLookup = new Dictionary<string, string>();
    }
    
    public void RegisterTopicEvent<TMessage>(string topicId) where TMessage : class
    {
        _topicLookup.Add(typeof(TMessage).FullName!, topicId);
    }
    
    public TopicName GetTopicName(PubsubMessage message)
    {
        var messageType = message.Attributes["MessageType"]!;
        if (!_topicLookup.TryGetValue(messageType, out var topicId))
        {
            throw new InvalidOperationException($"Could not find a Topic Id for Message Type: {messageType}");
        }
        return new TopicName(_resourceManager.ProjectId, topicId);
    }
}