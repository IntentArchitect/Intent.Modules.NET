//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.13
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Intent.Modules.Eventing.GoogleCloud.PubSub.Templates.ImplementationTemplates.GoogleEventBusSubscriptionManager {
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using Intent.Modules.Eventing.Contracts.Templates;
    using System;
    
    
    public partial class GoogleEventBusSubscriptionManagerTemplate : CSharpTemplateBase<object> {
        
        public override string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 11 ""
            this.Write(@"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Google.Cloud.PubSub.V1;
using Microsoft.Extensions.DependencyInjection;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace ");
            
            #line default
            #line hidden
            
            #line 22 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Namespace ));
            
            #line default
            #line hidden
            
            #line 22 ""
            this.Write(";\r\n\r\npublic class ");
            
            #line default
            #line hidden
            
            #line 24 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( ClassName ));
            
            #line default
            #line hidden
            
            #line 24 ""
            this.Write(" : ");
            
            #line default
            #line hidden
            
            #line 24 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( this.GetEventBusSubscriptionManagerInterfaceName() ));
            
            #line default
            #line hidden
            
            #line 24 ""
            this.Write("\r\n{\r\n    private delegate Task MessageHandlerFunc(IServiceProvider provider, Pubs" +
                    "ubMessage message, CancellationToken cancellationToken);\r\n    \r\n    private read" +
                    "only Dictionary<string, MessageHandlerFunc> _handlers;\r\n\r\n    public ");
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( ClassName ));
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write(@"()
    {
        _handlers = new Dictionary<string, MessageHandlerFunc>();
    }

    public void RegisterEventHandler<TMessage>()
        where TMessage : class
    {
        _handlers.Add(typeof(TMessage).FullName!, async (provider, message, cancellationToken) =>
        {
            var messageObj = JsonSerializer.Deserialize<TMessage>(System.Text.Encoding.UTF8.GetString(message.Data.ToArray()));
            var handler = provider.GetService<");
            
            #line default
            #line hidden
            
            #line 41 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( this.GetIntegrationEventHandlerInterfaceName() ));
            
            #line default
            #line hidden
            
            #line 41 ""
            this.Write(@"<TMessage>>()!;
            await handler.HandleAsync(messageObj!, cancellationToken);
        });
    }

    public async Task DispatchAsync(IServiceProvider serviceProvider, PubsubMessage message, CancellationToken cancellationToken)
    {
        if (!message.Attributes.TryGetValue(""MessageType"", out var messageTypeStr) || 
            string.IsNullOrEmpty(messageTypeStr) || 
            !_handlers.TryGetValue(messageTypeStr, out var messageHandler))
        {
            var handler = serviceProvider.GetService<");
            
            #line default
            #line hidden
            
            #line 52 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( this.GetIntegrationEventHandlerInterfaceName() ));
            
            #line default
            #line hidden
            
            #line 52 ""
            this.Write(@"<GenericMessage>>()!;
            await handler.HandleAsync(new GenericMessage(
                MessageId: message.MessageId, 
                Attributes: message.Attributes, 
                MessageBody: System.Text.Encoding.UTF8.GetString(message.Data.ToArray())), cancellationToken);
            return;
        }

        await messageHandler(serviceProvider, message, cancellationToken);
    }
}");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public override void Initialize() {
            base.Initialize();
        }
    }
}
