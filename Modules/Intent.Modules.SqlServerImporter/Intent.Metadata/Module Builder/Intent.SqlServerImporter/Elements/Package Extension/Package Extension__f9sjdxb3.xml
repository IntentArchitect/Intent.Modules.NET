<?xml version="1.0" encoding="utf-8"?>
<class id="ec3eabc0-ab49-4c3a-bca6-14c9e7503196" type="Package Extension" typeId="ab4152df-3add-4a08-81b6-0fefc7cbb204">
  <name>Package Extension</name>
  <display>Package Extension: Domain Package</display>
  <isAbstract>false</isAbstract>
  <sort-children>by-type-then-by-name</sort-children>
  <genericTypes />
  <typeReference id="5c58218b-f933-4075-a334-a1618391c995">
    <typeId>1a824508-4623-45d9-accc-f572091ade5a</typeId>
    <isNavigable>true</isNavigable>
    <isNullable>false</isNullable>
    <isCollection>false</isCollection>
    <isRequired>true</isRequired>
    <typePackageName>Intent.Modelers.Domain</typePackageName>
    <typePackageId>6572b98d-5e13-4d4b-9ffc-820057da974e</typePackageId>
    <stereotypes />
    <genericTypeParameters />
  </typeReference>
  <isMapped>false</isMapped>
  <parentFolderId>eff0c63a-8e7c-4ee9-96f4-cfa04076299f</parentFolderId>
  <packageId>72f14602-6d23-429e-952f-ef5e501deed4</packageId>
  <packageName>Intent.SqlServerImporter</packageName>
  <stereotypes />
  <metadata />
  <childElements>
    <childElement id="254ab665-2ce7-485c-84d2-6dd694ce5608" type="Context Menu" typeId="d45e383d-90ba-4b64-aca7-34ca100cea21">
      <name>[context menu]</name>
      <display>[context menu]</display>
      <isAbstract>false</isAbstract>
      <sort-children>manually</sort-children>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>ec3eabc0-ab49-4c3a-bca6-14c9e7503196</parentFolderId>
      <packageId>72f14602-6d23-429e-952f-ef5e501deed4</packageId>
      <packageName>Intent.SqlServerImporter</packageName>
      <stereotypes />
      <metadata />
      <childElements>
        <childElement id="b00e9c15-6ada-4195-8a23-9fa2bd43a83d" type="Run Script Option" typeId="345d46fb-c500-409a-88c7-26720572c9af">
          <name>Database Import</name>
          <display>Database Import: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="c84b443e-01d1-4d19-8898-b205d8fb41f1">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>254ab665-2ce7-485c-84d2-6dd694ce5608</parentFolderId>
          <packageId>72f14602-6d23-429e-952f-ef5e501deed4</packageId>
          <packageName>Intent.SqlServerImporter</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="/// &lt;reference path=&quot;../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;async function importSqlDatabase(element) {&#xD;&#xA;    var defaults = getDialogDefaults(element);&#xD;&#xA;    let connectionString = {&#xD;&#xA;        id: &quot;connectionString&quot;,&#xD;&#xA;        fieldType: &quot;text&quot;,&#xD;&#xA;        label: &quot;Connection String&quot;,&#xD;&#xA;        placeholder: null,&#xD;&#xA;        hint: null,&#xD;&#xA;        value: defaults.connectionString&#xD;&#xA;    };&#xD;&#xA;    let tableStereotypes = {&#xD;&#xA;        id: &quot;tableStereotypes&quot;,&#xD;&#xA;        fieldType: &quot;select&quot;,&#xD;&#xA;        label: &quot;Apply Table Stereotypes&quot;,&#xD;&#xA;        placeholder: &quot;&quot;,&#xD;&#xA;        hint: &quot;When to apply Table stereotypes to your domain entities&quot;,&#xD;&#xA;        value: defaults.tableStereotypes,&#xD;&#xA;        selectOptions: [{ id: &quot;WhenDifferent&quot;, description: &quot;If They Differ&quot; }, { id: &quot;Always&quot;, description: &quot;Always&quot; }]&#xD;&#xA;    };&#xD;&#xA;    let entityNameConvention = {&#xD;&#xA;        id: &quot;entityNameConvention&quot;,&#xD;&#xA;        fieldType: &quot;select&quot;,&#xD;&#xA;        label: &quot;Entity name convention&quot;,&#xD;&#xA;        placeholder: &quot;&quot;,&#xD;&#xA;        hint: &quot;&quot;,&#xD;&#xA;        value: defaults.entityNameConvention,&#xD;&#xA;        selectOptions: [{ id: &quot;SingularEntity&quot;, description: &quot;Singularized table name&quot; }, { id: &quot;MatchTable&quot;, description: &quot;Table name, as is&quot; }]&#xD;&#xA;    };&#xD;&#xA;    let schemaFilter = {&#xD;&#xA;        id: &quot;schemaFilter&quot;,&#xD;&#xA;        fieldType: &quot;text&quot;,&#xD;&#xA;        label: &quot;Schema Filter&quot;,&#xD;&#xA;        placeholder: &quot;all&quot;,&#xD;&#xA;        hint: &quot;Specify which SQL schemas to export. (default is all) e.g dbo;accounts;security&quot;,&#xD;&#xA;        value: defaults.schemaFilter&#xD;&#xA;    };&#xD;&#xA;    let includeTables = {&#xD;&#xA;        id: &quot;includeTables&quot;,&#xD;&#xA;        fieldType: &quot;checkbox&quot;,&#xD;&#xA;        label: &quot;Include Tables&quot;,&#xD;&#xA;        hint: &quot;Export SQL tables&quot;,&#xD;&#xA;        value: defaults.includeTables&#xD;&#xA;    };&#xD;&#xA;    let includeViews = {&#xD;&#xA;        id: &quot;includeViews&quot;,&#xD;&#xA;        fieldType: &quot;checkbox&quot;,&#xD;&#xA;        label: &quot;Include Views&quot;,&#xD;&#xA;        hint: &quot;Export SQL views&quot;,&#xD;&#xA;        value: defaults.includeViews&#xD;&#xA;    };&#xD;&#xA;    let includeStoredProcedures = {&#xD;&#xA;        id: &quot;includeStoredProcedures&quot;,&#xD;&#xA;        fieldType: &quot;checkbox&quot;,&#xD;&#xA;        label: &quot;Include Stored Procedures&quot;,&#xD;&#xA;        hint: &quot;Export SQL stored procedures&quot;,&#xD;&#xA;        value: defaults.includeStoredProcedures&#xD;&#xA;    };&#xD;&#xA;    let settingPersistence = {&#xD;&#xA;        id: &quot;settingPersistence&quot;,&#xD;&#xA;        fieldType: &quot;select&quot;,&#xD;&#xA;        label: &quot;Persist Settings&quot;,&#xD;&#xA;        hint: &quot;Remember these settings for next time you run the import&quot;,&#xD;&#xA;        value: defaults.settingPersistence,&#xD;&#xA;        selectOptions: [{ id: &quot;None&quot;, description: &quot;None&quot; }, { id: &quot;All&quot;, description: &quot;All Settings&quot; }, { id: &quot;AllSanitisedConnectionString&quot;, description: &quot;All (with Sanitized connection string, no password))&quot; }, { id: &quot;AllWithoutConnectionString&quot;, description: &quot;All (without connection string))&quot; }]&#xD;&#xA;    };&#xD;&#xA;    let formConfig = {&#xD;&#xA;        title: &quot;Sql Server Import&quot;,&#xD;&#xA;        fields: [&#xD;&#xA;            connectionString,&#xD;&#xA;            entityNameConvention,&#xD;&#xA;            tableStereotypes,&#xD;&#xA;            schemaFilter,&#xD;&#xA;            includeTables,&#xD;&#xA;            includeViews,&#xD;&#xA;            includeStoredProcedures,&#xD;&#xA;            settingPersistence,&#xD;&#xA;        ]&#xD;&#xA;    };&#xD;&#xA;    let inputs = await dialogService.openForm(formConfig);&#xD;&#xA;    const typesToExport = [];&#xD;&#xA;    if (inputs.includeTables == &quot;true&quot;) {&#xD;&#xA;        typesToExport.push(&quot;Table&quot;);&#xD;&#xA;    }&#xD;&#xA;    if (inputs.includeViews == &quot;true&quot;) {&#xD;&#xA;        typesToExport.push(&quot;View&quot;);&#xD;&#xA;    }&#xD;&#xA;    if (inputs.includeStoredProcedures == &quot;true&quot;) {&#xD;&#xA;        typesToExport.push(&quot;StoredProcedure&quot;);&#xD;&#xA;    }&#xD;&#xA;    const domainDesignerId = &quot;6ab29b31-27af-4f56-a67c-986d82097d63&quot;;&#xD;&#xA;    let importConfig = {&#xD;&#xA;        applicationId: application.id,&#xD;&#xA;        designerId: domainDesignerId,&#xD;&#xA;        packageId: element.getPackage().id,&#xD;&#xA;        connectionString: inputs.connectionString,&#xD;&#xA;        tableStereotypes: inputs.tableStereotypes,&#xD;&#xA;        entityNameConvention: inputs.entityNameConvention,&#xD;&#xA;        schemaFilter: inputs.schemaFilter ? inputs.schemaFilter.split(&quot;;&quot;) : [],&#xD;&#xA;        typesToExport: typesToExport,&#xD;&#xA;        settingPersistence: inputs.settingPersistence,&#xD;&#xA;    };&#xD;&#xA;    let jsonResponse = await executeModuleTask(&quot;Intent.Modules.SqlServerImporter.Tasks.DatabaseImport&quot;, JSON.stringify(importConfig));&#xD;&#xA;    console.warn(jsonResponse);&#xD;&#xA;    let result = JSON.parse(jsonResponse);&#xD;&#xA;    if (result === null || result === void 0 ? void 0 : result.errorMessage) {&#xD;&#xA;        dialogService.error(result === null || result === void 0 ? void 0 : result.errorMessage);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function getDialogDefaults(element) {&#xD;&#xA;    let package = element.getPackage();&#xD;&#xA;    let persistedValue = getSettingValue(package, &quot;sql-import:typesToExport&quot;, &quot;&quot;);&#xD;&#xA;    let includeTables = &quot;true&quot;;&#xD;&#xA;    let includeViews = &quot;true&quot;;&#xD;&#xA;    let includeStoredProcedures = &quot;true&quot;;&#xD;&#xA;    if (persistedValue) {&#xD;&#xA;        includeTables = &quot;false&quot;;&#xD;&#xA;        includeViews = &quot;false&quot;;&#xD;&#xA;        includeStoredProcedures = &quot;false&quot;;&#xD;&#xA;        persistedValue.split(&quot;;&quot;).forEach(i =&gt; {&#xD;&#xA;            switch (i.toLocaleLowerCase()) {&#xD;&#xA;                case 'table':&#xD;&#xA;                    includeTables = &quot;true&quot;;&#xD;&#xA;                    break;&#xD;&#xA;                case 'view':&#xD;&#xA;                    includeViews = &quot;true&quot;;&#xD;&#xA;                    break;&#xD;&#xA;                case 'storedprocedure':&#xD;&#xA;                    includeStoredProcedures = &quot;true&quot;;&#xD;&#xA;                    break;&#xD;&#xA;                default:&#xD;&#xA;                    break;&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;    let result = {&#xD;&#xA;        connectionString: getSettingValue(package, &quot;sql-import:connectionString&quot;, null),&#xD;&#xA;        tableStereotypes: getSettingValue(package, &quot;sql-import:tableStereotypes&quot;, &quot;WhenDifferent&quot;),&#xD;&#xA;        entityNameConvention: getSettingValue(package, &quot;sql-import:entityNameConvention&quot;, &quot;SingularEntity&quot;),&#xD;&#xA;        schemaFilter: getSettingValue(package, &quot;sql-import:schemaFilter&quot;, &quot;&quot;),&#xD;&#xA;        includeTables: includeTables,&#xD;&#xA;        includeViews: includeViews,&#xD;&#xA;        includeStoredProcedures: includeStoredProcedures,&#xD;&#xA;        settingPersistence: getSettingValue(package, &quot;sql-import:settingPersistence&quot;, &quot;None&quot;),&#xD;&#xA;    };&#xD;&#xA;    return result;&#xD;&#xA;}&#xD;&#xA;function getSettingValue(package, key, defaultValue) {&#xD;&#xA;    let persistedValue = package.getMetadata(key);&#xD;&#xA;    return persistedValue ? persistedValue : defaultValue;&#xD;&#xA;}&#xD;&#xA;/**&#xD;&#xA; * Used by Intent.Modules.NET\Modules\Intent.Modules.SqlServerImporter&#xD;&#xA; *&#xD;&#xA; * Source code here:&#xD;&#xA; * https://github.com/IntentArchitect/Intent.Modules/blob/master/DesignerMacros/src/sql-importer/sql-server/sql-importer.ts&#xD;&#xA; */&#xD;&#xA;//Uncomment below&#xD;&#xA;await importSqlDatabase(element);&#xD;&#xA;" isActive="true" />
              </properties>
            </stereotype>
            <stereotype stereotypeDefinitionId="cbe77364-d1d0-400b-a8c4-646a4c869612" name="Option Settings">
              <comment />
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="b2c3a117-23d3-47e5-8b83-5b902c55a226" display="Icon" isActive="true" />
                <property name="0abff08a-3986-40b1-a28f-4cc03c4fc1ec" display="Shortcut" isActive="true" />
                <property name="79f6973f-5e3a-4618-9d4c-d7cc604bffe0" display="Shortcut (macOS)" isActive="true" />
                <property name="e034a0ca-0101-4594-8384-43048b714578" display="Type Order" isActive="true" />
                <property name="c03841e5-a1e9-4e95-b699-5a466dde7d7d" display="Is Option Visible Function" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
      </childElements>
    </childElement>
  </childElements>
</class>