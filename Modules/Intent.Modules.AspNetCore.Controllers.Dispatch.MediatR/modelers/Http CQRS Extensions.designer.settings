<?xml version="1.0" encoding="utf-8"?>
<settings version="3.1.1">
  <id>6b40d709-b7a2-492e-83b8-c935e79c1b6e</id>
  <name>Http CQRS Extensions</name>
  <designerReferences />
  <packageSettings />
  <packageExtensions>
    <packageExtension type="Services Package" typeId="df45eaf6-9202-4c25-8dd5-677e9ba1e906">
      <requiredPackages />
      <creationOptions />
      <scriptOptions />
      <typeOrder />
      <macros>
        <macro trigger="on-loaded">
          <script>let obsoleteHttpSettingsId = "389e3ad2-6063-4777-aa47-5ec9421faf3d";
let obsoleteParameterSettingsId = "6da057a9-d398-4b57-a6de-cc5558fd2677";

let httpSettingsId = "b4581ed2-42ec-4ae2-83dd-dcdd5f0837b6"; // Web Api
let parameterSettingsId = "d01df110-1208-4af8-a913-92a49d219552"; // Web Api
let securedId = "a9eade71-1d56-4be7-a80c-81046c0c978b"; // Web Api
let unsecuredId = "8b65c29e-1448-43ac-a92a-0e0f86efd6c6"; // Web Api

let requests = lookupTypesOf(["Command", "Query"]);
requests.forEach(request =&gt; {
    let obsolete = request.getStereotype(obsoleteHttpSettingsId);
    if (obsolete != null) {
        let stereotype = request.addStereotype(httpSettingsId);
        stereotype.getProperty("Verb").setValue(obsolete.getProperty("Verb").getValue())
        stereotype.getProperty("Route").setValue(obsolete.getProperty("Route").getValue())
        stereotype.getProperty("Return Type Mediatype").setValue(obsolete.getProperty("Return Type Mediatype").getValue())
        request.removeStereotype(obsoleteHttpSettingsId);
    }

    request.getChildren().forEach(property =&gt; {
        let obsolete = property.getStereotype(obsoleteParameterSettingsId);
        if (obsolete != null) {
            let stereotype = property.addStereotype(parameterSettingsId);
            stereotype.getProperty("Source").setValue(obsolete.getProperty("Source").getValue())
            stereotype.getProperty("Header Name").setValue(obsolete.getProperty("Header Name").getValue())
            property.removeStereotype(obsoleteParameterSettingsId);
        }
    })
});

let services = lookupTypesOf("Service").filter(x =&gt; x.hasStereotype("Http Service Settings"));
if (services.length == 0 || services.filter(x =&gt; x.getChildren("Operation")
    .some(x =&gt; x.isMapped &amp;&amp; (x.getMapping()?.getElement()?.specialization == "Command" || x.getMapping()?.getElement()?.specialization == "Query")))
    .length == 0) {
    return;
}

await dialogService.info(`The Intent.Modules.AspNetCore.Dispatch.MediatR major release (5.0.0) requires that a migration be run against this metadata.

This migration will remove all Services that have been mapped to Commands and Queries and apply the equivalent Http Settings directly onto the Commands and Queries.

This new approach simplifies the metadata and conforms better to the application oriented design paradigm than with the Services. It also allows Services to take the role of application services instead of assuming that they are AspNetCore controllers.

Note that the software factory will make changes to all controllers (e.g. renaming methods). However, there should be no changes in the HTTP Web API itself and therefore should require no changes on any consuming clients. 

If you run into any issues, please revert your changes and contact our support team via support@intentarchitect.com or your preferred channel`);


services.forEach(service =&gt; {
    let serviceRoute = service.getStereotype("Http Service Settings").getProperty("Route").getValue();
    if (serviceRoute == null || serviceRoute == "") {
        serviceRoute = `api/${toKebabCase(removeSuffix(service.getName(), "Service", "Controller"))}`;
    }

    let operations = service.getChildren("Operation").filter(x =&gt; x.hasStereotype("Http Settings") &amp;&amp; x.isMapped)

    operations.forEach(o =&gt; {
        let request = o.getMapping().getElement();
        request.addStereotype(httpSettingsId);
        let httpSettings = request.getStereotype(httpSettingsId);
        let operationRoute = o.getStereotype("Http Settings").getProperty("Route").getValue();

        httpSettings.getProperty("Verb").setValue(o.getStereotype("Http Settings").getProperty("Verb").getValue());
        httpSettings.getProperty("Route").setValue(`${serviceRoute}${(operationRoute == null || operationRoute == "" ? "" : `/${operationRoute}`)}`);
        httpSettings.getProperty("Return Type Mediatype").setValue(o.getStereotype("Http Settings").getProperty("Return Type Mediatype").getValue());

        if ((service.hasStereotype(securedId) &amp;&amp; !o.hasStereotype(unsecuredId)) || o.hasStereotype(securedId)) {
            request.addStereotype(securedId);
            let roles = o.getStereotype(securedId)?.getProperty("Roles").getValue() ??
                service.getStereotype(securedId)?.getProperty("Roles").getValue();
            let secured = request.getStereotype(securedId);
            secured.getProperty("Roles").setValue(roles);
        } else if (service.hasStereotype(unsecuredId) || o.hasStereotype(unsecuredId)) {
            request.addStereotype(unsecuredId);
        }
    });

    if (operations.length &gt; 0) {
        service.delete();
    }
})</script>
        </macro>
      </macros>
    </packageExtension>
  </packageExtensions>
  <elementSettings />
  <elementExtensions />
  <associationSettings />
  <associationExtensions />
  <mappingSettings />
  <mappableElementPackages />
  <mappableElementPackageExtensions />
</settings>