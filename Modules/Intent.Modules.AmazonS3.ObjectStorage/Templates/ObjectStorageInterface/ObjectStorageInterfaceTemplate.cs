// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.AmazonS3.ObjectStorage.Templates.ObjectStorageInterface
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\Intent.Modules.NET\Modules\Intent.Modules.AmazonS3.ObjectStorage\Templates\ObjectStorageInterface\ObjectStorageInterfaceTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class ObjectStorageInterfaceTemplate : CSharpTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\n[assembly: DefaultIntentManaged(Mode.Fully)]\r\n\r\n\r\nnamespace ");
            
            #line 19 "E:\Intent.Modules.NET\Modules\Intent.Modules.AmazonS3.ObjectStorage\Templates\ObjectStorageInterface\ObjectStorageInterfaceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n/// <summary>\r\n/// Represents a single item used for bulk uploads to object storage.\r\n/// </summary>\r\npublic record BulkObjectItem(string Name, Stream DataStream);\r\n\r\n/// <summary>\r\n/// A simplified service interface to access Object Storage.\r\n/// </summary>\r\npublic interface ");
            
            #line 29 "E:\Intent.Modules.NET\Modules\Intent.Modules.AmazonS3.ObjectStorage\Templates\ObjectStorageInterface\ObjectStorageInterfaceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    /// <summary>\r\n    /// Retrieves the URI of a specific object from a given bucket.\r\n    /// </summary>\r\n    /// <param name=\"bucketName\">The name of the bucket.</param>\r\n    /// <param name=\"key\">The key name of the object.</param>\r\n    /// <param name=\"cancellationToken\">An optional token to cancel the asynchronous operation.</param>\r\n    /// <returns>The URI of the object.</returns>\r\n    Task<Uri> GetAsync(string bucketName, string key, CancellationToken cancellationToken = default);\r\n\r\n    /// <summary>\r\n    /// Lists the URIs of all objects in a given bucket.\r\n    /// </summary>\r\n    /// <param name=\"bucketName\">The name of the bucket.</param>\r\n    /// <param name=\"cancellationToken\">An optional token to cancel the asynchronous operation.</param>\r\n    /// <returns>An async enumerable of object URIs.</returns>\r\n    IAsyncEnumerable<Uri> ListAsync(string bucketName, CancellationToken cancellationToken = default);\r\n\r\n    /// <summary>\r\n    /// Uploads data to a specific location in object storage.\r\n    /// </summary>\r\n    /// <param name=\"cloudStorageLocation\">The URI specifying where to upload the data.</param>\r\n    /// <param name=\"dataStream\">The stream of data to upload.</param>\r\n    /// <param name=\"cancellationToken\">An optional token to cancel the asynchronous operation.</param>\r\n    /// <returns>The URI of the uploaded object.</returns>\r\n    Task<Uri> UploadAsync(Uri cloudStorageLocation, Stream dataStream, CancellationToken cancellationToken = default);\r\n\r\n    /// <summary>\r\n    /// Uploads data to a specific object in a given bucket.\r\n    /// </summary>\r\n    /// <param name=\"bucketName\">The name of the bucket.</param>\r\n    /// <param name=\"key\">The key name of the object.</param>\r\n    /// <param name=\"dataStream\">The stream of data to upload.</param>\r\n    /// <param name=\"cancellationToken\">An optional token to cancel the asynchronous operation.</param>\r\n    /// <returns>The URI of the uploaded object.</returns>\r\n    Task<Uri> UploadAsync(string bucketName, string key, Stream dataStream, CancellationToken cancellationToken = default);\r\n\r\n    /// <summary>\r\n    /// Performs bulk upload of multiple objects to a specific bucket.\r\n    /// </summary>\r\n    /// <param name=\"bucketName\">The name of the bucket.</param>\r\n    /// <param name=\"objects\">The enumerable of bulk object items to upload.</param>\r\n    /// <param name=\"cancellationToken\">An optional token to cancel the asynchronous operation.</param>\r\n    /// <returns>An async enumerable of object URIs for each uploaded object.</returns>\r\n    IAsyncEnumerable<Uri> BulkUploadAsync(string bucketName, IEnumerable<BulkObjectItem> objects, CancellationToken cancellationToken = default);\r\n\r\n    /// <summary>\r\n    /// Downloads data from a specific location in object storage.\r\n    /// </summary>\r\n    /// <param name=\"cloudStorageLocation\">The URI specifying where to download the data from.</param>\r\n    /// <param name=\"cancellationToken\">An optional token to cancel the asynchronous operation.</param>\r\n    /// <returns>A stream containing the downloaded data.</returns>\r\n    Task<Stream> DownloadAsync(Uri cloudStorageLocation, CancellationToken cancellationToken = default);\r\n\r\n    /// <summary>\r\n    /// Downloads data from a specific object in a given bucket.\r\n    /// </summary>\r\n    /// <param name=\"bucketName\">The name of the bucket.</param>\r\n    /// <param name=\"key\">The key name of the object.</param>\r\n    /// <param name=\"cancellationToken\">An optional token to cancel the asynchronous operation.</param>\r\n    /// <returns>A stream containing the downloaded data.</returns>\r\n    Task<Stream> DownloadAsync(string bucketName, string key, CancellationToken cancellationToken = default);\r\n\r\n    /// <summary>\r\n    /// Deletes a object at a specific location in object storage.\r\n    /// </summary>\r\n    /// <param name=\"cloudStorageLocation\">The URI specifying the object to delete.</param>\r\n    /// <param name=\"cancellationToken\">An optional token to cancel the asynchronous operation.</param>\r\n    Task DeleteAsync(Uri cloudStorageLocation, CancellationToken cancellationToken = default);\r\n\r\n    /// <summary>\r\n    /// Deletes a specific object in a given bucket.\r\n    /// </summary>\r\n    /// <param name=\"bucketName\">The name of the bucket.</param>\r\n    /// <param name=\"key\">The key name of the object.</param>\r\n    /// <param name=\"cancellationToken\">An optional token to cancel the asynchronous operation.</param>\r\n    Task DeleteAsync(string bucketName, string key, CancellationToken cancellationToken = default);\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
}
