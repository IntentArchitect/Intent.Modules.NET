<?xml version="1.0" encoding="utf-8"?>
<settings version="3.1.1">
  <id>78be924b-a4c6-40f9-ac4e-103fd8f17ce0</id>
  <name>EF Core Settings</name>
  <designerReferences />
  <packageSettings />
  <packageExtensions>
    <packageExtension type="Domain Package" typeId="1a824508-4623-45d9-accc-f572091ade5a">
      <requiredPackages />
      <creationOptions />
      <scriptOptions />
      <typeOrder />
      <macros>
        <macro trigger="on-changed">
          <script>const dbSettingsId = "ac0a788e-d8b3-4eea-b56d-538608f1ded9";
const partitionKeyStereotypeId = "3a203a3e-116e-4a7c-b375-e690570efc3f";
const stringTypeId = "d384db9c-a279-45e1-801e-e4e8099625f2";

// console.log(`Package (${element.getName()}) :: On Changed
//     isCosmosDbProvider() = ${isCosmosDbProvider()}`);

if (!isCosmosDbProvider()) {
    return;
}

lookupTypesOf("Class")?.filter(x =&gt; isAggregateRoot(x) &amp;&amp; !hasSuperClass(x)).forEach(element =&gt; {
    let partitionKey = element.getPackage()?.getStereotype("Cosmos DB Container Settings")?.getProperty("Partition Key")?.value?.trim();
    if (partitionKey == "") { partitionKey = null; }

    let primaryKeyAttr = element.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"))[0];
    if (!partitionKey &amp;&amp; primaryKeyAttr &amp;&amp; !primaryKeyAttr.hasStereotype(partitionKeyStereotypeId)) { 
        primaryKeyAttr.addStereotype(partitionKeyStereotypeId);
        return;
    }

    if (!partitionKey) { return; }

    let partitionKeyAttr = element.getChildren("Attribute").filter(x =&gt; x.hasStereotype(partitionKeyStereotypeId))[0];
    if (!partitionKeyAttr) {
        partitionKeyAttr = createElement("Attribute", partitionKey, element.id);
        partitionKeyAttr.typeReference.setType(stringTypeId);
        partitionKeyAttr.addStereotype(partitionKeyStereotypeId);
    } else if (partitionKey != partitionKeyAttr.getName()) {
        partitionKeyAttr.setName(partitionKey);
    }
});

// === FUNCTIONS ===

function isCosmosDbProvider() {
    return application.getSettings(dbSettingsId)
        ?.getField("Database Provider")
        ?.value == "cosmos";
}

function hasSuperClass(element) {
    return element.getAssociations("Generalization")
        .some(x =&gt; x.isTargetEnd());
}

function isAggregateRoot(element) {
    return ! element.getAssociations("Association")
        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);
}

function getNamingConvention() {
    return application.getSettings(dbSettingsId)
        .getField("Key Naming Convention")?.value ?? "pascal-case";
}</script>
        </macro>
        <macro trigger="on-created">
          <script>function isCosmosDbProvider() {
    return application.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")
        ?.getField("Database Provider")
        ?.value == "cosmos";
}

if (!isCosmosDbProvider()) {
    return;
}

if (! element.hasStereotype("Cosmos DB Container Settings")) {
    element.addStereotype("b4995259-b47b-405a-a332-fd3dc69cd3a5");
}</script>
        </macro>
        <macro trigger="on-loaded">
          <script>function isCosmosDbProvider() {
    return application.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")
        ?.getField("Database Provider")
        ?.value == "cosmos";
}

if (!isCosmosDbProvider()) {
    return;
}

if (! element.hasStereotype("Cosmos DB Container Settings")) {
    element.addStereotype("b4995259-b47b-405a-a332-fd3dc69cd3a5");
}</script>
        </macro>
      </macros>
    </packageExtension>
  </packageExtensions>
  <elementSettings />
  <elementExtensions>
    <elementExtension type="Attribute" typeId="0090fb93-483e-41af-a11d-5ad2dc796adf">
      <mappingSettings />
      <macros>
        <macro trigger="on-changed">
          <script>const dbSettingsId = "ac0a788e-d8b3-4eea-b56d-538608f1ded9";
const partitionKeyStereotypeId = "3a203a3e-116e-4a7c-b375-e690570efc3f";

// console.log(`Attribute (${element.getName()}) :: On Changed
//     isCosmosDbProvider() = ${isCosmosDbProvider()}
//     isAggregateRoot(element.getParent()) = ${isAggregateRoot(element.getParent())}
//     hasSuperClass(element.getParent()) = ${hasSuperClass(element.getParent())}`);

if (!isCosmosDbProvider() || (!isAggregateRoot(element.getParent()) &amp;&amp; !element.getParent().hasStereotype("Table")) || hasSuperClass(element.getParent())) { 
    return; 
}

if (element.hasStereotype(partitionKeyStereotypeId) &amp;&amp; 
    element.getParent().getChildren("Attribute").some(x =&gt; x.id != element.id &amp;&amp; x.hasStereotype(partitionKeyStereotypeId))) {
        
    element.removeStereotype(partitionKeyStereotypeId);
    await dialogService.error(`The Partition Key should not be managed manually. Click on the ${element.getPackage().getName()} package to change the Partition Key name.`);
}

// === FUNCTIONS ===

function isCosmosDbProvider() {
    return application.getSettings(dbSettingsId)
        ?.getField("Database Provider")
        ?.value == "cosmos";
}

function isAggregateRoot(element) {
    return ! element.getAssociations("Association")
        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);
}

function hasSuperClass(element) {
    return element.getAssociations("Generalization")
        .some(x =&gt; x.isTargetEnd());
}

function getNamingConvention() {
    return application.getSettings(dbSettingsId)
        .getField("Key Naming Convention")?.value ?? "pascal-case";
}</script>
        </macro>
        <macro trigger="on-created">
          <script>const dbSettingsId = "ac0a788e-d8b3-4eea-b56d-538608f1ded9";
const partitionKeyStereotypeId = "3a203a3e-116e-4a7c-b375-e690570efc3f";

// console.log(`Attribute (${element.getName()}) :: On Created
//     isCosmosDbProvider() = ${isCosmosDbProvider()}
//     isAggregateRoot(element.getParent()) = ${isAggregateRoot(element.getParent())}
//     hasSuperClass(element.getParent()) = ${hasSuperClass(element.getParent())}`);

if (!isCosmosDbProvider() || (!isAggregateRoot(element.getParent()) &amp;&amp; !element.getParent().hasStereotype("Table")) || hasSuperClass(element.getParent())) { 
    return; 
}

let partitionKey = element.getPackage().getStereotype("Cosmos DB Container Settings").getProperty("Partition Key").value?.trim();
if (partitionKey == "") { partitionKey = null; }

if (!partitionKey &amp;&amp; element.hasStereotype("Primary Key")) { 
    element.addStereotype(partitionKeyStereotypeId);
    return;
}

if (!partitionKey) { return; }

if (element.getName() == partitionKey &amp;&amp; !element.hasStereotype(partitionKeyStereotypeId)) {
    element.addStereotype(partitionKeyStereotypeId);
}

// === FUNCTIONS ===

function isCosmosDbProvider() {
    return application.getSettings(dbSettingsId)
        ?.getField("Database Provider")
        ?.value == "cosmos";
}

function isAggregateRoot(element) {
    return ! element.getAssociations("Association")
        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);
}

function hasSuperClass(element) {
    return element.getAssociations("Generalization")
        .some(x =&gt; x.isTargetEnd());
}

function getNamingConvention() {
    return application.getSettings(dbSettingsId)
        .getField("Key Naming Convention")?.value ?? "pascal-case";
}</script>
        </macro>
      </macros>
    </elementExtension>
    <elementExtension type="Class" typeId="04e12b51-ed12-42a3-9667-a6aa81bb6d10">
      <mappingSettings />
      <macros>
        <macro trigger="on-changed">
          <script>const dbSettingsId = "ac0a788e-d8b3-4eea-b56d-538608f1ded9";
const partitionKeyStereotypeId = "3a203a3e-116e-4a7c-b375-e690570efc3f";
const stringTypeId = "d384db9c-a279-45e1-801e-e4e8099625f2";

// console.log(`Class (${element.getName()}) :: On Changed
//     isCosmosDbProvider() = ${isCosmosDbProvider()}
//     isAggregateRoot(element) = ${isAggregateRoot(element)}
//     hasSuperClass(element) = ${hasSuperClass(element)}`);

if (!isCosmosDbProvider() || (!isAggregateRoot(element) &amp;&amp; !element.hasStereotype("Table")) || hasSuperClass(element)) { 
    element.getChildren("Attribute")
        .filter(x =&gt; x.hasStereotype(partitionKeyStereotypeId))
        .forEach(x =&gt; {
            x.removeStereotype(partitionKeyStereotypeId);
            x.delete();
        });
    return; 
}

let partitionKey = element.getPackage()?.getStereotype("Cosmos DB Container Settings")?.getProperty("Partition Key")?.value?.trim();
if (partitionKey == "") { partitionKey = null; }

let primaryKeyAttr = element.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"))[0];
if (!partitionKey &amp;&amp; primaryKeyAttr &amp;&amp; !primaryKeyAttr.hasStereotype(partitionKeyStereotypeId)) { 
    primaryKeyAttr.addStereotype(partitionKeyStereotypeId);
    return;
}

if (!partitionKey) { return; }

let possiblePkAttrs = element.getChildren("Attribute").filter(x =&gt; x.getName().toLowerCase() == partitionKey.toLowerCase())
if (possiblePkAttrs.length == 0) {
    let pkAttr = createElement("Attribute", partitionKey, element.id);
    pkAttr.setOrder(1);
    pkAttr.typeReference.setType(stringTypeId);
} else if (! possiblePkAttrs[0].hasStereotype(partitionKeyStereotypeId)) {
    possiblePkAttrs[0].addStereotype(partitionKeyStereotypeId);
}

// === FUNCTIONS ===

function isCosmosDbProvider() {
    return application.getSettings(dbSettingsId)
        ?.getField("Database Provider")
        ?.value == "cosmos";
}

function isAggregateRoot(element) {
    return !element.getAssociations("Association")
        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);
}

function hasSuperClass(element) {
    return element.getAssociations("Generalization")
        .some(x =&gt; x.isTargetEnd());
}

// function getNamingConvention() {
//     return application.getSettings(dbSettingsId)
//         .getField("Key Naming Convention")?.value ?? "pascal-case";
// }</script>
        </macro>
        <macro trigger="on-created">
          <script>const dbSettingsId = "ac0a788e-d8b3-4eea-b56d-538608f1ded9";
const partitionKeyStereotypeId = "3a203a3e-116e-4a7c-b375-e690570efc3f";
const stringTypeId = "d384db9c-a279-45e1-801e-e4e8099625f2";

// console.log(`Class (${element.getName()}) :: On Created
//     isCosmosDbProvider() = ${isCosmosDbProvider()}
//     isAggregateRoot(element) = ${isAggregateRoot(element)}
//     hasSuperClass(element) = ${hasSuperClass(element)}`);

if (!isCosmosDbProvider() || (!isAggregateRoot(element) &amp;&amp; !element.hasStereotype("Table")) || hasSuperClass(element)) { 
    element.getChildren("Attribute")
        .filter(x =&gt; x.hasStereotype(partitionKeyStereotypeId))
        .forEach(x =&gt; {
            x.removeStereotype(partitionKeyStereotypeId);
            x.delete();
        });
    return; 
}

if (! (element.getPackage()?.getStereotype("Cosmos DB Container Settings")?.getProperty("Partition Key"))) { return; }

let partitionKey = element.getPackage().getStereotype("Cosmos DB Container Settings").getProperty("Partition Key").value?.trim();
if (partitionKey == "") { partitionKey = null; }

let primaryKeyAttr = element.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"))[0];
if (!partitionKey &amp;&amp; primaryKeyAttr &amp;&amp; !primaryKeyAttr.hasStereotype(partitionKeyStereotypeId)) { 
    primaryKeyAttr.addStereotype(partitionKeyStereotypeId);
    return;
}

if (!partitionKey) { return; }

let possiblePkAttrs = element.getChildren("Attribute").filter(x =&gt; x.getName() == partitionKey)
if (possiblePkAttrs.length == 0) {
    let pkAttr = createElement("Attribute", partitionKey, element.id);
    pkAttr.setOrder(element.getChildren("Attribute").findIndex(x =&gt; x.hasStereotype("Primary Key")) + 1);
    pkAttr.typeReference.setType(stringTypeId);
} else if (! possiblePkAttrs[0].hasStereotype(partitionKeyStereotypeId)) {
    possiblePkAttrs[0].addStereotype(partitionKeyStereotypeId);
}

// === FUNCTIONS ===

function isCosmosDbProvider() {
    return application.getSettings(dbSettingsId)
        ?.getField("Database Provider")
        ?.value == "cosmos";
}

function isAggregateRoot(element) {
    return ! element.getAssociations("Association")
        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);
}

function hasSuperClass(element) {
    return element.getAssociations("Generalization")
        .some(x =&gt; x.isTargetEnd());
}

function getNamingConvention() {
    return application.getSettings(dbSettingsId)
        .getField("Key Naming Convention")?.value ?? "pascal-case";
}</script>
        </macro>
        <macro trigger="on-loaded">
          <script>const dbSettingsId = "ac0a788e-d8b3-4eea-b56d-538608f1ded9";
const partitionKeyStereotypeId = "3a203a3e-116e-4a7c-b375-e690570efc3f";
const stringTypeId = "d384db9c-a279-45e1-801e-e4e8099625f2";

// console.log(`Class (${element.getName()}) :: On Loaded
//     isCosmosDbProvider() = ${isCosmosDbProvider()}
//     isAggregateRoot(element) = ${isAggregateRoot(element)}
//     hasSuperClass(element) = ${hasSuperClass(element)}`);

if (!isCosmosDbProvider() || (!isAggregateRoot(element) &amp;&amp; !element.hasStereotype("Table")) || hasSuperClass(element)) { 
    element.getChildren("Attribute")
        .filter(x =&gt; x.hasStereotype(partitionKeyStereotypeId))
        .forEach(x =&gt; {
            x.removeStereotype(partitionKeyStereotypeId);
            x.delete();
        });
    return; 
}

let partitionKey = element.getPackage()?.getStereotype("Cosmos DB Container Settings")?.getProperty("Partition Key")?.value?.trim();
if (partitionKey == "") { partitionKey = null; }

let partitionKeyAttributes = element.getChildren("Attribute").filter(x =&gt; x.hasStereotype(partitionKeyStereotypeId));
console.log(`partitionKeyAttributes.length = ${partitionKeyAttributes}`);
if (partitionKeyAttributes.length &gt; 1) {
    partitionKeyAttributes.forEach(x =&gt; x.removeStereotype(partitionKeyStereotypeId));
}

let primaryKeyAttr = element.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"))[0];
if (!partitionKey &amp;&amp; primaryKeyAttr &amp;&amp; !primaryKeyAttr.hasStereotype(partitionKeyStereotypeId)) { 
    primaryKeyAttr.addStereotype(partitionKeyStereotypeId);
    return;
}

if (!partitionKey) { return; }

let possiblePkAttrs = element.getChildren("Attribute").filter(x =&gt; x.getName().toLowerCase() == partitionKey.toLowerCase())
if (possiblePkAttrs.length == 0) {
    let pkAttr = createElement("Attribute", partitionKey, element.id);
    pkAttr.setOrder(1);
    pkAttr.typeReference.setType(stringTypeId);
} else if (! possiblePkAttrs[0].hasStereotype(partitionKeyStereotypeId)) {
    possiblePkAttrs[0].addStereotype(partitionKeyStereotypeId);
}

// === FUNCTIONS ===

function isCosmosDbProvider() {
    return application.getSettings(dbSettingsId)
        ?.getField("Database Provider")
        ?.value == "cosmos";
}

function isAggregateRoot(element) {
    return ! element.getAssociations("Association")
        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);
}

function hasSuperClass(element) {
    return element.getAssociations("Generalization")
        .some(x =&gt; x.isTargetEnd());
}</script>
        </macro>
      </macros>
    </elementExtension>
  </elementExtensions>
  <associationSettings />
  <associationExtensions>
    <associationExtension type="Association" typeId="eaf9ed4e-0b61-4ac1-ba88-09f912c12087">
      <sourceEndExtension>
        <typeReferenceExtension>
          <isRequired>true</isRequired>
          <targetTypes />
          <allowIsNavigable>inherit</allowIsNavigable>
          <allowIsNullable>inherit</allowIsNullable>
          <allowIsCollection>inherit</allowIsCollection>
        </typeReferenceExtension>
      </sourceEndExtension>
      <targetEndExtension>
        <typeReferenceExtension>
          <isRequired>true</isRequired>
          <targetTypes />
          <allowIsNavigable>inherit</allowIsNavigable>
          <allowIsNullable>inherit</allowIsNullable>
          <allowIsCollection>inherit</allowIsCollection>
        </typeReferenceExtension>
      </targetEndExtension>
      <macros>
        <macro trigger="on-created">
          <script>const dbSettingsId = "ac0a788e-d8b3-4eea-b56d-538608f1ded9";
const partitionKeyStereotypeId = "3a203a3e-116e-4a7c-b375-e690570efc3f";
return;
if (!association.isTargetEnd()) { return; } 

let element = association?.typeReference?.getType(); 

if (!element) { return; } 

// console.log(`Association (${element.getName()}) :: On Created
//     isCosmosDbProvider() = ${isCosmosDbProvider()}
//     isAggregateRoot(element) = ${isAggregateRoot(element)}
//     hasSuperClass(element) = ${hasSuperClass(element)}`);

if (!isCosmosDbProvider() || (!isAggregateRoot(element) &amp;&amp; !element.hasStereotype("Table")) || hasSuperClass(element)) { 
    element.getChildren("Attribute")
        .filter(x =&gt; x.hasStereotype(partitionKeyStereotypeId))
        .forEach(x =&gt; {
            x.removeStereotype(partitionKeyStereotypeId);
            x.delete();
        });
    return; 
}

let partitionKey = element.getPackage()?.getStereotype("Cosmos DB Container Settings")?.getProperty("Partition Key")?.value?.trim();
if (partitionKey == "") { partitionKey = null; }

let primaryKeyAttr = element.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"))[0];
if (!partitionKey &amp;&amp; primaryKeyAttr &amp;&amp; !primaryKeyAttr.hasStereotype(partitionKeyStereotypeId)) { 
    primaryKeyAttr.addStereotype(partitionKeyStereotypeId);
    return;
}

if (!partitionKey) { return; }

let attributePartitionKeys = element.getChildren("Attribute").filter(x =&gt; x.getName() == partitionKey);
if (attributePartitionKeys.length == 0) { return; }
if (! attributePartitionKeys[0].hasStereotype(partitionKeyStereotypeId)) {
    attributePartitionKeys[0].addStereotype(partitionKeyStereotypeId);
}

// === FUNCTIONS ===

function isCosmosDbProvider() {
    return application.getSettings(dbSettingsId)
        ?.getField("Database Provider")
        ?.value == "cosmos";
}

function isAggregateRoot(element) {
    return ! element.getAssociations("Association")
        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);
}

function hasSuperClass(element) {
    return element.getAssociations("Generalization")
        .some(x =&gt; x.isSourceEnd());
}

function getNamingConvention() {
    return application.getSettings(dbSettingsId)
        .getField("Key Naming Convention")?.value ?? "pascal-case";
}</script>
        </macro>
      </macros>
    </associationExtension>
    <associationExtension type="Generalization" typeId="5de35973-3ac7-4e65-b48c-385605aec561">
      <sourceEndExtension>
        <typeReferenceExtension>
          <isRequired>true</isRequired>
          <targetTypes />
          <allowIsNavigable>inherit</allowIsNavigable>
          <allowIsNullable>inherit</allowIsNullable>
          <allowIsCollection>inherit</allowIsCollection>
        </typeReferenceExtension>
      </sourceEndExtension>
      <targetEndExtension>
        <typeReferenceExtension>
          <isRequired>true</isRequired>
          <targetTypes />
          <allowIsNavigable>inherit</allowIsNavigable>
          <allowIsNullable>inherit</allowIsNullable>
          <allowIsCollection>inherit</allowIsCollection>
        </typeReferenceExtension>
      </targetEndExtension>
      <macros>
        <macro trigger="on-changed">
          <script>const dbSettingsId = "ac0a788e-d8b3-4eea-b56d-538608f1ded9";
const partitionKeyStereotypeId = "3a203a3e-116e-4a7c-b375-e690570efc3f";
return;

if (!association.isTargetEnd()) { return; } 

let element = association?.typeReference?.getType(); 

if (!element) { return; } 

// console.log(`Generalization (${element.getName()}) :: On Changed
//     isCosmosDbProvider() = ${isCosmosDbProvider()}
//     isAggregateRoot(element) = ${isAggregateRoot(element)}
//     hasSuperClass(element) = ${hasSuperClass(element)}`);

if (!isCosmosDbProvider() || (!isAggregateRoot(element) &amp;&amp; !element.hasStereotype("Table")) || hasSuperClass(element)) { 
    element.getChildren("Attribute")
        .filter(x =&gt; x.hasStereotype(partitionKeyStereotypeId))
        .forEach(x =&gt; {
            x.removeStereotype(partitionKeyStereotypeId);
            x.delete();
        });
    return; 
}

let partitionKey = element.getPackage()?.getStereotype("Cosmos DB Container Settings")?.getProperty("Partition Key")?.value?.trim();
if (partitionKey == "") { partitionKey = null; }

let primaryKeyAttr = element.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"))[0];
if (!partitionKey &amp;&amp; primaryKeyAttr &amp;&amp; !primaryKeyAttr.hasStereotype(partitionKeyStereotypeId)) { 
    primaryKeyAttr.addStereotype(partitionKeyStereotypeId);
    return;
}

if (!partitionKey) { return; }

let attributePartitionKeys = element.getChildren("Attribute").filter(x =&gt; x.getName() == partitionKey);
if (attributePartitionKeys.length == 0) { return; }
if (! attributePartitionKeys[0].hasStereotype(partitionKeyStereotypeId)) {
    attributePartitionKeys[0].addStereotype(partitionKeyStereotypeId);
}

// === FUNCTIONS ===

function isCosmosDbProvider() {
    return application.getSettings(dbSettingsId)
        ?.getField("Database Provider")
        ?.value == "cosmos";
}

function isAggregateRoot(element) {
    return ! element.getAssociations("Association")
        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);
}

function hasSuperClass(element) {
    return element.getAssociations("Generalization")
        .some(x =&gt; x.isTargetEnd());
}

function getNamingConvention() {
    return application.getSettings(dbSettingsId)
        .getField("Key Naming Convention")?.value ?? "pascal-case";
}</script>
        </macro>
      </macros>
    </associationExtension>
  </associationExtensions>
</settings>