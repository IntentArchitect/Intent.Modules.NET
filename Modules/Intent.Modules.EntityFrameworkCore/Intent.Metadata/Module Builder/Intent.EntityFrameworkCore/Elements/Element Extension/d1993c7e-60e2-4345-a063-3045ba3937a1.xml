<?xml version="1.0" encoding="utf-8"?>
<class id="d1993c7e-60e2-4345-a063-3045ba3937a1" type="Element Extension" typeId="e3c7b1ca-f080-45c1-b56f-8d44226c8e20">
  <name>Class Extension</name>
  <display>Class Extension: Class</display>
  <isAbstract>false</isAbstract>
  <sort-children>by-type-then-manually</sort-children>
  <genericTypes />
  <typeReference id="01016564-6c91-44d5-b415-e0217080bb92">
    <typeId>04e12b51-ed12-42a3-9667-a6aa81bb6d10</typeId>
    <isNavigable>true</isNavigable>
    <isNullable>false</isNullable>
    <isCollection>false</isCollection>
    <isRequired>true</isRequired>
    <typePackageName>Intent.Modelers.Domain</typePackageName>
    <typePackageId>6572b98d-5e13-4d4b-9ffc-820057da974e</typePackageId>
    <stereotypes />
    <genericTypeParameters />
  </typeReference>
  <isMapped>false</isMapped>
  <parentFolderId>78be924b-a4c6-40f9-ac4e-103fd8f17ce0</parentFolderId>
  <packageId>a9d2a398-04e4-4300-9fbb-768568c65f9e</packageId>
  <packageName>Intent.EntityFrameworkCore</packageName>
  <stereotypes>
    <stereotype stereotypeDefinitionId="159cbc8e-a910-40f7-8e45-3edadbb863c2" name="Type Reference Extension Settings">
      <addedByDefault>true</addedByDefault>
      <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
      <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
      <properties>
        <property name="35226a83-3965-4224-8aef-20c68a0c5180" display="Mode" value="Inherit" isActive="true" />
        <property name="7d3859d4-084d-4ff0-8b31-850b4a8f8cd0" display="Display Name" isActive="false" />
        <property name="17223dbd-8df0-4700-8b81-02274ca3ed7f" display="Hint" isActive="false" />
        <property name="b2cef034-5706-45d2-8554-f4dc582a18ff" display="Target Types" isActive="false" />
        <property name="08ec0581-c90a-489b-858f-ee265327c948" display="Target Traits" isActive="true" />
        <property name="93e4efa9-186d-4e88-ae0a-491bcd6e6f5e" display="Default Type Id" isActive="false" />
        <property name="7a0c4185-1c08-4d3e-9185-14683d7a3bd0" display="Allow Collection" value="Inherit" isActive="false" />
        <property name="e3dc90ec-4f5f-4f20-b271-e28a5094dc91" display="Allow Nullable" value="Inherit" isActive="false" />
      </properties>
    </stereotype>
    <stereotype stereotypeDefinitionId="312eab00-f6db-492e-bbb4-e41383c8d3d8" name="Extension Settings">
      <addedByDefault>true</addedByDefault>
      <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
      <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
      <properties>
        <property name="8c964307-9d03-4a14-9fd3-40ea2607955a" display="Display Text Function" value="" isActive="true" />
        <property name="996ed45f-2318-4587-9618-73db3d7cfed0" display="Validate Function" value="/// &lt;reference path=&quot;../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;function getSurrogateKeyType() {&#xD;&#xA;    var _a, _b, _c;&#xD;&#xA;    const commonTypes = {&#xD;&#xA;        guid: &quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;,&#xD;&#xA;        long: &quot;33013006-E404-48C2-AC46-24EF5A5774FD&quot;,&#xD;&#xA;        int: &quot;fb0a362d-e9e2-40de-b6ff-5ce8167cbe74&quot;&#xD;&#xA;    };&#xD;&#xA;    const javaTypes = {&#xD;&#xA;        long: &quot;e9e575eb-f8de-4ce4-9838-2d09665a752d&quot;,&#xD;&#xA;        int: &quot;b3e5cb3b-8a26-4346-810b-9789afa25a82&quot;&#xD;&#xA;    };&#xD;&#xA;    const typeNameToIdMap = new Map();&#xD;&#xA;    typeNameToIdMap.set(&quot;guid&quot;, commonTypes.guid);&#xD;&#xA;    typeNameToIdMap.set(&quot;int&quot;, lookup(javaTypes.int) != null ? javaTypes.int : commonTypes.int);&#xD;&#xA;    typeNameToIdMap.set(&quot;long&quot;, lookup(javaTypes.long) != null ? javaTypes.long : commonTypes.long);&#xD;&#xA;    let typeName = (_c = (_b = (_a = application.getSettings(&quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;)) === null || _a === void 0 ? void 0 : _a.getField(&quot;Key Type&quot;)) === null || _b === void 0 ? void 0 : _b.value) !== null &amp;&amp; _c !== void 0 ? _c : &quot;int&quot;;&#xD;&#xA;    if (typeNameToIdMap.has(typeName)) {&#xD;&#xA;        return typeNameToIdMap.get(typeName);&#xD;&#xA;    }&#xD;&#xA;    return typeNameToIdMap.get(&quot;guid&quot;);&#xD;&#xA;}&#xD;&#xA;;&#xD;&#xA;/// &lt;reference path=&quot;getSurrogateKeyType.ts&quot;/&gt;&#xD;&#xA;/// &lt;reference path=&quot;attributeWithMapPath.ts&quot;/&gt;&#xD;&#xA;class DomainHelper {&#xD;&#xA;    static isAggregateRoot(element) {&#xD;&#xA;        let result = !element.getAssociations(&quot;Association&quot;)&#xD;&#xA;            .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);&#xD;&#xA;        return result;&#xD;&#xA;    }&#xD;&#xA;    static getCommandOperations(entity) {&#xD;&#xA;        const queryOperationNames = [&quot;Get&quot;, &quot;Find&quot;, &quot;Filter&quot;, &quot;Query&quot;, &quot;Is&quot;, &quot;Must&quot;, &quot;Can&quot;];&#xD;&#xA;        const operations = entity.getChildren(&quot;Operation&quot;).filter(operation =&gt; operation.typeReference.getType() == null ||&#xD;&#xA;            !queryOperationNames.some(allowedOperationName =&gt; operation.getName().startsWith(allowedOperationName)));&#xD;&#xA;        return operations;&#xD;&#xA;    }&#xD;&#xA;    static isComplexType(element) {&#xD;&#xA;        return (element === null || element === void 0 ? void 0 : element.specialization) === &quot;Data Contract&quot; ||&#xD;&#xA;            (element === null || element === void 0 ? void 0 : element.specialization) === &quot;Value Object&quot; ||&#xD;&#xA;            (element === null || element === void 0 ? void 0 : element.specialization) === &quot;Class&quot;;&#xD;&#xA;    }&#xD;&#xA;    static isComplexTypeById(typeId) {&#xD;&#xA;        let element = lookup(typeId);&#xD;&#xA;        return DomainHelper.isComplexType(element);&#xD;&#xA;    }&#xD;&#xA;    static getOwningAggregate(entity) {&#xD;&#xA;        var _a;&#xD;&#xA;        if (!entity || entity.specialization != &quot;Class&quot;) {&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;        let invalidAssociations = entity.getAssociations(&quot;Association&quot;).filter(x =&gt; x.typeReference.getType() == null);&#xD;&#xA;        if (invalidAssociations.length &gt; 0) {&#xD;&#xA;            console.warn(&quot;Invalid associations found:&quot;);&#xD;&#xA;            invalidAssociations.forEach(x =&gt; {&#xD;&#xA;                console.warn(&quot;Invalid associations: &quot; + x.getName());&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;        let result = (_a = entity.getAssociations(&quot;Association&quot;)&#xD;&#xA;            .filter(x =&gt; this.isAggregateRoot(x.typeReference.getType()) &amp;&amp; isOwnedBy(x) &amp;&amp;&#xD;&#xA;            // Let's only target collections for now as part of the nested compositional crud support&#xD;&#xA;            // as one-to-one relationships are more expensive to address and possibly not going to&#xD;&#xA;            // be needed.&#xD;&#xA;            x.getOtherEnd().typeReference.isCollection)[0]) === null || _a === void 0 ? void 0 : _a.typeReference.getType();&#xD;&#xA;        return result;&#xD;&#xA;        function isOwnedBy(association) {&#xD;&#xA;            return association.isSourceEnd() &amp;&amp;&#xD;&#xA;                !association.typeReference.isNullable &amp;&amp;&#xD;&#xA;                !association.typeReference.isCollection;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    static ownerIsAggregateRoot(entity) {&#xD;&#xA;        let result = DomainHelper.getOwningAggregate(entity);&#xD;&#xA;        return result ? true : false;&#xD;&#xA;    }&#xD;&#xA;    static hasPrimaryKey(entity) {&#xD;&#xA;        let keys = entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;        return keys.length &gt; 0;&#xD;&#xA;    }&#xD;&#xA;    static getPrimaryKeys(entity) {&#xD;&#xA;        if (!entity) {&#xD;&#xA;            throw new Error(&quot;entity not specified&quot;);&#xD;&#xA;        }&#xD;&#xA;        let primaryKeys = DomainHelper.getPrimaryKeysMap(entity);&#xD;&#xA;        return Object.values(primaryKeys);&#xD;&#xA;    }&#xD;&#xA;    static isUserSuppliedPrimaryKey(pk) {&#xD;&#xA;        if (pk == null)&#xD;&#xA;            return false;&#xD;&#xA;        if (!pk.hasStereotype(&quot;Primary Key&quot;))&#xD;&#xA;            return false;&#xD;&#xA;        var pkStereotype = pk.getStereotype(&quot;Primary Key&quot;);&#xD;&#xA;        if (!pkStereotype.hasProperty(&quot;Data source&quot;)) {&#xD;&#xA;            return false;&#xD;&#xA;        }&#xD;&#xA;        return pkStereotype.getProperty(&quot;Data source&quot;).value == &quot;User supplied&quot;;&#xD;&#xA;    }&#xD;&#xA;    static getPrimaryKeysMap(entity) {&#xD;&#xA;        let keydict = Object.create(null);&#xD;&#xA;        let keys = entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;        keys.forEach(key =&gt; keydict[key.id] = {&#xD;&#xA;            id: key.id,&#xD;&#xA;            name: key.getName(),&#xD;&#xA;            typeId: key.typeReference.typeId,&#xD;&#xA;            mapPath: [key.id],&#xD;&#xA;            isNullable: false,&#xD;&#xA;            isCollection: false&#xD;&#xA;        });&#xD;&#xA;        traverseInheritanceHierarchyForPrimaryKeys(keydict, entity, []);&#xD;&#xA;        return keydict;&#xD;&#xA;        function traverseInheritanceHierarchyForPrimaryKeys(keydict, curEntity, generalizationStack) {&#xD;&#xA;            if (!curEntity) {&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            let generalizations = curEntity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;            if (generalizations.length == 0) {&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            let generalization = generalizations[0];&#xD;&#xA;            generalizationStack.push(generalization.id);&#xD;&#xA;            let nextEntity = generalization.typeReference.getType();&#xD;&#xA;            let baseKeys = nextEntity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;            baseKeys.forEach(key =&gt; {&#xD;&#xA;                keydict[key.id] = {&#xD;&#xA;                    id: key.id,&#xD;&#xA;                    name: key.getName(),&#xD;&#xA;                    typeId: key.typeReference.typeId,&#xD;&#xA;                    mapPath: generalizationStack.concat([key.id]),&#xD;&#xA;                    isNullable: key.typeReference.isNullable,&#xD;&#xA;                    isCollection: key.typeReference.isCollection&#xD;&#xA;                };&#xD;&#xA;            });&#xD;&#xA;            traverseInheritanceHierarchyForPrimaryKeys(keydict, nextEntity, generalizationStack);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    static getForeignKeys(entity, owningAggregate) {&#xD;&#xA;        var _a;&#xD;&#xA;        if (!entity) {&#xD;&#xA;            throw new Error(&quot;entity not specified&quot;);&#xD;&#xA;        }&#xD;&#xA;        if (!owningAggregate) {&#xD;&#xA;            throw new Error(&quot;nestedCompOwner not specified&quot;);&#xD;&#xA;        }&#xD;&#xA;        // Use the new Associated property on the FK stereotype method for FK Attribute lookup&#xD;&#xA;        let foreignKeys = [];&#xD;&#xA;        for (let attr of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Foreign Key&quot;))) {&#xD;&#xA;            let associationId = (_a = attr.getStereotype(&quot;Foreign Key&quot;).getProperty(&quot;Association&quot;)) === null || _a === void 0 ? void 0 : _a.getValue();&#xD;&#xA;            if (owningAggregate.getAssociations(&quot;Association&quot;).some(x =&gt; x.id == associationId)) {&#xD;&#xA;                foreignKeys.push(attr);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        // Backward compatible lookup method&#xD;&#xA;        if (foreignKeys.length == 0) {&#xD;&#xA;            let foundFk = entity.getChildren(&quot;Attribute&quot;)&#xD;&#xA;                .filter(x =&gt; x.getName().toLowerCase().indexOf(owningAggregate.getName().toLowerCase()) &gt;= 0 &amp;&amp; x.hasStereotype(&quot;Foreign Key&quot;))[0];&#xD;&#xA;            if (foundFk) {&#xD;&#xA;                foreignKeys.push(foundFk);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return foreignKeys.map(x =&gt; ({&#xD;&#xA;            name: DomainHelper.getAttributeNameFormat(x.getName()),&#xD;&#xA;            typeId: x.typeReference.typeId,&#xD;&#xA;            id: x.id,&#xD;&#xA;            mapPath: [x.id],&#xD;&#xA;            isCollection: x.typeReference.isCollection,&#xD;&#xA;            isNullable: x.typeReference.isNullable,&#xD;&#xA;            element: x&#xD;&#xA;        }));&#xD;&#xA;    }&#xD;&#xA;    /**&#xD;&#xA;     * Returns true if the attribute is a foreign key on a compositional one-to-many relationship (i.e. is managed by the DB and should not be set).&#xD;&#xA;     * @param attribute&#xD;&#xA;     * @returns&#xD;&#xA;     */&#xD;&#xA;    static isManagedForeignKey(attribute) {&#xD;&#xA;        var _a, _b;&#xD;&#xA;        let fkAssociation = (_b = (_a = attribute.getStereotype(&quot;Foreign Key&quot;)) === null || _a === void 0 ? void 0 : _a.getProperty(&quot;Association&quot;)) === null || _b === void 0 ? void 0 : _b.getSelected();&#xD;&#xA;        return fkAssociation != null &amp;&amp; !fkAssociation.getOtherEnd().typeReference.getIsCollection() &amp;&amp; !fkAssociation.getOtherEnd().typeReference.getIsNullable();&#xD;&#xA;    }&#xD;&#xA;    static getChildrenOfType(entity, type) {&#xD;&#xA;        let attrDict = Object.create(null);&#xD;&#xA;        let attributes = entity.getChildren(type);&#xD;&#xA;        attributes.forEach(attr =&gt; attrDict[attr.id] = {&#xD;&#xA;            id: attr.id,&#xD;&#xA;            name: attr.getName(),&#xD;&#xA;            typeId: attr.typeReference.typeId,&#xD;&#xA;            mapPath: [attr.id],&#xD;&#xA;            isNullable: attr.typeReference.isNullable,&#xD;&#xA;            isCollection: attr.typeReference.isCollection&#xD;&#xA;        });&#xD;&#xA;        return Object.values(attrDict);&#xD;&#xA;    }&#xD;&#xA;    static getAttributesWithMapPath(entity) {&#xD;&#xA;        let attrDict = Object.create(null);&#xD;&#xA;        let attributes = entity&#xD;&#xA;            .getChildren(&quot;Attribute&quot;)&#xD;&#xA;            .filter(x =&gt; {&#xD;&#xA;            var _a;&#xD;&#xA;            return !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp;&#xD;&#xA;                !DomainHelper.legacyPartitionKey(x) &amp;&amp;&#xD;&#xA;                (x[&quot;hasMetadata&quot;] &amp;&amp; (!x.hasMetadata(&quot;set-by-infrastructure&quot;) || ((_a = x.getMetadata(&quot;set-by-infrastructure&quot;)) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) != &quot;true&quot;));&#xD;&#xA;        });&#xD;&#xA;        attributes.forEach(attr =&gt; attrDict[attr.id] = {&#xD;&#xA;            id: attr.id,&#xD;&#xA;            name: attr.getName(),&#xD;&#xA;            typeId: attr.typeReference.typeId,&#xD;&#xA;            mapPath: [attr.id],&#xD;&#xA;            isNullable: false,&#xD;&#xA;            isCollection: false&#xD;&#xA;        });&#xD;&#xA;        traverseInheritanceHierarchyForAttributes(attrDict, entity, []);&#xD;&#xA;        return Object.values(attrDict);&#xD;&#xA;        function traverseInheritanceHierarchyForAttributes(attrDict, curEntity, generalizationStack) {&#xD;&#xA;            if (!curEntity) {&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            let generalizations = curEntity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;            if (generalizations.length == 0) {&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            let generalization = generalizations[0];&#xD;&#xA;            generalizationStack.push(generalization.id);&#xD;&#xA;            let nextEntity = generalization.typeReference.getType();&#xD;&#xA;            let baseKeys = nextEntity.getChildren(&quot;Attribute&quot;).filter(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp; !DomainHelper.legacyPartitionKey(x));&#xD;&#xA;            baseKeys.forEach(attr =&gt; {&#xD;&#xA;                attrDict[attr.id] = {&#xD;&#xA;                    id: attr.id,&#xD;&#xA;                    name: attr.getName(),&#xD;&#xA;                    typeId: attr.typeReference.typeId,&#xD;&#xA;                    mapPath: generalizationStack.concat([attr.id]),&#xD;&#xA;                    isNullable: attr.typeReference.isNullable,&#xD;&#xA;                    isCollection: attr.typeReference.isCollection&#xD;&#xA;                };&#xD;&#xA;            });&#xD;&#xA;            traverseInheritanceHierarchyForAttributes(attrDict, nextEntity, generalizationStack);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    static getMandatoryAssociationsWithMapPath(entity) {&#xD;&#xA;        return traverseInheritanceHierarchy(entity, [], []);&#xD;&#xA;        function traverseInheritanceHierarchy(entity, results, generalizationStack) {&#xD;&#xA;            entity&#xD;&#xA;                .getAssociations(&quot;Association&quot;)&#xD;&#xA;                .filter(x =&gt; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable &amp;&amp; x.typeReference.isNavigable &amp;&amp;&#xD;&#xA;                !x.getOtherEnd().typeReference.isCollection &amp;&amp; !x.getOtherEnd().typeReference.isNullable)&#xD;&#xA;                .forEach(association =&gt; {&#xD;&#xA;                return results.push({&#xD;&#xA;                    id: association.id,&#xD;&#xA;                    name: association.getName(),&#xD;&#xA;                    typeId: null,&#xD;&#xA;                    mapPath: generalizationStack.concat([association.id]),&#xD;&#xA;                    isNullable: false,&#xD;&#xA;                    isCollection: false&#xD;&#xA;                });&#xD;&#xA;            });&#xD;&#xA;            let generalizations = entity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;            if (generalizations.length == 0) {&#xD;&#xA;                return results;&#xD;&#xA;            }&#xD;&#xA;            let generalization = generalizations[0];&#xD;&#xA;            generalizationStack.push(generalization.id);&#xD;&#xA;            return traverseInheritanceHierarchy(generalization.typeReference.getType(), results, generalizationStack);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    static getAttributeNameFormat(str) {&#xD;&#xA;        let convention = DomainHelper.getDomainAttributeNamingConvention();&#xD;&#xA;        switch (convention) {&#xD;&#xA;            case &quot;pascal-case&quot;:&#xD;&#xA;                return toPascalCase(str);&#xD;&#xA;            case &quot;camel-case&quot;:&#xD;&#xA;                return toCamelCase(str);&#xD;&#xA;        }&#xD;&#xA;        return str;&#xD;&#xA;    }&#xD;&#xA;    static getDomainAttributeNamingConvention() {&#xD;&#xA;        var _a, _b, _c;&#xD;&#xA;        const domainSettingsId = &quot;c4d1e35c-7c0d-4926-afe0-18f17563ce17&quot;;&#xD;&#xA;        return (_c = (_b = (_a = application.getSettings(domainSettingsId)) === null || _a === void 0 ? void 0 : _a.getField(&quot;Attribute Naming Convention&quot;)) === null || _b === void 0 ? void 0 : _b.value) !== null &amp;&amp; _c !== void 0 ? _c : &quot;pascal-case&quot;;&#xD;&#xA;    }&#xD;&#xA;    static getSurrogateKeyType() {&#xD;&#xA;        return getSurrogateKeyType();&#xD;&#xA;    }&#xD;&#xA;    // Just in case someone still uses this convention. Used to filter out those attributes when mapping&#xD;&#xA;    // to domain entities that are within a Cosmos DB paradigm.&#xD;&#xA;    static legacyPartitionKey(attribute) {&#xD;&#xA;        return attribute.hasStereotype(&quot;Partition Key&quot;) &amp;&amp; attribute.getName() === &quot;PartitionKey&quot;;&#xD;&#xA;    }&#xD;&#xA;    static requiresForeignKey(associationEnd) {&#xD;&#xA;        return DomainHelper.isManyToVariantsOfOne(associationEnd) || DomainHelper.isSelfReferencingZeroToOne(associationEnd);&#xD;&#xA;    }&#xD;&#xA;    static isManyToVariantsOfOne(associationEnd) {&#xD;&#xA;        return !associationEnd.typeReference.isCollection &amp;&amp; associationEnd.getOtherEnd().typeReference.isCollection;&#xD;&#xA;    }&#xD;&#xA;    static isSelfReferencingZeroToOne(associationEnd) {&#xD;&#xA;        return !associationEnd.typeReference.isCollection &amp;&amp; associationEnd.typeReference.isNullable &amp;&amp;&#xD;&#xA;            associationEnd.typeReference.typeId == associationEnd.getOtherEnd().typeReference.typeId;&#xD;&#xA;    }&#xD;&#xA;    static getOwningAggregateRecursive(entity) {&#xD;&#xA;        let owners = DomainHelper.getOwnersRecursive(entity);&#xD;&#xA;        if (owners.length == 0)&#xD;&#xA;            return null;&#xD;&#xA;        const uniqueIds = new Set(owners.map(item =&gt; item.id));&#xD;&#xA;        if (uniqueIds.size !== 1) {&#xD;&#xA;            throw new Error(`Entity : '${entity.getName()}' has more than 1 owner.`);&#xD;&#xA;        }&#xD;&#xA;        return owners[0];&#xD;&#xA;    }&#xD;&#xA;    static getOwnersRecursive(entity) {&#xD;&#xA;        if (!entity || entity.specialization != &quot;Class&quot;) {&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;        let results = entity.getAssociations(&quot;Association&quot;).filter(x =&gt; DomainHelper.isOwnedByAssociation(x));&#xD;&#xA;        let result = [];&#xD;&#xA;        for (let i = 0; i &lt; results.length; i++) {&#xD;&#xA;            let owner = results[i].typeReference.getType();&#xD;&#xA;            if (DomainHelper.isAggregateRoot(owner)) {&#xD;&#xA;                result.push(owner);&#xD;&#xA;            }&#xD;&#xA;            else {&#xD;&#xA;                result.push(...DomainHelper.getOwnersRecursive(owner));&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return result;&#xD;&#xA;    }&#xD;&#xA;    static isOwnedByAssociation(association) {&#xD;&#xA;        return association.isSourceEnd() &amp;&amp;&#xD;&#xA;            !association.typeReference.isNullable &amp;&amp;&#xD;&#xA;            !association.typeReference.isCollection;&#xD;&#xA;    }&#xD;&#xA;    static getOwningAggregateKeyChain(entity) {&#xD;&#xA;        if (!entity || entity.specialization != &quot;Class&quot;) {&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;        let results = entity.getAssociations(&quot;Association&quot;).filter(x =&gt; DomainHelper.isOwnedByAssociation(x));&#xD;&#xA;        let result = [];&#xD;&#xA;        if (results.length == 0)&#xD;&#xA;            return result;&#xD;&#xA;        let owner = results[0].typeReference.getType();&#xD;&#xA;        let pks = DomainHelper.getPrimaryKeys(owner);&#xD;&#xA;        pks.forEach(pk =&gt; {&#xD;&#xA;            let attribute = lookup(pk.id);&#xD;&#xA;            //expectedName would typically be CountryId if you have a Agg: Country with a Pk: Id&#xD;&#xA;            let expectedName = attribute.getParent().getName();&#xD;&#xA;            if (!attribute.getName().startsWith(expectedName)) {&#xD;&#xA;                expectedName += attribute.getName();&#xD;&#xA;            }&#xD;&#xA;            else {&#xD;&#xA;                expectedName = attribute.getName();&#xD;&#xA;            }&#xD;&#xA;            result.push({ attribute: attribute, expectedName: expectedName });&#xD;&#xA;        });&#xD;&#xA;        if (!DomainHelper.isAggregateRoot(owner)) {&#xD;&#xA;            result.unshift(...DomainHelper.getOwningAggregateKeyChain(owner));&#xD;&#xA;        }&#xD;&#xA;        return result;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../../common/domainHelper.ts&quot; /&gt;&#xD;&#xA;// Check composite only has 1 owner&#xD;&#xA;const dbSettingsId = &quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;;&#xD;&#xA;function validateDomainEntity(entity) {&#xD;&#xA;    if (!entity.getPackage().hasStereotype(&quot;Relational Database&quot;)) {&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;    if (isCosmosDbProvider() || DomainHelper.isAggregateRoot(element)) {&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;    let owners = DomainHelper.getOwnersRecursive(entity);&#xD;&#xA;    if (owners.length &gt; 1) {&#xD;&#xA;        let ownersDescription = owners.map(item =&gt; item.getName()).join(&quot;, &quot;);&#xD;&#xA;        return `Entity has multiple owners. The entity '${entity.getName()}' has multiple owners. [${ownersDescription}].&#xD;&#xA;Compositional entities (black diamond) must have 1 owner. Please adjust the associations accordingly.`;&#xD;&#xA;    }&#xD;&#xA;    return null;&#xD;&#xA;}&#xD;&#xA;function isCosmosDbProvider() {&#xD;&#xA;    var _a, _b;&#xD;&#xA;    return ((_b = (_a = application.getSettings(dbSettingsId)) === null || _a === void 0 ? void 0 : _a.getField(&quot;Database Provider&quot;)) === null || _b === void 0 ? void 0 : _b.value) == &quot;cosmos&quot;;&#xD;&#xA;}&#xD;&#xA;return validateDomainEntity(element);&#xD;&#xA;//validateDomainEntity(element);&#xD;&#xA;" isActive="true" />
      </properties>
    </stereotype>
  </stereotypes>
  <metadata />
  <childElements>
    <childElement id="3bf274e9-35e7-4f4d-adb8-adcee426ac13" type="Element Event Settings" typeId="3c628ab0-2407-4fb0-8507-ddde986cff2e">
      <name>NewElementEventSettings</name>
      <display>[events]</display>
      <isAbstract>false</isAbstract>
      <sort-children>by-type-then-by-name</sort-children>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>d1993c7e-60e2-4345-a063-3045ba3937a1</parentFolderId>
      <packageId>a9d2a398-04e4-4300-9fbb-768568c65f9e</packageId>
      <packageName>Intent.EntityFrameworkCore</packageName>
      <stereotypes />
      <metadata />
      <childElements>
        <childElement id="10aaa1c2-82ab-404d-91b1-da880952f158" type="Element Event Handler" typeId="0ef412e3-d15a-45d3-bcd3-f646165f2eb6">
          <name>On Changed</name>
          <display>On Changed: Inline Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="a4b142f5-8ce4-4487-bae6-02b013e7fdcb">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>3bf274e9-35e7-4f4d-adb8-adcee426ac13</parentFolderId>
          <packageId>a9d2a398-04e4-4300-9fbb-768568c65f9e</packageId>
          <packageName>Intent.EntityFrameworkCore</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="const dbSettingsId = &quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;;&#xD;&#xA;const partitionKeyStereotypeId = &quot;3a203a3e-116e-4a7c-b375-e690570efc3f&quot;;&#xD;&#xA;const stringTypeId = &quot;d384db9c-a279-45e1-801e-e4e8099625f2&quot;;&#xD;&#xA;&#xD;&#xA;// console.log(`Class (${element.getName()}) :: On Changed&#xD;&#xA;//     isCosmosDbProvider() = ${isCosmosDbProvider()}&#xD;&#xA;//     isAggregateRoot(element) = ${isAggregateRoot(element)}&#xD;&#xA;//     hasSuperClass(element) = ${hasSuperClass(element)}`);&#xD;&#xA;&#xD;&#xA;if (element.getPackage().specialization !== &quot;Domain Package&quot;) {&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if (!isCosmosDbProvider() || (!isAggregateRoot(element) &amp;&amp; !element.hasStereotype(&quot;Table&quot;)) || hasSuperClass(element)) { &#xD;&#xA;    element.getChildren(&quot;Attribute&quot;)&#xD;&#xA;        .filter(x =&gt; x.hasStereotype(partitionKeyStereotypeId))&#xD;&#xA;        .forEach(x =&gt; {&#xD;&#xA;            x.removeStereotype(partitionKeyStereotypeId);&#xD;&#xA;            x.delete();&#xD;&#xA;        });&#xD;&#xA;    return; &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;let partitionKey = getNearestCosmosDbContainerSettings(element)?.getProperty(&quot;Partition Key&quot;)?.value?.trim();&#xD;&#xA;console.log(`partitionKey = ${partitionKey}`);&#xD;&#xA;if (partitionKey == &quot;&quot;) { partitionKey = null; }&#xD;&#xA;&#xD;&#xA;let primaryKeyAttr = element.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;))[0];&#xD;&#xA;if (!partitionKey &amp;&amp; primaryKeyAttr &amp;&amp; !primaryKeyAttr.hasStereotype(partitionKeyStereotypeId)) { &#xD;&#xA;    element.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(partitionKeyStereotypeId)).forEach(x =&gt; x.removeStereotype(partitionKeyStereotypeId));&#xD;&#xA;    primaryKeyAttr.addStereotype(partitionKeyStereotypeId);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if (!partitionKey) { return; }&#xD;&#xA;&#xD;&#xA;managePartitionKey(element, partitionKey);&#xD;&#xA;&#xD;&#xA;// === FUNCTIONS ===&#xD;&#xA;&#xD;&#xA;function managePartitionKey(clazz, partitionKey) {&#xD;&#xA;    let possiblePartKeyAttrs = clazz.getChildren(&quot;Attribute&quot;)&#xD;&#xA;        .filter(x =&gt; x.hasStereotype(partitionKeyStereotypeId) || x.getName().toLowerCase() == partitionKey.toLowerCase())&#xD;&#xA;    if (possiblePartKeyAttrs.length == 0) {&#xD;&#xA;        let pkAttr = createElement(&quot;Attribute&quot;, partitionKey, clazz.id);&#xD;&#xA;        pkAttr.setOrder(1);&#xD;&#xA;        pkAttr.typeReference.setType(stringTypeId);&#xD;&#xA;        // Attribute events will add Part Key stereotype&#xD;&#xA;    } else if (&#xD;&#xA;        possiblePartKeyAttrs.length == 1 &amp;&amp; &#xD;&#xA;        possiblePartKeyAttrs[0].hasStereotype(partitionKeyStereotypeId) &amp;&amp;&#xD;&#xA;        ! possiblePartKeyAttrs[0].hasStereotype(&quot;Primary Key&quot;)&#xD;&#xA;        ) {&#xD;&#xA;            possiblePartKeyAttrs[0].setName(partitionKey);&#xD;&#xA;    } else {&#xD;&#xA;        clazz.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(partitionKeyStereotypeId)).forEach(x =&gt; x.removeStereotype(partitionKeyStereotypeId));&#xD;&#xA;        let possiblePartKeyAttrs = clazz.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.getName().toLowerCase() == partitionKey.toLowerCase());&#xD;&#xA;        if (possiblePartKeyAttrs.length == 0) {&#xD;&#xA;            let pkAttr = createElement(&quot;Attribute&quot;, partitionKey, clazz.id);&#xD;&#xA;            pkAttr.setOrder(1);&#xD;&#xA;            pkAttr.typeReference.setType(stringTypeId);&#xD;&#xA;            // Attribute events will add Part Key stereotype&#xD;&#xA;        } else if (! possiblePartKeyAttrs[0].hasStereotype(partitionKeyStereotypeId)) {&#xD;&#xA;            possiblePartKeyAttrs[0].addStereotype(partitionKeyStereotypeId);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getNearestCosmosDbContainerSettings(clazz) {&#xD;&#xA;    let stereotype;&#xD;&#xA;    let current = clazz;&#xD;&#xA;    do&#xD;&#xA;    {&#xD;&#xA;        stereotype = current.getStereotype(&quot;Cosmos DB Container Settings&quot;);&#xD;&#xA;        if (stereotype) {&#xD;&#xA;            return stereotype;&#xD;&#xA;        }&#xD;&#xA;        current = current.getParent();&#xD;&#xA;    } while (current);&#xD;&#xA;&#xD;&#xA;    stereotype = clazz.getPackage()?.getStereotype(&quot;Cosmos DB Container Settings&quot;);&#xD;&#xA;    if (stereotype) {&#xD;&#xA;        return stereotype;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return null;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function isCosmosDbProvider() {&#xD;&#xA;    return application.getSettings(dbSettingsId)&#xD;&#xA;        ?.getField(&quot;Database Provider&quot;)&#xD;&#xA;        ?.value == &quot;cosmos&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function isAggregateRoot(element) {&#xD;&#xA;    return !element.getAssociations(&quot;Association&quot;)&#xD;&#xA;        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function hasSuperClass(element) {&#xD;&#xA;    return element.getAssociations(&quot;Generalization&quot;)&#xD;&#xA;        .some(x =&gt; x.isTargetEnd());&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// function getNamingConvention() {&#xD;&#xA;//     return application.getSettings(dbSettingsId)&#xD;&#xA;//         .getField(&quot;Key Naming Convention&quot;)?.value ?? &quot;pascal-case&quot;;&#xD;&#xA;// }" isActive="true" />
                <property name="7df9c3b9-91a0-4cb7-bc3a-15d72f160054" display="Dependencies" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
        <childElement id="8e83c179-4e80-4bd9-b1fc-b0e512d59c60" type="Element Event Handler" typeId="0ef412e3-d15a-45d3-bcd3-f646165f2eb6">
          <name>On Created</name>
          <display>On Created: Inline Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="c368a9b5-2fdb-477b-8780-6fc9353e0d88">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>3bf274e9-35e7-4f4d-adb8-adcee426ac13</parentFolderId>
          <packageId>a9d2a398-04e4-4300-9fbb-768568c65f9e</packageId>
          <packageName>Intent.EntityFrameworkCore</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="const dbSettingsId = &quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;;&#xD;&#xA;const partitionKeyStereotypeId = &quot;3a203a3e-116e-4a7c-b375-e690570efc3f&quot;;&#xD;&#xA;const stringTypeId = &quot;d384db9c-a279-45e1-801e-e4e8099625f2&quot;;&#xD;&#xA;&#xD;&#xA;// console.log(`Class (${element.getName()}) :: On Created&#xD;&#xA;//     isCosmosDbProvider() = ${isCosmosDbProvider()}&#xD;&#xA;//     isAggregateRoot(element) = ${isAggregateRoot(element)}&#xD;&#xA;//     hasSuperClass(element) = ${hasSuperClass(element)}`);&#xD;&#xA;&#xD;&#xA;if (element.getPackage().specialization !== &quot;Domain Package&quot;) {&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if (!isCosmosDbProvider() || (!isAggregateRoot(element) &amp;&amp; !element.hasStereotype(&quot;Table&quot;)) || hasSuperClass(element)) { &#xD;&#xA;    element.getChildren(&quot;Attribute&quot;)&#xD;&#xA;        .filter(x =&gt; x.hasStereotype(partitionKeyStereotypeId))&#xD;&#xA;        .forEach(x =&gt; {&#xD;&#xA;            x.removeStereotype(partitionKeyStereotypeId);&#xD;&#xA;            x.delete();&#xD;&#xA;        });&#xD;&#xA;    return; &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;let cosmosDbContainerSettingsStereotype = getNearestCosmosDbContainerSettings();&#xD;&#xA;if (! (cosmosDbContainerSettingsStereotype?.getProperty(&quot;Partition Key&quot;))) { return; }&#xD;&#xA;&#xD;&#xA;let partitionKey = cosmosDbContainerSettingsStereotype.getProperty(&quot;Partition Key&quot;).value?.trim();&#xD;&#xA;if (partitionKey == &quot;&quot;) { partitionKey = null; }&#xD;&#xA;&#xD;&#xA;let primaryKeyAttr = element.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;))[0];&#xD;&#xA;if (!partitionKey &amp;&amp; primaryKeyAttr &amp;&amp; !primaryKeyAttr.hasStereotype(partitionKeyStereotypeId)) { &#xD;&#xA;    primaryKeyAttr.addStereotype(partitionKeyStereotypeId);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if (!partitionKey) { return; }&#xD;&#xA;&#xD;&#xA;let possiblePkAttrs = element.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.getName() == partitionKey)&#xD;&#xA;if (possiblePkAttrs.length == 0) {&#xD;&#xA;    let pkAttr = createElement(&quot;Attribute&quot;, partitionKey, element.id);&#xD;&#xA;    pkAttr.setOrder(element.getChildren(&quot;Attribute&quot;).findIndex(x =&gt; x.hasStereotype(&quot;Primary Key&quot;)) + 1);&#xD;&#xA;    pkAttr.typeReference.setType(stringTypeId);&#xD;&#xA;} else if (! possiblePkAttrs[0].hasStereotype(partitionKeyStereotypeId)) {&#xD;&#xA;    possiblePkAttrs[0].addStereotype(partitionKeyStereotypeId);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// === FUNCTIONS ===&#xD;&#xA;&#xD;&#xA;function getNearestCosmosDbContainerSettings(clazz) {&#xD;&#xA;    let stereotype;&#xD;&#xA;    let current = clazz;&#xD;&#xA;    do&#xD;&#xA;    {&#xD;&#xA;        stereotype = current.getStereotype(&quot;Cosmos DB Container Settings&quot;);&#xD;&#xA;        if (stereotype) {&#xD;&#xA;            return stereotype;&#xD;&#xA;        }&#xD;&#xA;        current = current.getParent();&#xD;&#xA;    } while (current);&#xD;&#xA;&#xD;&#xA;    stereotype = clazz.getPackage()?.getStereotype(&quot;Cosmos DB Container Settings&quot;);&#xD;&#xA;    if (stereotype) {&#xD;&#xA;        return stereotype;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return null;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function isCosmosDbProvider() {&#xD;&#xA;    return application.getSettings(dbSettingsId)&#xD;&#xA;        ?.getField(&quot;Database Provider&quot;)&#xD;&#xA;        ?.value == &quot;cosmos&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function isAggregateRoot(element) {&#xD;&#xA;    return ! element.getAssociations(&quot;Association&quot;)&#xD;&#xA;        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function hasSuperClass(element) {&#xD;&#xA;    return element.getAssociations(&quot;Generalization&quot;)&#xD;&#xA;        .some(x =&gt; x.isTargetEnd());&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getNamingConvention() {&#xD;&#xA;    return application.getSettings(dbSettingsId)&#xD;&#xA;        .getField(&quot;Key Naming Convention&quot;)?.value ?? &quot;pascal-case&quot;;&#xD;&#xA;}" isActive="true" />
                <property name="7df9c3b9-91a0-4cb7-bc3a-15d72f160054" display="Dependencies" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
      </childElements>
    </childElement>
  </childElements>
</class>