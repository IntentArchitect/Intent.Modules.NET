using Intent.Metadata.RDBMS.Api;
using Intent.Modelers.Domain.Api;
using Intent.Modules.Common.CSharp.Builder;
using Intent.Modules.Common.Templates;
using System;
using System.Linq;
using Intent.Modules.EntityFrameworkCore.Settings;

namespace Intent.Modules.EntityFrameworkCore.Templates.EntityTypeConfiguration;

public class EfCoreKeyColumnPropertyStatement : CSharpStatement
{
    private readonly AttributeModel _model;
	private readonly int? _implicitOrder;
    private readonly DatabaseSettingsExtensions.PrimaryKeyValueProviderOptionsEnum _primaryKeyValueProvider;

    public EfCoreKeyColumnPropertyStatement(
        AttributeModel model, 
        int? implicitOrder, 
        DatabaseSettingsExtensions.PrimaryKeyValueProviderOptionsEnum primaryKeyValueProvider) : base(null)
    {
        _model = model;
		_implicitOrder = implicitOrder;
        _primaryKeyValueProvider = primaryKeyValueProvider;
    }

    public override string GetText(string indentation)
    {
        var propertyStatement = new CSharpInvocationStatement("builder", "Property")
            .AddArgument(new CSharpLambdaBlock("x"), lambda => lambda.WithExpressionBody(new CSharpStatement($"x.{_model.Name}")))
            .WithSemicolon();
        
        if (!string.IsNullOrWhiteSpace(_model.GetColumn()?.Name()))
        {
            propertyStatement = propertyStatement.AddInvocation("HasColumnName", inv =>
            {
                inv.AddArgument($@"""{EscapeHelper.EscapeName(_model.GetColumn().Name())}""");
                inv.OnNewLine();
            });
        }

        if (!string.IsNullOrWhiteSpace(_model.GetColumn()?.Type()))
        {
            propertyStatement = propertyStatement.AddInvocation("HasColumnType", inv =>
            {
                inv.AddArgument($@"""{_model.GetColumn().Type()}""");
                inv.OnNewLine();
            });
        }

        var columnOrder = _model.GetColumn()?.Order();
        if (columnOrder != null || _implicitOrder != null)
        {
            propertyStatement = propertyStatement.AddInvocation("HasColumnOrder", inv =>
            {
                inv.AddArgument((columnOrder ?? _implicitOrder).ToString());
                inv.OnNewLine();
            });
        }

        if (_model.HasDefaultConstraint())
        {
            var treatAsSqlExpression = _model.GetDefaultConstraint().TreatAsSQLExpression();
            var defaultValue = _model.GetDefaultConstraint()?.Value() ?? string.Empty;

            if (!treatAsSqlExpression &&
                !defaultValue.TrimStart().StartsWith("\"") &&
                _model.Type.Element.Name == "string")
            {
                defaultValue = $"\"{defaultValue}\"";
            }

            if (treatAsSqlExpression &&
                !defaultValue.TrimStart().StartsWith("\""))
            {
                defaultValue = $"\"{defaultValue}\"";
            }

            var method = treatAsSqlExpression
                ? "HasDefaultValueSql"
                : "HasDefaultValue";

            propertyStatement = propertyStatement.AddInvocation(method, inv =>
            {
                inv.AddArgument(defaultValue);
                inv.OnNewLine();
            });
        }

        if (_primaryKeyValueProvider == DatabaseSettingsExtensions.PrimaryKeyValueProviderOptionsEnum.Default)
        {
            if (_model.GetPrimaryKey()?.DataSource().IsAutoGenerated() == true || 
                (_model.GetPrimaryKey()?.DataSource().IsDefault() == true && NonConventionalOrdinalPrimaryKeyRequiresConfiguration(_model)))
            {
                propertyStatement = propertyStatement.AddInvocation("ValueGeneratedOnAdd", s => s.OnNewLine());
            }
            else if (_model.GetPrimaryKey()?.DataSource().IsUserSupplied() == true)
            {
                propertyStatement = propertyStatement.AddInvocation("ValueGeneratedNever", s => s.OnNewLine());
            }
        }
        else if (_primaryKeyValueProvider == DatabaseSettingsExtensions.PrimaryKeyValueProviderOptionsEnum.None)
        {
            propertyStatement = propertyStatement.AddInvocation("ValueGeneratedNever", s => s.OnNewLine());
        }
        
        return propertyStatement.GetText(indentation);
    }

    public static bool RequiresConfiguration(AttributeModel attribute, DatabaseSettingsExtensions.PrimaryKeyValueProviderOptionsEnum primaryKeyValueProvider)
    {
        return attribute.HasColumn() || attribute.HasDefaultConstraint() || HasSpecialPrimaryKeyConfiguration(attribute, primaryKeyValueProvider);
    }

    private static bool HasSpecialPrimaryKeyConfiguration(AttributeModel attribute, DatabaseSettingsExtensions.PrimaryKeyValueProviderOptionsEnum primaryKeyValueProvider)
    {
        return attribute.GetPrimaryKey() is not null &&
               (
                   (
                       primaryKeyValueProvider == DatabaseSettingsExtensions.PrimaryKeyValueProviderOptionsEnum.Default &&
                       (
                           attribute.GetPrimaryKey().DataSource().IsAutoGenerated() ||
                           attribute.GetPrimaryKey().DataSource().IsUserSupplied() ||
                           (
                               attribute.GetPrimaryKey().DataSource().IsDefault() &&
                               NonConventionalOrdinalPrimaryKeyRequiresConfiguration(attribute)
                           )
                       )
                   ) ||
                   primaryKeyValueProvider == DatabaseSettingsExtensions.PrimaryKeyValueProviderOptionsEnum.None
               );
    }

    private static bool NonConventionalOrdinalPrimaryKeyRequiresConfiguration(AttributeModel attribute)
    {
        // Conventional Ordinal Primary Key Types: short, int, long, Guid
        // Non-Conventional Ordinal Primary Key Types: byte, decimal, double, float
        var byteId = "A4E9102F-C1C8-4902-A417-CA418E1874D2";
        var decimalId = "675C7B84-997A-44E0-82B9-CD724C07C9E6";
        var doubleId = "24A77F70-5B97-40DD-8F9A-4208AD5F9219";
        var floatId = "341929E9-E3E7-46AA-ACB3-B0438421F4C4";
        var nonConventionalOrdinalTypeWhitelist = new[] { byteId, decimalId, doubleId, floatId };
    
        return (!attribute.InternalElement.ParentElement.IsClassModel() ||
               attribute.Class.GetExplicitPrimaryKey().All(keyAttribute => keyAttribute.Equals(attribute))) &&
               nonConventionalOrdinalTypeWhitelist.Contains(attribute.InternalElement.TypeReference.Element.Id.ToUpper());
    }
}