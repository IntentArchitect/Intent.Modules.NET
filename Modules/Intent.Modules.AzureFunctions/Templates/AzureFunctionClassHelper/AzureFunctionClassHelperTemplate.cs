//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:9.0.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Intent.Modules.AzureFunctions.Templates.AzureFunctionClassHelper {
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using System;
    
    
    public partial class AzureFunctionClassHelperTemplate : CSharpTemplateBase<object> {
        
        public override string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 10 ""
            this.Write(@"using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using Intent.RoslynWeaver.Attributes;
using Microsoft.AspNetCore.Http;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace ");
            
            #line default
            #line hidden
            
            #line 21 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Namespace ));
            
            #line default
            #line hidden
            
            #line 21 ""
            this.Write("\r\n{\r\n    static class ");
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( ClassName ));
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write("\r\n    {\r\n        private static readonly System.Text.Json.JsonSerializerOptions S" +
                    "erializationSettings = new() { PropertyNameCaseInsensitive = true };\r\n\r\n        " +
                    "public static async Task<T> DeserializeJsonContentAsync<T>(Stream jsonContentStr" +
                    "eam, CancellationToken cancellationToken)\r\n        {\r\n            return await S" +
                    "ystem.Text.Json.JsonSerializer.DeserializeAsync<T>(jsonContentStream, Serializat" +
                    "ionSettings, cancellationToken) ?? throw new FormatException(\"Unable to deserial" +
                    "ize JSON content.\");\r\n        }\r\n\r\n        public static T GetQueryParam<T>(stri" +
                    "ng paramName, IQueryCollection query, ParseDelegate<T> parse)\r\n            where" +
                    " T : struct\r\n        {\r\n            var strVal = query[paramName];\r\n            " +
                    "if (string.IsNullOrEmpty(strVal) || !parse(strVal, out T parsed))\r\n            {" +
                    "\r\n                throw new FormatException($\"Parameter \'{paramName}\' could not " +
                    "be parsed as a {typeof(T).Name}.\");\r\n            }\r\n\r\n            return parsed;" +
                    "\r\n        }\r\n        \r\n        public static T? GetQueryParamNullable<T>(string " +
                    "paramName, IQueryCollection query, ParseDelegate<T> parse)\r\n            where T " +
                    ": struct\r\n        {\r\n            var strVal = query[paramName];\r\n            if " +
                    "(string.IsNullOrEmpty(strVal))\r\n            {\r\n                return null;\r\n   " +
                    "         }\r\n\r\n            if (!parse(strVal, out T parsed))\r\n            {\r\n    " +
                    "            throw new FormatException($\"Parameter \'{paramName}\' could not be par" +
                    "sed as a {typeof(T).Name}.\");\r\n            }\r\n\r\n            return parsed;\r\n    " +
                    "    }\r\n\r\n        public static IEnumerable<T> GetQueryParamCollection<T>(string " +
                    "paramName, IQueryCollection query, ParseDelegate<T> parse)\r\n            where T " +
                    ": struct\r\n        {\r\n            var result = new List<T>();\r\n            var st" +
                    "rVal = query[paramName];\r\n            var values = strVal.ToString().Split(\",\");" +
                    "\r\n            foreach (var v in values ) \r\n            {\r\n                if (st" +
                    "ring.IsNullOrEmpty(v) || !parse(v, out T parsed))\r\n                {\r\n          " +
                    "          throw new FormatException($\"Parameter \'{paramName}\' could not be parse" +
                    "d as a {typeof(T).Name}.\");\r\n                }\r\n                result.Add(parse" +
                    "d);\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public st" +
                    "atic T GetHeadersParam<T>(string paramName, IHeaderDictionary headers, ParseDele" +
                    "gate<T> parse)\r\n            where T : struct\r\n        {\r\n            var strVal " +
                    "= headers[paramName];\r\n            if (string.IsNullOrEmpty(strVal) || !parse(st" +
                    "rVal, out T parsed))\r\n            {\r\n                throw new FormatException($" +
                    "\"Parameter \'{paramName}\' could not be parsed as a {typeof(T).Name}.\");\r\n        " +
                    "    }\r\n\r\n            return parsed;\r\n        }\r\n\r\n        public static T? GetHe" +
                    "adersParamNullable<T>(string paramName, IHeaderDictionary headers, ParseDelegate" +
                    "<T> parse)\r\n            where T : struct\r\n        {\r\n            var strVal = he" +
                    "aders[paramName];\r\n            if (string.IsNullOrEmpty(strVal))\r\n            {\r" +
                    "\n                return null;\r\n            }\r\n\r\n            if (!parse(strVal, o" +
                    "ut T parsed))\r\n            {\r\n                throw new FormatException($\"Parame" +
                    "ter \'{paramName}\' could not be parsed as a {typeof(T).Name}.\");\r\n            }\r\n" +
                    "\r\n            return parsed;\r\n        }\r\n\r\n        public static IEnumerable<T> " +
                    "GetHeadersParamCollection<T>(string paramName, IHeaderDictionary headers, ParseD" +
                    "elegate<T> parse)\r\n            where T : struct\r\n        {\r\n            var resu" +
                    "lt = new List<T>();\r\n            var strVal = headers[paramName];\r\n            v" +
                    "ar values = strVal.ToString().Split(\",\");\r\n            foreach (var v in values " +
                    ") \r\n            {\r\n                if (string.IsNullOrEmpty(v) || !parse(v, out " +
                    "T parsed))\r\n                {\r\n                    throw new FormatException($\"P" +
                    "arameter \'{paramName}\' could not be parsed as a {typeof(T).Name}.\");\r\n          " +
                    "      }\r\n                result.Add(parsed);\r\n            }\r\n\r\n            retur" +
                    "n result;\r\n        }\r\n\r\n        public static TEnum GetEnumParam<TEnum>(string p" +
                    "aramName, string enumString)\r\n            where TEnum : struct\r\n        {\r\n     " +
                    "       if (!Enum.TryParse<TEnum>(enumString, true, out var enumValue))\r\n        " +
                    "    {\r\n                throw new FormatException($\"Parameter {paramName} has val" +
                    "ue of {enumString} which is not a valid literal value for Enum {typeof(TEnum).Na" +
                    "me}\");\r\n            }\r\n\r\n            return enumValue;\r\n        }\r\n        \r\n   " +
                    "     public static TEnum? GetEnumParamNullable<TEnum>(string paramName, ");
            
            #line default
            #line hidden
            
            #line 137 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( NullableStringDefinition ));
            
            #line default
            #line hidden
            
            #line 137 ""
            this.Write(@" enumString)
            where TEnum : struct
        {
            if (enumString is null)
            {
                return null;
            }
            
            if (!Enum.TryParse<TEnum>(enumString, true, out var enumValue))
            {
                throw new FormatException($""Parameter {paramName} has value of {enumString} which is not a valid literal value for Enum {typeof(TEnum).Name}"");
            }

            return enumValue;
        }
        
        public delegate bool ParseDelegate<T>(string strVal, out T parsed);
    }
}");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public override void Initialize() {
            base.Initialize();
        }
    }
}
