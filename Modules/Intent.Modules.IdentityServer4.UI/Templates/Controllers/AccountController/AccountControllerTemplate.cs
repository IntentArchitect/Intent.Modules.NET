// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.IdentityServer4.UI.Templates.Controllers.AccountController
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.IdentityServer4.UI\Templates\Controllers\AccountController\AccountControllerTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class AccountControllerTemplate : CSharpTemplateBase<object, Intent.Modules.IdentityServer4.UI.Templates.Controllers.AccountController.AccountAuthProviderDecorator>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.


using IdentityModel;
using IdentityServer4;
using IdentityServer4.Events;
using IdentityServer4.Extensions;
using IdentityServer4.Models;
using IdentityServer4.Services;
using IdentityServer4.Stores;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Linq;
using System.Threading.Tasks;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace IdentityServerHost.Quickstart.UI
{
    /// <summary>
    /// This sample controller implements a typical login/logout/provision workflow for local and external accounts.
    /// The login service encapsulates the interactions with the user data store. This data store is in-memory only and cannot be used for production!
    /// The interaction service provides a way for the UI to communicate with identityserver for validation and context retrieval
    /// </summary>
    [SecurityHeaders]
    [AllowAnonymous]
    public class AccountController : Controller
    {
        private readonly ");
            
            #line 42 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.IdentityServer4.UI\Templates\Controllers\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AuthProviderType));
            
            #line default
            #line hidden
            this.Write(" _");
            
            #line 42 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.IdentityServer4.UI\Templates\Controllers\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AuthProviderVariableName));
            
            #line default
            #line hidden
            this.Write(@";
        private readonly IIdentityServerInteractionService _interaction;
        private readonly IClientStore _clientStore;
        private readonly IAuthenticationSchemeProvider _schemeProvider;
        private readonly IEventService _events;

        public AccountController(
            IIdentityServerInteractionService interaction,
            IClientStore clientStore,
            IAuthenticationSchemeProvider schemeProvider,
            IEventService events,
            ");
            
            #line 53 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.IdentityServer4.UI\Templates\Controllers\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AuthProviderType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 53 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.IdentityServer4.UI\Templates\Controllers\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AuthProviderVariableName));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            _");
            
            #line 55 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.IdentityServer4.UI\Templates\Controllers\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AuthProviderVariableName));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 55 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.IdentityServer4.UI\Templates\Controllers\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AuthProviderVariableName));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n            _interaction = interaction;\r\n            _clientStore = clientSt" +
                    "ore;\r\n            _schemeProvider = schemeProvider;\r\n            _events = event" +
                    "s;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Entry point into the login w" +
                    "orkflow\r\n        /// </summary>\r\n        [HttpGet]\r\n        public async Task<IA" +
                    "ctionResult> Login(string returnUrl)\r\n        {\r\n            // build a model so" +
                    " we know what to show on the login page\r\n            var vm = await BuildLoginVi" +
                    "ewModelAsync(returnUrl);\r\n\r\n            if (vm.IsExternalLoginOnly)\r\n           " +
                    " {\r\n                // we only have one option for logging in and it\'s an extern" +
                    "al provider\r\n                return RedirectToAction(\"Challenge\", \"External\", ne" +
                    "w { scheme = vm.ExternalLoginScheme, returnUrl });\r\n            }\r\n\r\n           " +
                    " return View(vm);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Handle postba" +
                    "ck from username/password login\r\n        /// </summary>\r\n        [HttpPost]\r\n   " +
                    "     [ValidateAntiForgeryToken]\r\n        public async Task<IActionResult> Login(" +
                    "LoginInputModel model, string button)\r\n        {\r\n            // check if we are" +
                    " in the context of an authorization request\r\n            var context = await _in" +
                    "teraction.GetAuthorizationContextAsync(model.ReturnUrl);\r\n\r\n            // the u" +
                    "ser clicked the \"cancel\" button\r\n            if (button != \"login\")\r\n           " +
                    " {\r\n                if (context != null)\r\n                {\r\n                   " +
                    " // if the user cancels, send a result back into IdentityServer as if they \r\n   " +
                    "                 // denied the consent (even if this client does not require con" +
                    "sent).\r\n                    // this will send back an access denied OIDC error r" +
                    "esponse to the client.\r\n                    await _interaction.DenyAuthorization" +
                    "Async(context, AuthorizationError.AccessDenied);\r\n\r\n                    // we ca" +
                    "n trust model.ReturnUrl since GetAuthorizationContextAsync returned non-null\r\n  " +
                    "                  if (context.IsNativeClient())\r\n                    {\r\n        " +
                    "                // The client is native, so this change in how to\r\n             " +
                    "           // return the response is for better UX for the end user.\r\n          " +
                    "              return this.LoadingPage(\"Redirect\", model.ReturnUrl);\r\n           " +
                    "         }\r\n\r\n                    return Redirect(model.ReturnUrl);\r\n           " +
                    "     }\r\n                else\r\n                {\r\n                    // since we" +
                    " don\'t have a valid context, then we just go back to the home page\r\n            " +
                    "        return Redirect(\"~/\");\r\n                }\r\n            }\r\n\r\n            " +
                    "if (ModelState.IsValid)\r\n            {\r\n                ");
            
            #line 120 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.IdentityServer4.UI\Templates\Controllers\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetPreAuthenticationCode()));
            
            #line default
            #line hidden
            this.Write("\r\n                if (");
            
            #line 121 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.IdentityServer4.UI\Templates\Controllers\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetAuthenticationCheckCodeExpression()));
            
            #line default
            #line hidden
            this.Write(")\r\n                {\r\n                    ");
            
            #line 123 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.IdentityServer4.UI\Templates\Controllers\AccountController\AccountControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetUserMappingCode()));
            
            #line default
            #line hidden
            this.Write("\r\n                    await _events.RaiseAsync(new UserLoginSuccessEvent(user_use" +
                    "rname, user_subjectId, user_name, clientId: context?.Client.ClientId));\r\n\r\n     " +
                    "               // only set explicit expiration here if user chooses \"remember me" +
                    "\". \r\n                    // otherwise we rely upon expiration configured in cook" +
                    "ie middleware.\r\n                    AuthenticationProperties props = null;\r\n    " +
                    "                if (AccountOptions.AllowRememberLogin && model.RememberLogin)\r\n " +
                    "                   {\r\n                        props = new AuthenticationProperti" +
                    "es\r\n                        {\r\n                            IsPersistent = true,\r" +
                    "\n                            ExpiresUtc = DateTimeOffset.UtcNow.Add(AccountOptio" +
                    "ns.RememberMeLoginDuration)\r\n                        };\r\n                    };\r" +
                    "\n\r\n                    // issue authentication cookie with subject ID and userna" +
                    "me\r\n                    var isuser = new IdentityServerUser(user_subjectId)\r\n   " +
                    "                 {\r\n                        DisplayName = user_username\r\n       " +
                    "             };\r\n\r\n                    await HttpContext.SignInAsync(isuser, pro" +
                    "ps);\r\n\r\n                    if (context != null)\r\n                    {\r\n       " +
                    "                 if (context.IsNativeClient())\r\n                        {\r\n     " +
                    "                       // The client is native, so this change in how to\r\n      " +
                    "                      // return the response is for better UX for the end user.\r" +
                    "\n                            return this.LoadingPage(\"Redirect\", model.ReturnUrl" +
                    ");\r\n                        }\r\n\r\n                        // we can trust model.R" +
                    "eturnUrl since GetAuthorizationContextAsync returned non-null\r\n                 " +
                    "       return Redirect(model.ReturnUrl);\r\n                    }\r\n\r\n             " +
                    "       // request for a local page\r\n                    if (Url.IsLocalUrl(model" +
                    ".ReturnUrl))\r\n                    {\r\n                        return Redirect(mod" +
                    "el.ReturnUrl);\r\n                    }\r\n                    else if (string.IsNul" +
                    "lOrEmpty(model.ReturnUrl))\r\n                    {\r\n                        retur" +
                    "n Redirect(\"~/\");\r\n                    }\r\n                    else\r\n            " +
                    "        {\r\n                        // user might have clicked on a malicious lin" +
                    "k - should be logged\r\n                        throw new Exception(\"invalid retur" +
                    "n URL\");\r\n                    }\r\n                }\r\n\r\n                await _eve" +
                    "nts.RaiseAsync(new UserLoginFailureEvent(model.Username, \"invalid credentials\", " +
                    "clientId:context?.Client.ClientId));\r\n                ModelState.AddModelError(s" +
                    "tring.Empty, AccountOptions.InvalidCredentialsErrorMessage);\r\n            }\r\n\r\n " +
                    "           // something went wrong, show form with error\r\n            var vm = a" +
                    "wait BuildLoginViewModelAsync(model);\r\n            return View(vm);\r\n        }\r\n" +
                    "\r\n        \r\n        /// <summary>\r\n        /// Show logout page\r\n        /// </s" +
                    "ummary>\r\n        [HttpGet]\r\n        public async Task<IActionResult> Logout(stri" +
                    "ng logoutId)\r\n        {\r\n            // build a model so the logout page knows w" +
                    "hat to display\r\n            var vm = await BuildLogoutViewModelAsync(logoutId);\r" +
                    "\n\r\n            if (vm.ShowLogoutPrompt == false)\r\n            {\r\n               " +
                    " // if the request for logout was properly authenticated from IdentityServer, th" +
                    "en\r\n                // we don\'t need to show the prompt and can just log the use" +
                    "r out directly.\r\n                return await Logout(vm);\r\n            }\r\n\r\n    " +
                    "        return View(vm);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Handle" +
                    " logout page postback\r\n        /// </summary>\r\n        [HttpPost]\r\n        [Vali" +
                    "dateAntiForgeryToken]\r\n        public async Task<IActionResult> Logout(LogoutInp" +
                    "utModel model)\r\n        {\r\n            // build a model so the logged out page k" +
                    "nows what to display\r\n            var vm = await BuildLoggedOutViewModelAsync(mo" +
                    "del.LogoutId);\r\n\r\n            if (User?.Identity.IsAuthenticated == true)\r\n     " +
                    "       {\r\n                // Ensure that any ASPNET cookies are also removed so " +
                    "that we\'re\r\n                // not mistakenly still logged in\r\n                R" +
                    "esponse.Cookies.Delete(\".AspNetCore.Identity.Application\");\r\n                Res" +
                    "ponse.Cookies.Delete(\"idserv.external\");\r\n                Response.Cookies.Delet" +
                    "e(\"idserv.session\");\r\n\r\n                // delete local authentication cookie\r\n " +
                    "               await HttpContext.SignOutAsync();\r\n\r\n                // raise the" +
                    " logout event\r\n                await _events.RaiseAsync(new UserLogoutSuccessEve" +
                    "nt(User.GetSubjectId(), User.GetDisplayName()));\r\n            }\r\n\r\n            /" +
                    "/ check if we need to trigger sign-out at an upstream identity provider\r\n       " +
                    "     if (vm.TriggerExternalSignout)\r\n            {\r\n                // build a r" +
                    "eturn URL so the upstream provider will redirect back\r\n                // to us " +
                    "after the user has logged out. this allows us to then\r\n                // comple" +
                    "te our single sign-out processing.\r\n                string url = Url.Action(\"Log" +
                    "out\", new { logoutId = vm.LogoutId });\r\n\r\n                // this triggers a red" +
                    "irect to the external provider for sign-out\r\n                return SignOut(new " +
                    "AuthenticationProperties { RedirectUri = url }, vm.ExternalAuthenticationScheme)" +
                    ";\r\n            }\r\n\r\n            return View(\"LoggedOut\", vm);\r\n        }\r\n\r\n    " +
                    "    [HttpGet]\r\n        public IActionResult AccessDenied()\r\n        {\r\n         " +
                    "   return View();\r\n        }\r\n\r\n\r\n        /*************************************" +
                    "****/\r\n        /* helper APIs for the AccountController */\r\n        /***********" +
                    "******************************/\r\n        private async Task<LoginViewModel> Buil" +
                    "dLoginViewModelAsync(string returnUrl)\r\n        {\r\n            var context = awa" +
                    "it _interaction.GetAuthorizationContextAsync(returnUrl);\r\n            if (contex" +
                    "t?.IdP != null && await _schemeProvider.GetSchemeAsync(context.IdP) != null)\r\n  " +
                    "          {\r\n                var local = context.IdP == IdentityServer4.Identity" +
                    "ServerConstants.LocalIdentityProvider;\r\n\r\n                // this is meant to sh" +
                    "ort circuit the UI and only trigger the one external IdP\r\n                var vm" +
                    " = new LoginViewModel\r\n                {\r\n                    EnableLocalLogin =" +
                    " local,\r\n                    ReturnUrl = returnUrl,\r\n                    Usernam" +
                    "e = context?.LoginHint,\r\n                };\r\n\r\n                if (!local)\r\n    " +
                    "            {\r\n                    vm.ExternalProviders = new[] { new ExternalPr" +
                    "ovider { AuthenticationScheme = context.IdP } };\r\n                }\r\n\r\n         " +
                    "       return vm;\r\n            }\r\n\r\n            var schemes = await _schemeProvi" +
                    "der.GetAllSchemesAsync();\r\n\r\n            var providers = schemes\r\n              " +
                    "  .Where(x => x.DisplayName != null)\r\n                .Select(x => new ExternalP" +
                    "rovider\r\n                {\r\n                    DisplayName = x.DisplayName ?? x" +
                    ".Name,\r\n                    AuthenticationScheme = x.Name\r\n                }).To" +
                    "List();\r\n\r\n            var allowLocal = true;\r\n            if (context?.Client.C" +
                    "lientId != null)\r\n            {\r\n                var client = await _clientStore" +
                    ".FindEnabledClientByIdAsync(context.Client.ClientId);\r\n                if (clien" +
                    "t != null)\r\n                {\r\n                    allowLocal = client.EnableLoc" +
                    "alLogin;\r\n\r\n                    if (client.IdentityProviderRestrictions != null " +
                    "&& client.IdentityProviderRestrictions.Any())\r\n                    {\r\n          " +
                    "              providers = providers.Where(provider => client.IdentityProviderRes" +
                    "trictions.Contains(provider.AuthenticationScheme)).ToList();\r\n                  " +
                    "  }\r\n                }\r\n            }\r\n\r\n            return new LoginViewModel\r\n" +
                    "            {\r\n                AllowRememberLogin = AccountOptions.AllowRemember" +
                    "Login,\r\n                EnableLocalLogin = allowLocal && AccountOptions.AllowLoc" +
                    "alLogin,\r\n                ReturnUrl = returnUrl,\r\n                Username = con" +
                    "text?.LoginHint,\r\n                ExternalProviders = providers.ToArray()\r\n     " +
                    "       };\r\n        }\r\n\r\n        private async Task<LoginViewModel> BuildLoginVie" +
                    "wModelAsync(LoginInputModel model)\r\n        {\r\n            var vm = await BuildL" +
                    "oginViewModelAsync(model.ReturnUrl);\r\n            vm.Username = model.Username;\r" +
                    "\n            vm.RememberLogin = model.RememberLogin;\r\n            return vm;\r\n  " +
                    "      }\r\n\r\n        private async Task<LogoutViewModel> BuildLogoutViewModelAsync" +
                    "(string logoutId)\r\n        {\r\n            var vm = new LogoutViewModel { LogoutI" +
                    "d = logoutId, ShowLogoutPrompt = AccountOptions.ShowLogoutPrompt };\r\n\r\n         " +
                    "   if (User?.Identity.IsAuthenticated != true)\r\n            {\r\n                /" +
                    "/ if the user is not authenticated, then just show logged out page\r\n            " +
                    "    vm.ShowLogoutPrompt = false;\r\n                return vm;\r\n            }\r\n\r\n " +
                    "           var context = await _interaction.GetLogoutContextAsync(logoutId);\r\n  " +
                    "          if (context?.ShowSignoutPrompt == false)\r\n            {\r\n             " +
                    "   // it\'s safe to automatically sign-out\r\n                vm.ShowLogoutPrompt =" +
                    " false;\r\n                return vm;\r\n            }\r\n\r\n            // show the lo" +
                    "gout prompt. this prevents attacks where the user\r\n            // is automatical" +
                    "ly signed out by another malicious web page.\r\n            return vm;\r\n        }\r" +
                    "\n\r\n        private async Task<LoggedOutViewModel> BuildLoggedOutViewModelAsync(s" +
                    "tring logoutId)\r\n        {\r\n            // get context information (client name," +
                    " post logout redirect URI and iframe for federated signout)\r\n            var log" +
                    "out = await _interaction.GetLogoutContextAsync(logoutId);\r\n\r\n            var vm " +
                    "= new LoggedOutViewModel\r\n            {\r\n                AutomaticRedirectAfterS" +
                    "ignOut = AccountOptions.AutomaticRedirectAfterSignOut,\r\n                PostLogo" +
                    "utRedirectUri = logout?.PostLogoutRedirectUri,\r\n                ClientName = str" +
                    "ing.IsNullOrEmpty(logout?.ClientName) ? logout?.ClientId : logout?.ClientName,\r\n" +
                    "                SignOutIframeUrl = logout?.SignOutIFrameUrl,\r\n                Lo" +
                    "goutId = logoutId\r\n            };\r\n\r\n            if (User?.Identity.IsAuthentica" +
                    "ted == true)\r\n            {\r\n                var idp = User.FindFirst(JwtClaimTy" +
                    "pes.IdentityProvider)?.Value;\r\n                if (idp != null && idp != Identit" +
                    "yServer4.IdentityServerConstants.LocalIdentityProvider)\r\n                {\r\n    " +
                    "                var providerSupportsSignout = await HttpContext.GetSchemeSupport" +
                    "sSignOutAsync(idp);\r\n                    if (providerSupportsSignout)\r\n         " +
                    "           {\r\n                        if (vm.LogoutId == null)\r\n                " +
                    "        {\r\n                            // if there\'s no current logout context, " +
                    "we need to create one\r\n                            // this captures necessary in" +
                    "fo from the current logged in user\r\n                            // before we sig" +
                    "nout and redirect away to the external IdP for signout\r\n                        " +
                    "    vm.LogoutId = await _interaction.CreateLogoutContextAsync();\r\n              " +
                    "          }\r\n\r\n                        vm.ExternalAuthenticationScheme = idp;\r\n " +
                    "                   }\r\n                }\r\n            }\r\n\r\n            return vm;" +
                    "\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
