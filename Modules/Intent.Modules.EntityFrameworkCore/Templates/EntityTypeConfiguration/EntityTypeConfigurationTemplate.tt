<#@ template language="C#" inherits="CSharpTemplateBase<Intent.Modelers.Domain.Api.ClassModel, Intent.Modules.EntityFrameworkCore.Templates.EntityTypeConfiguration.EntityTypeConfigurationDecorator>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public class <#= ClassName #> : IEntityTypeConfiguration<<#= GetEntityName() #>>
    {
        public void Configure(EntityTypeBuilder<<#= GetEntityName() #>> builder)
        {<#= GetTableMapping() #><#= GetKeyMapping() #><#= GetDecoratorsOutput(x => x.BeforeAttributes()) #>
<#  foreach(var attribute in Model.Attributes.Where(x => HasMapping(x))) { #>
            <#= GetAttributeMapping(attribute) #>
<#  } #><#= GetDecoratorsOutput(x => x.AfterAttributes()) #>
<#  foreach(var attribute in Model.AssociatedClasses.Where(x => HasMapping(x))) { #>
            <#= GetAssociationMapping(attribute) #>
<#  } #><#= GetIndexes() #>
        }
    }
}