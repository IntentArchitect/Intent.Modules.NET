<#@ template language="C#" inherits="CSharpTemplateBase<object, Intent.Modules.Eventing.MassTransit.Templates.WrapperConsumer.ConsumerDecorator>" #>
<#@ output extension=".cs" #>
<#@ import namespace="Intent.Modelers.Eventing.Api" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Modules.Eventing.Contracts.Templates" #>
using System;
using System.Threading.Tasks;
using MassTransit;
using Microsoft.Extensions.DependencyInjection;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public class <#= ClassName #><THandler, TMessage> : IConsumer<TMessage>
        where TMessage : class
        where THandler : <#=this.GetIntegrationEventHandlerInterfaceName() #><TMessage>
    {<#= GetClassMembers() #>
        public <#= ClassName #>(<#= GetConstructorParameters() #>)
        {<#= GetConstructorImplementation() #>
        }

        public async Task Consume(ConsumeContext<TMessage> context)
        {
            var eventBus = _serviceProvider.GetService<<#= this.GetMassTransitEventBusName() #>>()<#= UseExplicitNullSymbol ? "!" : string.Empty #>;
            eventBus.Current = context;
<#= GetConsumeEnterCode() #>
            var handler = _serviceProvider.GetService<THandler>()<#= UseExplicitNullSymbol ? "!" : string.Empty #>;            
            await handler.HandleAsync(context.Message, context.CancellationToken);<#= GetConsumeExitCode() #>
        }
    }

    public class <#= ClassName #>Definition<THandler, TMessage> : ConsumerDefinition<<#= ClassName #><THandler, TMessage>>
        where TMessage : class
        where THandler : IIntegrationEventHandler<TMessage>
    {
        private readonly IServiceProvider _serviceProvider;

        public <#= ClassName #>Definition(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        protected override void ConfigureConsumer(IReceiveEndpointConfigurator endpointConfigurator, IConsumerConfigurator<<#= ClassName #><THandler, TMessage>> consumerConfigurator)
        {<#= GetConsumerConfiguration() #>
        }
    }
}