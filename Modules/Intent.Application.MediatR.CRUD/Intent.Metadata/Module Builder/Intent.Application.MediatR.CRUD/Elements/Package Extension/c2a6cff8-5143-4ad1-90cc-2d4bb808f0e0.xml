<?xml version="1.0" encoding="utf-8"?>
<class id="c2a6cff8-5143-4ad1-90cc-2d4bb808f0e0" type="Package Extension" typeId="ab4152df-3add-4a08-81b6-0fefc7cbb204">
  <name>Package Extension</name>
  <display>Package Extension: Services Package</display>
  <isAbstract>false</isAbstract>
  <sort-children>by-type-then-by-name</sort-children>
  <genericTypes />
  <typeReference id="254649e1-f199-44e1-a1ea-12dc64370280">
    <typeId>df45eaf6-9202-4c25-8dd5-677e9ba1e906</typeId>
    <isNavigable>true</isNavigable>
    <isNullable>false</isNullable>
    <isCollection>false</isCollection>
    <isRequired>true</isRequired>
    <typePackageName>Intent.Modelers.Services</typePackageName>
    <typePackageId>4ba53041-59f9-4446-a207-6da4fbdf86fe</typePackageId>
    <stereotypes />
    <genericTypeParameters />
  </typeReference>
  <isMapped>false</isMapped>
  <parentFolderId>46410048-55e6-4cc9-8ee0-dcd0e24a8ee2</parentFolderId>
  <packageId>4c21efb8-ec70-4d57-8ea4-d6e9f7e6b9f6</packageId>
  <packageName>Intent.Application.MediatR.CRUD</packageName>
  <stereotypes />
  <metadata />
  <childElements>
    <childElement id="dc5f9bff-67e5-4ad5-9c2d-7503f6f9372c" type="Context Menu" typeId="d45e383d-90ba-4b64-aca7-34ca100cea21">
      <name>[context menu]</name>
      <display>[context menu]</display>
      <isAbstract>false</isAbstract>
      <sort-children>by-type-then-manually</sort-children>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>c2a6cff8-5143-4ad1-90cc-2d4bb808f0e0</parentFolderId>
      <packageId>4c21efb8-ec70-4d57-8ea4-d6e9f7e6b9f6</packageId>
      <packageName>Intent.Application.MediatR.CRUD</packageName>
      <stereotypes />
      <metadata />
      <childElements>
        <childElement id="06e7e36a-f462-45f0-97bd-e173e6dcaa94" type="Run Script Option" typeId="345d46fb-c500-409a-88c7-26720572c9af">
          <name>Create CRUD Service</name>
          <display>Create CRUD Service: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="30b41c7d-f906-4c48-be15-f8ab507e32ef">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>dc5f9bff-67e5-4ad5-9c2d-7503f6f9372c</parentFolderId>
          <packageId>4c21efb8-ec70-4d57-8ea4-d6e9f7e6b9f6</packageId>
          <packageName>Intent.Application.MediatR.CRUD</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="// Detect if we're running from the &quot;Execution Script dialogue&quot;, in which case we want to manually&#xD;&#xA;// set the element to something:&#xD;&#xA;let defaultDomainClassName = null;&#xD;&#xA;if (element?.id == null) {&#xD;&#xA;    // For testing as if a package was right clicked, substitute with package id:&#xD;&#xA;    element = getPackages().filter(x =&gt; x.id == &quot;eafc12ee-88c0-4e8e-abcf-2b989be5d656&quot;)[0];&#xD;&#xA;&#xD;&#xA;    // For element, substitute with service's element id:&#xD;&#xA;    // element = lookup(&quot;677c6801-e654-45c5-924e-886713db1f5e&quot;);&#xD;&#xA;&#xD;&#xA;    // When set, the dialog asking to select the class from the domain is skipped:&#xD;&#xA;    defaultDomainClassName = &quot;NewClass&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;initConstants();&#xD;&#xA;&#xD;&#xA;let entity = await preselectOrPromptEntity(defaultDomainClassName);&#xD;&#xA;if (!entity) { return; }&#xD;&#xA;let service = getServiceFromCurrentContext(entity, element);&#xD;&#xA;&#xD;&#xA;let entityFolder = getEntityFolder(service, entity);&#xD;&#xA;let resultCqrsTypeDto = createCqrsResultTypeDTO(entity, entityFolder);&#xD;&#xA;&#xD;&#xA;createCqrsCreateOperation(service, entityFolder, entity);&#xD;&#xA;createCqrsFindByIdOperation(service, entity, entityFolder, resultCqrsTypeDto);&#xD;&#xA;createCqrsFindAllOperation(service, entity, entityFolder, resultCqrsTypeDto);&#xD;&#xA;createCqrsUpdateOperation(service, entity, entityFolder);&#xD;&#xA;createCqrsDeleteOperation(service, entity, entityFolder);&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA;========================&#xD;&#xA;   HOOK-IN FUNCTIONS&#xD;&#xA;========================&#xD;&#xA;Easier to alter the behavior of certain key operations.&#xD;&#xA;Could make certain things configurable in the future.&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;function getParameterFormat(str) {&#xD;&#xA;    return toCamelCase(str);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getRoutingFormat(str) {&#xD;&#xA;    return str;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getFieldFormat(str) {&#xD;&#xA;    return toPascalCase(str);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getDomainAttributeNameFormat(str) {&#xD;&#xA;    let convention = getDomainAttributeNamingConvention();&#xD;&#xA;    switch (convention) {&#xD;&#xA;        case &quot;pascal-case&quot;:&#xD;&#xA;            return toPascalCase(str);&#xD;&#xA;        case &quot;camel-case&quot;:&#xD;&#xA;            return toCamelCase(str);&#xD;&#xA;    }&#xD;&#xA;    return str;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getFolderName(nestedCompOwner, entity) {&#xD;&#xA;    return nestedCompOwner ? pluralize(nestedCompOwner.name) : pluralize(entity.name);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getBaseNameForElement(nestedCompOwner, entity, entityIsMany) {&#xD;&#xA;    let entityName = entityIsMany ? toPascalCase(pluralize(entity.name)) : toPascalCase(entity.name);&#xD;&#xA;    return nestedCompOwner ? `${toPascalCase(nestedCompOwner.name)}${entityName}` : entityName;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getServiceName(nestedCompOwner, entity) {&#xD;&#xA;    return nestedCompOwner &#xD;&#xA;        ? `${toPascalCase(nestedCompOwner.name)}Service` &#xD;&#xA;        : `${toPascalCase(entity.name)}Service`;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getOperationFormat(baseName, nestedCompOwner, entity, entityIsMany) {&#xD;&#xA;    let entityName = entityIsMany ? pluralize(entity.name) : entity.name;&#xD;&#xA;    return `${baseName}${nestedCompOwner ? entityName : &quot;&quot;}`;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA;========================&#xD;&#xA;   CREATION FUNCTIONS&#xD;&#xA;========================&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;function createCqrsResultTypeDTO(entity, entityFolder) {&#xD;&#xA;    let nestedCompOwner = getNestedCompositionalOwner(entity);&#xD;&#xA;    let baseName = getBaseNameForElement(nestedCompOwner, entity, false);&#xD;&#xA;    let expectedDtoName = `${baseName}DTO`;&#xD;&#xA;&#xD;&#xA;    if (hasElementInFolder(entityFolder, expectedDtoName)) {&#xD;&#xA;        return entityFolder.getChildren().filter(x =&gt; x.name == expectedDtoName)[0];&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let dto = createElement(&quot;DTO&quot;, expectedDtoName, entityFolder.id);&#xD;&#xA;    dto.setMapping(entity.id);&#xD;&#xA;    dto.setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;&#xD;&#xA;    let entityPkDescr = getPrimaryKeyDescriptor(entity);&#xD;&#xA;&#xD;&#xA;    if (nestedCompOwner) {&#xD;&#xA;        let nestedCompOwnerFkDescr = getNestedCompositionalOwnerForeignKeyDescriptor(entity, nestedCompOwner);&#xD;&#xA;&#xD;&#xA;        if (!nestedCompOwnerFkDescr || nestedCompOwnerFkDescr.specialization == FKSpecialization.Implicit) {&#xD;&#xA;            let nestedCompOwnerIdDtoField = createElement(&quot;DTO-Field&quot;, getFieldFormat(nestedCompOwnerFkDescr.name), dto.id);&#xD;&#xA;            nestedCompOwnerIdDtoField.typeReference.setType(nestedCompOwnerFkDescr.typeId);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    if (entityPkDescr.specialization == PKSpecialization.Implicit) {&#xD;&#xA;        let idField = createElement(&quot;DTO-Field&quot;, getFieldFormat(entityPkDescr.name), dto.id);&#xD;&#xA;        idField.typeReference.setType(entityPkDescr.typeId);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    for (let attribute of entity.getChildren(&quot;Attribute&quot;)&#xD;&#xA;        .filter(attr =&gt; !legacyPartitionKey(attr))) {&#xD;&#xA;            let field = createElement(&quot;DTO-Field&quot;, getFieldFormat(attribute.name), dto.id);&#xD;&#xA;            field.typeReference.setType(attribute.typeReference.typeId);&#xD;&#xA;            field.typeReference.setIsNullable(attribute.typeReference.isNullable);&#xD;&#xA;            field.typeReference.setIsCollection(attribute.typeReference.isCollection);&#xD;&#xA;            field.setMapping(attribute.id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    dto.collapse();&#xD;&#xA;    return dto;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function createCqrsCreateOperation(service, entityFolder, entity) {&#xD;&#xA;    let nestedCompOwner = getNestedCompositionalOwner(entity);&#xD;&#xA;    let baseName = getBaseNameForElement(nestedCompOwner, entity, false);&#xD;&#xA;    let expectedCommandName = `Create${baseName}Command`;&#xD;&#xA;    &#xD;&#xA;    if (hasElementInFolder(entityFolder, expectedCommandName)) {&#xD;&#xA;        let command = entityFolder.getChildren().filter(x =&gt; x.name == expectedCommandName)[0];&#xD;&#xA;        let entityPkDescr = getPrimaryKeyDescriptor(entity);&#xD;&#xA;        command.typeReference.setType(entityPkDescr.typeId);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let command = createElement(&quot;Command&quot;, expectedCommandName, entityFolder.id);&#xD;&#xA;    command.setMapping(entity.id);&#xD;&#xA;    command.setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;&#xD;&#xA;    let operation = createElement(&quot;Operation&quot;, getOperationFormat(&quot;Post&quot;, nestedCompOwner, entity), service.id);&#xD;&#xA;    operation.setMapping(command.id);&#xD;&#xA;&#xD;&#xA;    let entityPkDescr = getPrimaryKeyDescriptor(entity);&#xD;&#xA;    let routePath = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;    if (nestedCompOwner) {&#xD;&#xA;        let nestedCompOwnerFkDescr = getNestedCompositionalOwnerForeignKeyDescriptor(entity, nestedCompOwner);&#xD;&#xA;&#xD;&#xA;        let nestedCompOwnerIdDtoField = createElement(&quot;DTO-Field&quot;, getFieldFormat(nestedCompOwnerFkDescr.name), command.id);&#xD;&#xA;        nestedCompOwnerIdDtoField.typeReference.setType(nestedCompOwnerFkDescr.typeId)&#xD;&#xA;        if (nestedCompOwnerFkDescr.specialization == FKSpecialization.Explicit) {&#xD;&#xA;            nestedCompOwnerIdDtoField.setMapping(nestedCompOwnerFkDescr.id);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        let param = createElement(&quot;Parameter&quot;, getParameterFormat(nestedCompOwnerFkDescr.name), operation.id);&#xD;&#xA;        param.typeReference.setType(nestedCompOwnerFkDescr.typeId);&#xD;&#xA;        param.setMapping(nestedCompOwnerIdDtoField.id);&#xD;&#xA;&#xD;&#xA;        routePath = getRoutePath(nestedCompOwnerFkDescr, entity, null);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    setHttpStereotype(operation, &quot;Http Settings&quot;, {&quot;Verb&quot;: &quot;POST&quot;, &quot;Route&quot;: routePath});&#xD;&#xA;&#xD;&#xA;    let operationParamCommand = createElement(&quot;Parameter&quot;, getParameterFormat(&quot;command&quot;), operation.id);&#xD;&#xA;    operationParamCommand.typeReference.setType(command.id);&#xD;&#xA;&#xD;&#xA;    if (entityPkDescr.typeId) {&#xD;&#xA;        command.typeReference.setType(entityPkDescr.typeId);&#xD;&#xA;        getReturnTypeMediatypeProperty(operation).setValue(&quot;application/json&quot;);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    for (let attribute of entity.getChildren(&quot;Attribute&quot;)&#xD;&#xA;        // For Create Commands, we don't want to by default have PKs and FKs&#xD;&#xA;        .filter(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp; !x.hasStereotype(&quot;Foreign Key&quot;) &amp;&amp; !legacyPartitionKey(x))) {&#xD;&#xA;            let field = createElement(&quot;DTO-Field&quot;, getFieldFormat(attribute.name), command.id);&#xD;&#xA;            field.typeReference.setType(attribute.typeReference.typeId)&#xD;&#xA;            field.setMapping(attribute.id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    command.collapse();&#xD;&#xA;    operation.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function createCqrsFindByIdOperation(service, entity, entityFolder, resultTypeDto) {&#xD;&#xA;    let nestedCompOwner = getNestedCompositionalOwner(entity);&#xD;&#xA;    let baseName = getBaseNameForElement(nestedCompOwner, entity, false);&#xD;&#xA;    let expectedQueryName = `Get${baseName}ByIdQuery`;&#xD;&#xA;    &#xD;&#xA;    if (hasElementInFolder(entityFolder, expectedQueryName)) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let query = createElement(&quot;Query&quot;, expectedQueryName, entityFolder.id);&#xD;&#xA;    query.typeReference.setType(resultTypeDto.id)&#xD;&#xA;    query.setMapping(entity.id);&#xD;&#xA;    query.setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;&#xD;&#xA;    let operation = createElement(&quot;Operation&quot;, getOperationFormat(&quot;Get&quot;, nestedCompOwner, entity), service.id);&#xD;&#xA;    operation.setMapping(query.id);&#xD;&#xA;&#xD;&#xA;    let entityPkDescr = getPrimaryKeyDescriptor(entity);&#xD;&#xA;    let routePath = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;    if (nestedCompOwner) {&#xD;&#xA;        let nestedCompOwnerFkDescr = getNestedCompositionalOwnerForeignKeyDescriptor(entity, nestedCompOwner);&#xD;&#xA;        &#xD;&#xA;        let nestedCompOwnerIdDtoField = createElement(&quot;DTO-Field&quot;, getFieldFormat(nestedCompOwnerFkDescr.name), query.id);&#xD;&#xA;        nestedCompOwnerIdDtoField.typeReference.setType(nestedCompOwnerFkDescr.typeId);&#xD;&#xA;        if (nestedCompOwnerFkDescr.specialization == FKSpecialization.Explicit) {&#xD;&#xA;            nestedCompOwnerIdDtoField.setMapping(nestedCompOwnerFkDescr.id);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        let param = createElement(&quot;Parameter&quot;, getParameterFormat(nestedCompOwnerFkDescr.name), operation.id);&#xD;&#xA;        param.typeReference.setType(nestedCompOwnerFkDescr.typeId);&#xD;&#xA;        param.setMapping(nestedCompOwnerIdDtoField.id);&#xD;&#xA;&#xD;&#xA;        routePath = getRoutePath(nestedCompOwnerFkDescr, entity, entityPkDescr);&#xD;&#xA;    } else {&#xD;&#xA;        routePath = getRoutePath(null, null, entityPkDescr);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    setHttpStereotype(operation, &quot;Http Settings&quot;, {&quot;Verb&quot;: &quot;GET&quot;, &quot;Route&quot;: routePath});&#xD;&#xA;    addPrimaryKeys(query, operation, entityPkDescr);&#xD;&#xA;&#xD;&#xA;    query.collapse();&#xD;&#xA;    operation.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function createCqrsFindAllOperation(service, entity, entityFolder, resultTypeDto) {&#xD;&#xA;    let nestedCompOwner = getNestedCompositionalOwner(entity);&#xD;&#xA;    let baseName = getBaseNameForElement(nestedCompOwner, entity, true);&#xD;&#xA;    let expectedQueryName = `Get${baseName}Query`;&#xD;&#xA;    &#xD;&#xA;    if (hasElementInFolder(entityFolder, expectedQueryName)) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let query = createElement(&quot;Query&quot;, expectedQueryName, entityFolder.id);&#xD;&#xA;    query.typeReference.setType(resultTypeDto.id)&#xD;&#xA;    query.typeReference.setIsCollection(true);&#xD;&#xA;    query.setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;&#xD;&#xA;    let operation = createElement(&quot;Operation&quot;, getOperationFormat(&quot;GetAll&quot;, nestedCompOwner, entity, true), service.id);&#xD;&#xA;    operation.setMapping(query.id);&#xD;&#xA;&#xD;&#xA;    let routePath = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;    if (nestedCompOwner) {&#xD;&#xA;        let nestedCompOwnerFkDescr = getNestedCompositionalOwnerForeignKeyDescriptor(entity, nestedCompOwner);&#xD;&#xA;&#xD;&#xA;        let nestedCompOwnerIdDtoField = createElement(&quot;DTO-Field&quot;, getFieldFormat(nestedCompOwnerFkDescr.name), query.id);&#xD;&#xA;        nestedCompOwnerIdDtoField.typeReference.setType(nestedCompOwnerFkDescr.typeId);&#xD;&#xA;&#xD;&#xA;        let param = createElement(&quot;Parameter&quot;, getParameterFormat(nestedCompOwnerFkDescr.name), operation.id);&#xD;&#xA;        param.typeReference.setType(nestedCompOwnerFkDescr.typeId);&#xD;&#xA;        param.setMapping(nestedCompOwnerIdDtoField.id);&#xD;&#xA;&#xD;&#xA;        routePath = getRoutePath(nestedCompOwnerFkDescr, entity, null);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    setHttpStereotype(operation, &quot;Http Settings&quot;, {&quot;Verb&quot;: &quot;GET&quot;, &quot;Route&quot;: routePath});&#xD;&#xA;&#xD;&#xA;    query.collapse();&#xD;&#xA;    operation.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function createCqrsUpdateOperation(service, entity, entityFolder) {&#xD;&#xA;    let nestedCompOwner = getNestedCompositionalOwner(entity);&#xD;&#xA;    let baseName = getBaseNameForElement(nestedCompOwner, entity, false);&#xD;&#xA;    let expectedCommandName = `Update${baseName}Command`;&#xD;&#xA;&#xD;&#xA;    if (hasElementInFolder(entityFolder, expectedCommandName)) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let command = createElement(&quot;Command&quot;, expectedCommandName, entityFolder.id);&#xD;&#xA;    command.setMapping(entity.id);&#xD;&#xA;    command.setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;&#xD;&#xA;    let operation = createElement(&quot;Operation&quot;, getOperationFormat(&quot;Put&quot;, nestedCompOwner, entity), service.id);&#xD;&#xA;    operation.setMapping(command.id);&#xD;&#xA;&#xD;&#xA;    let entityPkDescr = getPrimaryKeyDescriptor(entity);&#xD;&#xA;    let routePath = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;    if (nestedCompOwner) {&#xD;&#xA;        let nestedCompOwnerFkDescr = getNestedCompositionalOwnerForeignKeyDescriptor(entity, nestedCompOwner);&#xD;&#xA;&#xD;&#xA;        let nestedCompOwnerIdDtoField = createElement(&quot;DTO-Field&quot;, getFieldFormat(nestedCompOwnerFkDescr.name), command.id);&#xD;&#xA;        nestedCompOwnerIdDtoField.typeReference.setType(nestedCompOwnerFkDescr.typeId)&#xD;&#xA;        if (nestedCompOwnerFkDescr.specialization == FKSpecialization.Explicit) {&#xD;&#xA;            nestedCompOwnerIdDtoField.setMapping(nestedCompOwnerFkDescr.id);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        let param = createElement(&quot;Parameter&quot;, getParameterFormat(nestedCompOwnerFkDescr.name), operation.id);&#xD;&#xA;        param.typeReference.setType(nestedCompOwnerFkDescr.typeId);&#xD;&#xA;        param.setMapping(nestedCompOwnerIdDtoField.id);&#xD;&#xA;&#xD;&#xA;        routePath = getRoutePath(nestedCompOwnerFkDescr, entity, entityPkDescr);&#xD;&#xA;    } else {&#xD;&#xA;        routePath = getRoutePath(null, null, entityPkDescr);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    setHttpStereotype(operation, &quot;Http Settings&quot;, {&quot;Verb&quot;: &quot;PUT&quot;, &quot;Route&quot;: routePath});&#xD;&#xA;    addPrimaryKeys(command, operation, entityPkDescr);&#xD;&#xA;&#xD;&#xA;    let commandParam = createElement(&quot;Parameter&quot;, getParameterFormat(&quot;command&quot;), operation.id);&#xD;&#xA;    commandParam.typeReference.setType(command.id);&#xD;&#xA;&#xD;&#xA;    for (let attribute of entity.getChildren(&quot;Attribute&quot;)&#xD;&#xA;        .filter(attr =&gt; !hasAttributeInCommand(command, attr) &amp;&amp; !legacyPartitionKey(attr))) {&#xD;&#xA;            let field = createElement(&quot;DTO-Field&quot;, getFieldFormat(attribute.name), command.id);&#xD;&#xA;            field.typeReference.setType(attribute.typeReference.typeId)&#xD;&#xA;            field.setMapping(attribute.id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    command.collapse();&#xD;&#xA;    operation.collapse();&#xD;&#xA;&#xD;&#xA;    function hasAttributeInCommand(command, attribute) {&#xD;&#xA;        return command.getChildren(&quot;DTO-Field&quot;).some(x =&gt; x.name == attribute.name);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function createCqrsDeleteOperation(service, entity, entityFolder) {&#xD;&#xA;    let nestedCompOwner = getNestedCompositionalOwner(entity);&#xD;&#xA;    let baseName = getBaseNameForElement(nestedCompOwner, entity, false);&#xD;&#xA;    let expectedCommandName = `Delete${baseName}Command`;&#xD;&#xA;&#xD;&#xA;    if (hasElementInFolder(entityFolder, expectedCommandName)) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let command = createElement(&quot;Command&quot;, expectedCommandName, entityFolder.id);&#xD;&#xA;    command.setMapping(entity.id);&#xD;&#xA;    command.setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;&#xD;&#xA;    let operation = createElement(&quot;Operation&quot;, getOperationFormat(&quot;Delete&quot;, nestedCompOwner, entity), service.id);&#xD;&#xA;    operation.setMapping(command.id);&#xD;&#xA;&#xD;&#xA;    let entityPkDescr = getPrimaryKeyDescriptor(entity);&#xD;&#xA;    let routePath = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;    if (nestedCompOwner) {&#xD;&#xA;        let nestedCompOwnerFkDescr = getNestedCompositionalOwnerForeignKeyDescriptor(entity, nestedCompOwner);&#xD;&#xA;&#xD;&#xA;        let nestedCompOwnerIdDtoField = createElement(&quot;DTO-Field&quot;, getFieldFormat(nestedCompOwnerFkDescr.name), command.id);&#xD;&#xA;        nestedCompOwnerIdDtoField.typeReference.setType(nestedCompOwnerFkDescr.typeId)&#xD;&#xA;        if (nestedCompOwnerFkDescr.specialization == FKSpecialization.Explicit) {&#xD;&#xA;            nestedCompOwnerIdDtoField.setMapping(nestedCompOwnerFkDescr.id);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        let param = createElement(&quot;Parameter&quot;, getParameterFormat(nestedCompOwnerFkDescr.name), operation.id);&#xD;&#xA;        param.typeReference.setType(nestedCompOwnerFkDescr.typeId);&#xD;&#xA;        param.setMapping(nestedCompOwnerIdDtoField.id);&#xD;&#xA;&#xD;&#xA;        routePath = getRoutePath(nestedCompOwnerFkDescr, entity, entityPkDescr);&#xD;&#xA;    } else {&#xD;&#xA;        routePath = getRoutePath(null, null, entityPkDescr);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    setHttpStereotype(operation, &quot;Http Settings&quot;, {&quot;Verb&quot;: &quot;DELETE&quot;, &quot;Route&quot;: routePath});&#xD;&#xA;    addPrimaryKeys(command, operation, entityPkDescr);&#xD;&#xA;&#xD;&#xA;    let commandParam = createElement(&quot;Parameter&quot;, getParameterFormat(&quot;command&quot;), operation.id);&#xD;&#xA;    commandParam.typeReference.setType(command.id);&#xD;&#xA;&#xD;&#xA;    command.collapse();&#xD;&#xA;    operation.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA;========================&#xD;&#xA;   UTILITY FUNCTIONS&#xD;&#xA;========================&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;function initConstants() {&#xD;&#xA;    _aggregateRootCache = Object.create(null);&#xD;&#xA;    _nestedCompositionalOwnerCache = Object.create(null);&#xD;&#xA;&#xD;&#xA;    PKSpecialization = {&#xD;&#xA;        Implicit: &quot;implicit&quot;,&#xD;&#xA;        Explicit: &quot;explicit&quot;,&#xD;&#xA;        ExplicitComposite: &quot;explicit_composite&quot;,&#xD;&#xA;        Unknown: &quot;unknown&quot;&#xD;&#xA;    };&#xD;&#xA;    FKSpecialization = {&#xD;&#xA;        Implicit: &quot;implicit&quot;,&#xD;&#xA;        Explicit: &quot;explicit&quot;,&#xD;&#xA;    };&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;async function showObject(object) {&#xD;&#xA;    await dialogService.info(JSON.stringify(object, null, &quot;  &quot;));&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;async function preselectOrPromptEntity(preselectedDomainClassName) {&#xD;&#xA;    let classes = lookupTypesOf(&quot;Class&quot;).filter(x =&gt; isAggregateRoot(x) || x.hasStereotype(&quot;Repository&quot;) || ownerIsAggregateRoot(x));&#xD;&#xA;    if (classes.length == 0) {&#xD;&#xA;        await dialogService.info(&quot;No Domain types could be found. Please ensure that you have a reference to the Domain package and that at least one class exists in it.&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let classId = preselectedDomainClassName != null&#xD;&#xA;        ? classes.find(x =&gt; x.getName() === preselectedDomainClassName)?.id&#xD;&#xA;        : await dialogService.lookupFromOptions(classes.map((x)=&gt;({&#xD;&#xA;            id: x.id, &#xD;&#xA;            name: getFriendlyDisplayNameForClassSelection(x)&#xD;&#xA;            })));&#xD;&#xA;    if (classId == null) {&#xD;&#xA;        await dialogService.error(`No class found with id &quot;${classId}&quot;.`);&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let foundEntity = lookup(classId);&#xD;&#xA;    return foundEntity;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getFriendlyDisplayNameForClassSelection(element) {&#xD;&#xA;    let found = element.getAssociations(&quot;Association&quot;).filter(x =&gt; x.isSourceEnd() &amp;&amp; &#xD;&#xA;            !x.typeReference.isNullable &amp;&amp; &#xD;&#xA;            !x.typeReference.isCollection &amp;&amp; &#xD;&#xA;            isAggregateRoot(x.typeReference.getType()))[0]?.typeReference?.getType();&#xD;&#xA;    return !found ? element.getName() : `${element.getName()} (${found.getName()})`;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getServiceFromCurrentContext(entity, packageOrServiceElement) {&#xD;&#xA;    // Auto detect if we're running in the context of a service or package.&#xD;&#xA;    if (packageOrServiceElement.specialization === &quot;Service&quot;) {&#xD;&#xA;        return packageOrServiceElement;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // Must be a package. See if we can find an existing service with the name we expect.&#xD;&#xA;    let nestedCompOwner = getNestedCompositionalOwner(entity);&#xD;&#xA;    let expectedServiceName = getServiceName(nestedCompOwner, entity);&#xD;&#xA;    let services = packageOrServiceElement.getChildren(&quot;Service&quot;).filter(x =&gt; x.name === expectedServiceName);&#xD;&#xA;    if (services.length &gt; 0) {&#xD;&#xA;        return services[0];&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return createElement(&quot;Service&quot;, expectedServiceName, packageOrServiceElement.id);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getReturnTypeMediatypeProperty(element) {&#xD;&#xA;    return element.getStereotype(&quot;Http Settings&quot;).getProperty(&quot;Return Type Mediatype&quot;);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function isAggregateRoot(element) {&#xD;&#xA;    if (_aggregateRootCache[element.id]) {&#xD;&#xA;        return _aggregateRootCache[element.id];&#xD;&#xA;    }&#xD;&#xA;    let result = !element.getAssociations(&quot;Association&quot;)&#xD;&#xA;            .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);&#xD;&#xA;    _aggregateRootCache[element.id] = result;&#xD;&#xA;    return result;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getNestedCompositionalOwner(entity) {&#xD;&#xA;    if (_nestedCompositionalOwnerCache[entity.id]) {&#xD;&#xA;        return _nestedCompositionalOwnerCache[entity.id];&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let result = entity.getAssociations(&quot;Association&quot;)&#xD;&#xA;        .filter(x =&gt; isAggregateRoot(x.typeReference.getType()) &amp;&amp;&#xD;&#xA;            isOwnedBy(x) &amp;&amp;&#xD;&#xA;            // Let's only target collections for now as part of the nested compositional crud support&#xD;&#xA;            // as one-to-one relationships are more expensive to address and possibly not going to&#xD;&#xA;            // be needed.&#xD;&#xA;            x.getOtherEnd().typeReference.isCollection) [0];&#xD;&#xA;    if(result) {&#xD;&#xA;        _nestedCompositionalOwnerCache[entity.id] = result.typeReference.getType();&#xD;&#xA;    }&#xD;&#xA;    return result;&#xD;&#xA;&#xD;&#xA;    function isOwnedBy(association) {&#xD;&#xA;        return association.isSourceEnd() &amp;&amp; &#xD;&#xA;            !association.typeReference.isNullable &amp;&amp; &#xD;&#xA;            !association.typeReference.isCollection;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function ownerIsAggregateRoot(entity) {&#xD;&#xA;    let result = getNestedCompositionalOwner(entity);&#xD;&#xA;    return result ? true : false;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getEntityFolder(service, entity) {&#xD;&#xA;    let nestedCompOwner = getNestedCompositionalOwner(entity);&#xD;&#xA;    let expectedFolderName = getFolderName(nestedCompOwner, entity);&#xD;&#xA;    var existing = service.getParent().getChildren().find(x =&gt; x.name == expectedFolderName);&#xD;&#xA;    var folder = existing || createElement(&quot;Folder&quot;, expectedFolderName, service.getParent().id);&#xD;&#xA;    return folder;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function hasElementInFolder(entityFolder, expectedElementName) {&#xD;&#xA;    return entityFolder.getChildren().some(x =&gt; x.name == expectedElementName);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function setHttpStereotype(element, stereotypeName, props) {&#xD;&#xA;    let stereotype = element.getStereotype(stereotypeName);&#xD;&#xA;    for (let key of Object.keys(props)) {&#xD;&#xA;        stereotype.getProperty(key).setValue(props[key]);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getSurrogateKeyType() {&#xD;&#xA;    const typeNameToIdMap = new Map();&#xD;&#xA;    typeNameToIdMap.set(&quot;guid&quot;, &quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;);&#xD;&#xA;    typeNameToIdMap.set(&quot;int&quot;, &quot;fb0a362d-e9e2-40de-b6ff-5ce8167cbe74&quot;);&#xD;&#xA;    typeNameToIdMap.set(&quot;long&quot;, &quot;33013006-E404-48C2-AC46-24EF5A5774FD&quot;);&#xD;&#xA;&#xD;&#xA;    let typeName = application.getSettings(&quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;)?.getField(&quot;Key Type&quot;)?.value ?? &quot;int&quot;;&#xD;&#xA;    if (typeNameToIdMap.has(typeName)) {&#xD;&#xA;        return typeNameToIdMap.get(typeName);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return typeNameToIdMap.get(&quot;guid&quot;);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Returns a dictionary instead of element to help deal with explicit vs implicit keys&#xD;&#xA;function getPrimaryKeyDescriptor(entity) {&#xD;&#xA;    if (!entity) {&#xD;&#xA;        throw new Error(&quot;entity not specified&quot;);&#xD;&#xA;    }&#xD;&#xA;    let pks = entity.getChildren(&quot;Attribute&quot;)&#xD;&#xA;        .filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;&#xD;&#xA;    let mapPaths = [];&#xD;&#xA;    if (pks.length == 1) {&#xD;&#xA;        mapPaths.push(pks[0].id);&#xD;&#xA;    } else if (pks.length == 0) {&#xD;&#xA;        let inheritResult = getInheritanceAttributes(entity);&#xD;&#xA;        if (inheritResult) {&#xD;&#xA;            pks = inheritResult.attributes.filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;            if (pks) {&#xD;&#xA;                mapPaths.push(inheritResult.association.id);&#xD;&#xA;                mapPaths.push(pks[0].id)&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    switch (true) {&#xD;&#xA;        case pks.length == 0:&#xD;&#xA;            return {&#xD;&#xA;                id: null,&#xD;&#xA;                name: getDomainAttributeNameFormat(&quot;Id&quot;),&#xD;&#xA;                typeId: getSurrogateKeyType(),&#xD;&#xA;                specialization: PKSpecialization.Implicit,&#xD;&#xA;                compositeKeys: null,&#xD;&#xA;                mapPath: null&#xD;&#xA;            };&#xD;&#xA;        case pks.length == 1:&#xD;&#xA;            let pkAttr = pks[0];&#xD;&#xA;            return {&#xD;&#xA;                id: pkAttr.id,&#xD;&#xA;                name: getDomainAttributeNameFormat(pkAttr.name),&#xD;&#xA;                typeId: pkAttr.typeReference.typeId,&#xD;&#xA;                specialization: PKSpecialization.Explicit,&#xD;&#xA;                compositeKeys: null,&#xD;&#xA;                mapPath: mapPaths&#xD;&#xA;            };&#xD;&#xA;        case pks.length &gt; 1:&#xD;&#xA;            return {&#xD;&#xA;                id: null,&#xD;&#xA;                name: null,&#xD;&#xA;                typeId: null,&#xD;&#xA;                specialization: PKSpecialization.ExplicitComposite,&#xD;&#xA;                compositeKeys: pks.map(x =&gt; { &#xD;&#xA;                    return {&#xD;&#xA;                        id: x.id,&#xD;&#xA;                        name: getDomainAttributeNameFormat(x.name),&#xD;&#xA;                        typeId: x.typeReference.typeId&#xD;&#xA;                    }; &#xD;&#xA;                }),&#xD;&#xA;                mapPath: null&#xD;&#xA;            };&#xD;&#xA;        default:&#xD;&#xA;            return {&#xD;&#xA;                id: null,&#xD;&#xA;                name: null,&#xD;&#xA;                typeId: null,&#xD;&#xA;                specialization: PKSpecialization.Unknown,&#xD;&#xA;                compositeKeys: null,&#xD;&#xA;                mapPath: null&#xD;&#xA;            };&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getInheritanceAttributes(entity) {&#xD;&#xA;    let association = entity.getAssociations(&quot;Generalization&quot;)[0];&#xD;&#xA;    if (association) {&#xD;&#xA;        return { &#xD;&#xA;            association: association,&#xD;&#xA;            attributes: association.typeReference.getType().getChildren(&quot;Attribute&quot;) &#xD;&#xA;        };&#xD;&#xA;    }&#xD;&#xA;    return null;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Returns a dictionary instead of element to help deal with explicit vs implicit keys&#xD;&#xA;function getNestedCompositionalOwnerForeignKeyDescriptor(entity, nestedCompOwner) {&#xD;&#xA;    if (!entity) {&#xD;&#xA;        throw new Error(&quot;entity not specified&quot;);&#xD;&#xA;    }&#xD;&#xA;    if (!nestedCompOwner) {&#xD;&#xA;        throw new Error(&quot;nestedCompOwner not specified&quot;);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let explicitFkAttr = entity.getChildren(&quot;Attribute&quot;)&#xD;&#xA;        .filter(x =&gt; x.name.toLowerCase().indexOf(nestedCompOwner.name.toLowerCase()) &gt;= 0 &amp;&amp; x.hasStereotype(&quot;Foreign Key&quot;))[0];&#xD;&#xA;    &#xD;&#xA;    if (explicitFkAttr) {&#xD;&#xA;        return {&#xD;&#xA;            name: getDomainAttributeNameFormat(explicitFkAttr.name),&#xD;&#xA;            typeId: explicitFkAttr.typeReference.typeId,&#xD;&#xA;            id: explicitFkAttr.id,&#xD;&#xA;            specialization: FKSpecialization.Explicit&#xD;&#xA;        };&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    return {&#xD;&#xA;        name: getDomainAttributeNameFormat(`${nestedCompOwner.name}Id`),&#xD;&#xA;        typeId: getSurrogateKeyType(),&#xD;&#xA;        id: null,&#xD;&#xA;        specialization: FKSpecialization.Implicit&#xD;&#xA;    };&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function addPrimaryKeys(commandQuery, operation, entityPkDescr) {&#xD;&#xA;    switch (entityPkDescr.specialization) {&#xD;&#xA;        case PKSpecialization.Implicit:&#xD;&#xA;        case PKSpecialization.Explicit:&#xD;&#xA;            {&#xD;&#xA;                let primaryKeyDtoField = createElement(&quot;DTO-Field&quot;, getFieldFormat(entityPkDescr.name), commandQuery.id);&#xD;&#xA;                primaryKeyDtoField.typeReference.setType(entityPkDescr.typeId);&#xD;&#xA;                if (entityPkDescr.specialization == PKSpecialization.Explicit) {&#xD;&#xA;                    primaryKeyDtoField.setMapping(entityPkDescr.mapPath);&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                let operationParamId = createElement(&quot;Parameter&quot;, getParameterFormat(entityPkDescr.name), operation.id);&#xD;&#xA;                operationParamId.typeReference.setType(primaryKeyDtoField.typeReference.typeId);&#xD;&#xA;                operationParamId.setMapping(primaryKeyDtoField.id);&#xD;&#xA;            }&#xD;&#xA;            break;&#xD;&#xA;        case PKSpecialization.ExplicitComposite:&#xD;&#xA;            for (let key of entityPkDescr.compositeKeys) {&#xD;&#xA;                let primaryKeyDtoField = createElement(&quot;DTO-Field&quot;, getFieldFormat(key.name), commandQuery.id);&#xD;&#xA;                primaryKeyDtoField.typeReference.setType(key.typeId)&#xD;&#xA;                primaryKeyDtoField.setMapping(key.id);&#xD;&#xA;&#xD;&#xA;                let operationParamId = createElement(&quot;Parameter&quot;, getParameterFormat(key.name), operation.id);&#xD;&#xA;                operationParamId.typeReference.setType(primaryKeyDtoField.typeReference.typeId);&#xD;&#xA;                operationParamId.setMapping(primaryKeyDtoField.id);&#xD;&#xA;            }&#xD;&#xA;            break;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getRoutePath(nestedCompOwnerFkDescr, entity, entityPkDescr) {&#xD;&#xA;    let list = []&#xD;&#xA;    if(nestedCompOwnerFkDescr) {&#xD;&#xA;        list.push(`{${getParameterFormat(nestedCompOwnerFkDescr.name)}}`);&#xD;&#xA;    }&#xD;&#xA;    if(entity) {&#xD;&#xA;        list.push(`${getRoutingFormat(entity.name)}`);&#xD;&#xA;    }&#xD;&#xA;    if (entityPkDescr) {&#xD;&#xA;        switch (entityPkDescr.specialization) {&#xD;&#xA;            case PKSpecialization.Implicit:&#xD;&#xA;            case PKSpecialization.Explicit:&#xD;&#xA;                list.push(`{${getParameterFormat(entityPkDescr.name)}}`);&#xD;&#xA;                break;&#xD;&#xA;            case PKSpecialization.ExplicitComposite:&#xD;&#xA;                list.push(entityPkDescr.compositeKeys.map(x =&gt; `{${getParameterFormat(x.name)}}`))&#xD;&#xA;                break;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    if (list.length == 0) {&#xD;&#xA;        return &quot;&quot;;&#xD;&#xA;    }&#xD;&#xA;    return list.join(&quot;/&quot;);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getDomainAttributeNamingConvention() {&#xD;&#xA;    const domainSettingsId = &quot;c4d1e35c-7c0d-4926-afe0-18f17563ce17&quot;;&#xD;&#xA;    return application.getSettings(domainSettingsId)&#xD;&#xA;        ?.getField(&quot;Attribute Naming Convention&quot;)?.value ?? &quot;pascal-case&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Just in case someone still uses this convention. Used to filter out those attributes when mapping&#xD;&#xA;// to domain entities that are within a Cosmos DB paradigm.&#xD;&#xA;function legacyPartitionKey(attribute) {&#xD;&#xA;    return attribute.hasStereotype(&quot;Partition Key&quot;) &amp;&amp; attribute.name === &quot;PartitionKey&quot;;&#xD;&#xA;}" isActive="true" />
              </properties>
            </stereotype>
            <stereotype stereotypeDefinitionId="cbe77364-d1d0-400b-a8c4-646a4c869612" name="Option Settings">
              <comment />
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="b2c3a117-23d3-47e5-8b83-5b902c55a226" display="Icon" isActive="true" />
                <property name="0abff08a-3986-40b1-a28f-4cc03c4fc1ec" display="Shortcut" value="ctrl + shift + u" isActive="true" />
                <property name="79f6973f-5e3a-4618-9d4c-d7cc604bffe0" display="Shortcut (macOS)" isActive="true" />
                <property name="e034a0ca-0101-4594-8384-43048b714578" display="Type Order" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
      </childElements>
    </childElement>
  </childElements>
</class>