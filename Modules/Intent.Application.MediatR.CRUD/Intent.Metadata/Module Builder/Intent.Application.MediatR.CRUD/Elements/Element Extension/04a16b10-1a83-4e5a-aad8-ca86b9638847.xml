<?xml version="1.0" encoding="utf-8"?>
<class id="04a16b10-1a83-4e5a-aad8-ca86b9638847" type="Element Extension" typeId="e3c7b1ca-f080-45c1-b56f-8d44226c8e20">
  <name>Command Extension</name>
  <display>Command Extension: Command</display>
  <isAbstract>false</isAbstract>
  <sort-children>by-type-then-manually</sort-children>
  <genericTypes />
  <typeReference id="d5c7309d-9ed1-479d-9477-8e564aea5624">
    <typeId>ccf14eb6-3a55-4d81-b5b9-d27311c70cb9</typeId>
    <isNavigable>true</isNavigable>
    <isNullable>false</isNullable>
    <isCollection>false</isCollection>
    <isRequired>true</isRequired>
    <typePackageName>Intent.Modelers.Services.CQRS</typePackageName>
    <typePackageId>45fb22e9-f493-4de5-9fe0-845f783aa9d4</typePackageId>
    <stereotypes />
    <genericTypeParameters />
  </typeReference>
  <isMapped>false</isMapped>
  <parentFolderId>46410048-55e6-4cc9-8ee0-dcd0e24a8ee2</parentFolderId>
  <packageId>4c21efb8-ec70-4d57-8ea4-d6e9f7e6b9f6</packageId>
  <packageName>Intent.Application.MediatR.CRUD</packageName>
  <stereotypes>
    <stereotype stereotypeDefinitionId="159cbc8e-a910-40f7-8e45-3edadbb863c2" name="Type Reference Extension Settings">
      <addedByDefault>true</addedByDefault>
      <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
      <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
      <properties>
        <property name="35226a83-3965-4224-8aef-20c68a0c5180" display="Mode" value="Inherit" isActive="true" />
        <property name="7d3859d4-084d-4ff0-8b31-850b4a8f8cd0" display="Display Name" isActive="false" />
        <property name="17223dbd-8df0-4700-8b81-02274ca3ed7f" display="Hint" isActive="false" />
        <property name="b2cef034-5706-45d2-8554-f4dc582a18ff" display="Target Types" isActive="false" />
        <property name="93e4efa9-186d-4e88-ae0a-491bcd6e6f5e" display="Default Type Id" isActive="false" />
        <property name="7a0c4185-1c08-4d3e-9185-14683d7a3bd0" display="Allow Collection" value="Inherit" isActive="false" />
        <property name="e3dc90ec-4f5f-4f20-b271-e28a5094dc91" display="Allow Nullable" value="Inherit" isActive="false" />
      </properties>
    </stereotype>
    <stereotype stereotypeDefinitionId="312eab00-f6db-492e-bbb4-e41383c8d3d8" name="Extension Settings">
      <addedByDefault>true</addedByDefault>
      <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
      <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
      <properties>
        <property name="8c964307-9d03-4a14-9fd3-40ea2607955a" display="Display Text Function" value="" isActive="true" />
        <property name="996ed45f-2318-4587-9618-73db3d7cfed0" display="Validate Function" value="" isActive="true" />
      </properties>
    </stereotype>
  </stereotypes>
  <metadata />
  <childElements>
    <childElement id="e97592ba-34be-4ad3-9a49-3a181b97b74b" type="Element Event Settings" typeId="3c628ab0-2407-4fb0-8507-ddde986cff2e">
      <name>NewElementEventSettings</name>
      <display>[events]</display>
      <isAbstract>false</isAbstract>
      <sort-children>by-type-then-by-name</sort-children>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>04a16b10-1a83-4e5a-aad8-ca86b9638847</parentFolderId>
      <packageId>4c21efb8-ec70-4d57-8ea4-d6e9f7e6b9f6</packageId>
      <packageName>Intent.Application.MediatR.CRUD</packageName>
      <stereotypes />
      <metadata />
      <childElements>
        <childElement id="56d22886-ac9a-4d4f-b92a-fc1a3dd6f76a" type="Element Event Handler" typeId="0ef412e3-d15a-45d3-bcd3-f646165f2eb6">
          <name>On Mapped</name>
          <display>On Mapped: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="b3d4b894-b4cd-4e4f-8423-0ecbf6143bdf">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>e97592ba-34be-4ad3-9a49-3a181b97b74b</parentFolderId>
          <packageId>4c21efb8-ec70-4d57-8ea4-d6e9f7e6b9f6</packageId>
          <packageName>Intent.Application.MediatR.CRUD</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="/// &lt;reference path=&quot;../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;const constants = {&#xD;&#xA;    PKSpecialization: {&#xD;&#xA;        Implicit: &quot;implicit&quot;,&#xD;&#xA;        Explicit: &quot;explicit&quot;,&#xD;&#xA;        ExplicitComposite: &quot;explicit_composite&quot;,&#xD;&#xA;        Unknown: &quot;unknown&quot;&#xD;&#xA;    },&#xD;&#xA;    FKSpecialization: {&#xD;&#xA;        Implicit: &quot;implicit&quot;,&#xD;&#xA;        Explicit: &quot;explicit&quot;,&#xD;&#xA;    }&#xD;&#xA;};&#xD;&#xA;function getFieldFormat(str) {&#xD;&#xA;    return toPascalCase(str);&#xD;&#xA;}&#xD;&#xA;function getDomainAttributeNameFormat(str) {&#xD;&#xA;    let convention = getDomainAttributeNamingConvention();&#xD;&#xA;    switch (convention) {&#xD;&#xA;        case &quot;pascal-case&quot;:&#xD;&#xA;            return toPascalCase(str);&#xD;&#xA;        case &quot;camel-case&quot;:&#xD;&#xA;            return toCamelCase(str);&#xD;&#xA;    }&#xD;&#xA;    return str;&#xD;&#xA;}&#xD;&#xA;function getOrCreateDto(elementName, parentElement) {&#xD;&#xA;    const expectedDtoName = `${elementName}Dto`;&#xD;&#xA;    let existingDto = parentElement.getChildren(&quot;DTO&quot;).filter(x =&gt; x.getName() === expectedDtoName)[0];&#xD;&#xA;    if (existingDto) {&#xD;&#xA;        return existingDto;&#xD;&#xA;    }&#xD;&#xA;    let dto = createElement(&quot;DTO&quot;, expectedDtoName, parentElement.id);&#xD;&#xA;    return dto;&#xD;&#xA;}&#xD;&#xA;function ensureDtoFields(autoAddPrimaryKey, mappedElement, dto) {&#xD;&#xA;    var _a, _b, _c;&#xD;&#xA;    let dtoUpdated = false;&#xD;&#xA;    let domainElement = mappedElement&#xD;&#xA;        .typeReference&#xD;&#xA;        .getType();&#xD;&#xA;    let attributesWithMapPaths = getAttributesWithMapPath(domainElement);&#xD;&#xA;    let isCreateMode = ((_b = (_a = dto.getMetadata(&quot;originalVerb&quot;)) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.startsWith(&quot;create&quot;)) == true;&#xD;&#xA;    for (var keyName of Object.keys(attributesWithMapPaths)) {&#xD;&#xA;        let entry = attributesWithMapPaths[keyName];&#xD;&#xA;        if (isCreateMode &amp;&amp; ((_c = entry.name) === null || _c === void 0 ? void 0 : _c.toLowerCase()) === &quot;id&quot;) {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;        if (isCreateMode &amp;&amp; isOwnerForeignKey(entry.name, domainElement)) {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;        if (dto.getChildren(&quot;DTO-Field&quot;).some(x =&gt; x.getName() == entry.name)) {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;        let field = createElement(&quot;DTO-Field&quot;, entry.name, dto.id);&#xD;&#xA;        field.typeReference.setType(entry.typeId);&#xD;&#xA;        field.typeReference.setIsNullable(entry.isNullable);&#xD;&#xA;        field.typeReference.setIsCollection(entry.isCollection);&#xD;&#xA;        field.setMapping(entry.mapPath);&#xD;&#xA;        dtoUpdated = true;&#xD;&#xA;    }&#xD;&#xA;    if (autoAddPrimaryKey &amp;&amp; !isCreateMode) {&#xD;&#xA;        let entityPkDescr = getPrimaryKeyDescriptor(domainElement);&#xD;&#xA;        addPrimaryKeys(dto, entityPkDescr);&#xD;&#xA;    }&#xD;&#xA;    if (dtoUpdated) {&#xD;&#xA;        dto.collapse();&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function addPrimaryKeys(dto, entityPkDescr) {&#xD;&#xA;    switch (entityPkDescr.specialization) {&#xD;&#xA;        case constants.PKSpecialization.Implicit:&#xD;&#xA;        case constants.PKSpecialization.Explicit:&#xD;&#xA;            {&#xD;&#xA;                if (dto.getChildren(&quot;DTO-Field&quot;).some(x =&gt; x.getName() == getFieldFormat(entityPkDescr.name))) {&#xD;&#xA;                    return;&#xD;&#xA;                }&#xD;&#xA;                let primaryKeyDtoField = createElement(&quot;DTO-Field&quot;, getFieldFormat(entityPkDescr.name), dto.id);&#xD;&#xA;                primaryKeyDtoField.typeReference.setType(entityPkDescr.typeId);&#xD;&#xA;                if (entityPkDescr.specialization == constants.PKSpecialization.Explicit) {&#xD;&#xA;                    primaryKeyDtoField.setMapping(entityPkDescr.mapPath);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            break;&#xD;&#xA;        case constants.PKSpecialization.ExplicitComposite:&#xD;&#xA;            for (let key of entityPkDescr.compositeKeys) {&#xD;&#xA;                if (dto.getChildren(&quot;DTO-Field&quot;).some(x =&gt; x.getName() == getFieldFormat(key.name))) {&#xD;&#xA;                    continue;&#xD;&#xA;                }&#xD;&#xA;                let primaryKeyDtoField = createElement(&quot;DTO-Field&quot;, getFieldFormat(key.name), dto.id);&#xD;&#xA;                primaryKeyDtoField.typeReference.setType(key.typeId);&#xD;&#xA;                primaryKeyDtoField.setMapping(key.id);&#xD;&#xA;            }&#xD;&#xA;            break;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function getSurrogateKeyType() {&#xD;&#xA;    var _a, _b, _c;&#xD;&#xA;    const commonTypes = {&#xD;&#xA;        guid: &quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;,&#xD;&#xA;        long: &quot;33013006-E404-48C2-AC46-24EF5A5774FD&quot;,&#xD;&#xA;        int: &quot;fb0a362d-e9e2-40de-b6ff-5ce8167cbe74&quot;&#xD;&#xA;    };&#xD;&#xA;    const javaTypes = {&#xD;&#xA;        long: &quot;e9e575eb-f8de-4ce4-9838-2d09665a752d&quot;,&#xD;&#xA;        int: &quot;b3e5cb3b-8a26-4346-810b-9789afa25a82&quot;&#xD;&#xA;    };&#xD;&#xA;    const typeNameToIdMap = new Map();&#xD;&#xA;    typeNameToIdMap.set(&quot;guid&quot;, commonTypes.guid);&#xD;&#xA;    typeNameToIdMap.set(&quot;int&quot;, lookup(javaTypes.int) != null ? javaTypes.int : commonTypes.int);&#xD;&#xA;    typeNameToIdMap.set(&quot;long&quot;, lookup(javaTypes.long) != null ? javaTypes.long : commonTypes.long);&#xD;&#xA;    let typeName = (_c = (_b = (_a = application.getSettings(&quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;)) === null || _a === void 0 ? void 0 : _a.getField(&quot;Key Type&quot;)) === null || _b === void 0 ? void 0 : _b.value) !== null &amp;&amp; _c !== void 0 ? _c : &quot;int&quot;;&#xD;&#xA;    if (typeNameToIdMap.has(typeName)) {&#xD;&#xA;        return typeNameToIdMap.get(typeName);&#xD;&#xA;    }&#xD;&#xA;    return typeNameToIdMap.get(&quot;guid&quot;);&#xD;&#xA;}&#xD;&#xA;function isOwnerForeignKey(attributeName, domainElement) {&#xD;&#xA;    for (let association of domainElement.getAssociations().filter(x =&gt; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable)) {&#xD;&#xA;        if (attributeName.toLowerCase().indexOf(association.name.toLowerCase()) &gt;= 0) {&#xD;&#xA;            return true;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    return false;&#xD;&#xA;}&#xD;&#xA;// Returns a dictionary instead of element to help deal with explicit vs implicit keys&#xD;&#xA;function getPrimaryKeyDescriptor(entity) {&#xD;&#xA;    if (!entity) {&#xD;&#xA;        throw new Error(&quot;entity not specified&quot;);&#xD;&#xA;    }&#xD;&#xA;    let primaryKeys = getPrimaryKeysWithMapPath(entity);&#xD;&#xA;    let keyLen = Object.keys(primaryKeys).length;&#xD;&#xA;    switch (true) {&#xD;&#xA;        case keyLen == 0:&#xD;&#xA;            return {&#xD;&#xA;                id: null,&#xD;&#xA;                name: getDomainAttributeNameFormat(&quot;Id&quot;),&#xD;&#xA;                typeId: getSurrogateKeyType(),&#xD;&#xA;                specialization: constants.PKSpecialization.Implicit,&#xD;&#xA;                compositeKeys: null,&#xD;&#xA;                mapPath: null&#xD;&#xA;            };&#xD;&#xA;        case keyLen == 1:&#xD;&#xA;            let pkAttr = primaryKeys[Object.keys(primaryKeys)[0]];&#xD;&#xA;            return {&#xD;&#xA;                id: pkAttr.id,&#xD;&#xA;                name: getDomainAttributeNameFormat(pkAttr.name),&#xD;&#xA;                typeId: pkAttr.typeId,&#xD;&#xA;                specialization: constants.PKSpecialization.Explicit,&#xD;&#xA;                compositeKeys: null,&#xD;&#xA;                mapPath: pkAttr.mapPath&#xD;&#xA;            };&#xD;&#xA;        case keyLen &gt; 1:&#xD;&#xA;            return {&#xD;&#xA;                id: null,&#xD;&#xA;                name: null,&#xD;&#xA;                typeId: null,&#xD;&#xA;                specialization: constants.PKSpecialization.ExplicitComposite,&#xD;&#xA;                compositeKeys: Object.values(primaryKeys).map((v) =&gt; {&#xD;&#xA;                    return {&#xD;&#xA;                        id: v.id,&#xD;&#xA;                        name: getDomainAttributeNameFormat(v.name),&#xD;&#xA;                        typeId: v.typeId,&#xD;&#xA;                        mapPath: v.mapPath&#xD;&#xA;                    };&#xD;&#xA;                }),&#xD;&#xA;                mapPath: null&#xD;&#xA;            };&#xD;&#xA;        default:&#xD;&#xA;            return {&#xD;&#xA;                id: null,&#xD;&#xA;                name: null,&#xD;&#xA;                typeId: null,&#xD;&#xA;                specialization: constants.PKSpecialization.Unknown,&#xD;&#xA;                compositeKeys: null,&#xD;&#xA;                mapPath: null&#xD;&#xA;            };&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;;&#xD;&#xA;function getPrimaryKeysWithMapPath(entity) {&#xD;&#xA;    let keydict = Object.create(null);&#xD;&#xA;    let keys = entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;    keys.forEach(key =&gt; keydict[key.id] = {&#xD;&#xA;        id: key.id,&#xD;&#xA;        name: key.getName(),&#xD;&#xA;        typeId: key.typeReference.typeId,&#xD;&#xA;        mapPath: [key.id],&#xD;&#xA;        isNullable: false,&#xD;&#xA;        isCollection: false&#xD;&#xA;    });&#xD;&#xA;    traverseInheritanceHierarchyForPrimaryKeys(keydict, entity, []);&#xD;&#xA;    return keydict;&#xD;&#xA;    function traverseInheritanceHierarchyForPrimaryKeys(keydict, curEntity, generalizationStack) {&#xD;&#xA;        if (!curEntity) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalizations = curEntity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;        if (generalizations.length == 0) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalization = generalizations[0];&#xD;&#xA;        generalizationStack.push(generalization.id);&#xD;&#xA;        let nextEntity = generalization.typeReference.getType();&#xD;&#xA;        let baseKeys = nextEntity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;        baseKeys.forEach(key =&gt; {&#xD;&#xA;            keydict[key.id] = {&#xD;&#xA;                id: key.id,&#xD;&#xA;                name: key.getName(),&#xD;&#xA;                typeId: key.typeReference.typeId,&#xD;&#xA;                mapPath: generalizationStack.concat([key.id]),&#xD;&#xA;                isNullable: key.typeReference.isNullable,&#xD;&#xA;                isCollection: key.typeReference.isCollection&#xD;&#xA;            };&#xD;&#xA;        });&#xD;&#xA;        traverseInheritanceHierarchyForPrimaryKeys(keydict, nextEntity, generalizationStack);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function getAttributesWithMapPath(entity) {&#xD;&#xA;    let attrDict = Object.create(null);&#xD;&#xA;    let attributes = entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp; !legacyPartitionKey(x));&#xD;&#xA;    attributes.forEach(attr =&gt; attrDict[attr.id] = {&#xD;&#xA;        id: attr.id,&#xD;&#xA;        name: attr.getName(),&#xD;&#xA;        typeId: attr.typeReference.typeId,&#xD;&#xA;        mapPath: [attr.id],&#xD;&#xA;        isNullable: false,&#xD;&#xA;        isCollection: false&#xD;&#xA;    });&#xD;&#xA;    traverseInheritanceHierarchyForAttributes(attrDict, entity, []);&#xD;&#xA;    return attrDict;&#xD;&#xA;    function traverseInheritanceHierarchyForAttributes(attrDict, curEntity, generalizationStack) {&#xD;&#xA;        if (!curEntity) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalizations = curEntity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;        if (generalizations.length == 0) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalization = generalizations[0];&#xD;&#xA;        generalizationStack.push(generalization.id);&#xD;&#xA;        let nextEntity = generalization.typeReference.getType();&#xD;&#xA;        let baseKeys = nextEntity.getChildren(&quot;Attribute&quot;).filter(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp; !legacyPartitionKey(x));&#xD;&#xA;        baseKeys.forEach(attr =&gt; {&#xD;&#xA;            attrDict[attr.id] = {&#xD;&#xA;                id: attr.id,&#xD;&#xA;                name: attr.getName(),&#xD;&#xA;                typeId: attr.typeReference.typeId,&#xD;&#xA;                mapPath: generalizationStack.concat([attr.id]),&#xD;&#xA;                isNullable: attr.typeReference.isNullable,&#xD;&#xA;                isCollection: attr.typeReference.isCollection&#xD;&#xA;            };&#xD;&#xA;        });&#xD;&#xA;        traverseInheritanceHierarchyForAttributes(attrDict, nextEntity, generalizationStack);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function getDomainAttributeNamingConvention() {&#xD;&#xA;    var _a, _b, _c;&#xD;&#xA;    const domainSettingsId = &quot;c4d1e35c-7c0d-4926-afe0-18f17563ce17&quot;;&#xD;&#xA;    return (_c = (_b = (_a = application.getSettings(domainSettingsId)) === null || _a === void 0 ? void 0 : _a.getField(&quot;Attribute Naming Convention&quot;)) === null || _b === void 0 ? void 0 : _b.value) !== null &amp;&amp; _c !== void 0 ? _c : &quot;pascal-case&quot;;&#xD;&#xA;}&#xD;&#xA;// Just in case someone still uses this convention. Used to filter out those attributes when mapping&#xD;&#xA;// to domain entities that are within a Cosmos DB paradigm.&#xD;&#xA;function legacyPartitionKey(attribute) {&#xD;&#xA;    return attribute.hasStereotype(&quot;Partition Key&quot;) &amp;&amp; attribute.name === &quot;PartitionKey&quot;;&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../common/on-map-functions.ts&quot; /&gt;&#xD;&#xA;function onMapCommand(element) {&#xD;&#xA;    var _a, _b, _c, _d;&#xD;&#xA;    const projectMappingSettingId = &quot;942eae46-49f1-450e-9274-a92d40ac35fa&quot;;&#xD;&#xA;    const mapFromDomainMappingSettingId = &quot;1f747d14-681c-4a20-8c68-34223f41b825&quot;;&#xD;&#xA;    var complexTypes = [&quot;Data Contract&quot;, &quot;Value Object&quot;];&#xD;&#xA;    let isOperationMappedCommand = element.getMapping() &amp;&amp; element.getMapping().getElement().specialization === &quot;Operation&quot;;&#xD;&#xA;    if (isOperationMappedCommand) {&#xD;&#xA;        //Add the entity PK for the repo lookup to invoke the operation&#xD;&#xA;        let entityPkDescr = getPrimaryKeyDescriptor(element);&#xD;&#xA;        addPrimaryKeys(element, entityPkDescr);&#xD;&#xA;        //check for return type&#xD;&#xA;        if (complexTypes.includes((_d = (_c = (_b = (_a = element.getMapping()) === null || _a === void 0 ? void 0 : _a.getElement()) === null || _b === void 0 ? void 0 : _b.typeReference) === null || _c === void 0 ? void 0 : _c.getType()) === null || _d === void 0 ? void 0 : _d.specialization)) {&#xD;&#xA;            getOrCreateCommandCrudDto(element, element, false, mapFromDomainMappingSettingId);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    let fields = element.getChildren(&quot;DTO-Field&quot;)&#xD;&#xA;        .filter(x =&gt; x.typeReference.getType() == null &amp;&amp; x.getMapping().getElement().specialization === &quot;Association&quot;);&#xD;&#xA;    fields.forEach(f =&gt; {&#xD;&#xA;        getOrCreateCommandCrudDto(element, f, true, projectMappingSettingId);&#xD;&#xA;    });&#xD;&#xA;    let complexFields = element.getChildren(&quot;DTO-Field&quot;)&#xD;&#xA;        .filter(x =&gt; {&#xD;&#xA;        var _a, _b, _c, _d;&#xD;&#xA;        return x.typeReference.getType() == null&#xD;&#xA;            &amp;&amp; (complexTypes.includes((_d = (_c = (_b = (_a = x.getMapping()) === null || _a === void 0 ? void 0 : _a.getElement()) === null || _b === void 0 ? void 0 : _b.typeReference) === null || _c === void 0 ? void 0 : _c.getType()) === null || _d === void 0 ? void 0 : _d.specialization));&#xD;&#xA;    });&#xD;&#xA;    complexFields.forEach(cf =&gt; {&#xD;&#xA;        getOrCreateCommandCrudDto(element, cf, false, projectMappingSettingId);&#xD;&#xA;    });&#xD;&#xA;}&#xD;&#xA;function getOrCreateCommandCrudDto(command, dtoField, autoAddPrimaryKey, mappingTypeSettingId) {&#xD;&#xA;    let mappedElement = dtoField.getMapping().getElement();&#xD;&#xA;    if (mappedElement.typeReference == null)&#xD;&#xA;        throw new Error(&quot;TypeReference is undefined&quot;);&#xD;&#xA;    let originalVerb = (command.getName().split(/(?=[A-Z])/))[0];&#xD;&#xA;    let domainName = mappedElement.typeReference.getType().getName();&#xD;&#xA;    let baseName = command.getMetadata(&quot;baseName&quot;)&#xD;&#xA;        ? `${command.getMetadata(&quot;baseName&quot;)}${domainName}`&#xD;&#xA;        : domainName;&#xD;&#xA;    let dtoName = `${originalVerb}${baseName}`;&#xD;&#xA;    let dto = getOrCreateDto(dtoName, command.getParent());&#xD;&#xA;    dto.setMetadata(&quot;originalVerb&quot;, originalVerb);&#xD;&#xA;    dto.setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;    dto.setMapping(mappedElement.typeReference.getTypeId(), mappingTypeSettingId);&#xD;&#xA;    ensureDtoFields(autoAddPrimaryKey, mappedElement, dto);&#xD;&#xA;    dtoField.typeReference.setType(dto.id);&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../common/command-on-map.ts&quot; /&gt;&#xD;&#xA;/**&#xD;&#xA; * Used by Intent.Modules\Modules\Intent.Modules.Metadata.DocumentDB&#xD;&#xA; *&#xD;&#xA; * Source code here:&#xD;&#xA; * https://github.com/IntentArchitect/Intent.Modules/blob/master/DesignerMacros/src/serivces-cqrs-crud/command-on-map/command-on-map.ts&#xD;&#xA; */&#xD;&#xA;onMapCommand(element);&#xD;&#xA;" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
      </childElements>
    </childElement>
  </childElements>
</class>