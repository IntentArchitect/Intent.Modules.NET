//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.13
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Intent.Modules.Eventing.GoogleCloud.PubSub.Templates.ImplementationTemplates.GoogleCloudPubSubSubscriberBackgroundService {
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using System;
    
    
    public partial class GoogleCloudPubSubSubscriberBackgroundServiceTemplate : CSharpTemplateBase<object> {
        
        public override string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 10 ""
            this.Write(@"using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Google.Cloud.PubSub.V1;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace ");
            
            #line default
            #line hidden
            
            #line 20 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Namespace ));
            
            #line default
            #line hidden
            
            #line 20 ""
            this.Write(";\r\n\r\npublic class ");
            
            #line default
            #line hidden
            
            #line 22 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( ClassName ));
            
            #line default
            #line hidden
            
            #line 22 ""
            this.Write(" : BackgroundService\r\n{\r\n    private readonly IServiceProvider _serviceProvider;\r" +
                    "\n    private readonly string _subscriptionId;\r\n    private readonly string _topi" +
                    "cId;\r\n    private SubscriberClient _subscriberClient;\r\n\r\n    public ");
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( ClassName ));
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write(@"(
        IServiceProvider serviceProvider,
        string subscriptionId,
        string topicId)
    {
        _serviceProvider = serviceProvider;
        _subscriptionId = subscriptionId;
        _topicId = topicId;
    }

    public override async Task StartAsync(CancellationToken cancellationToken)
    {
        var resourceManager = _serviceProvider.GetService<");
            
            #line default
            #line hidden
            
            #line 41 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( this.GetCloudResourceManagerInterfaceName() ));
            
            #line default
            #line hidden
            
            #line 41 ""
            this.Write(@">();
        if (resourceManager.ShouldSetupCloudResources)
        {
            await resourceManager.CreateTopicIfNotExistAsync(_topicId, cancellationToken);
            await resourceManager.CreateSubscriptionIfNotExistAsync((_subscriptionId, _topicId), cancellationToken);
        }
        var subscriptionName = SubscriptionName.FromProjectSubscription(resourceManager.ProjectId, _subscriptionId);
        _subscriberClient = await SubscriberClient.CreateAsync(subscriptionName);
        await base.StartAsync(cancellationToken);
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        while (!stoppingToken.IsCancellationRequested)
        {
            await _subscriberClient.StartAsync(async (message, token) =>
            {
                var subscriptionManager = _serviceProvider.GetService<");
            
            #line default
            #line hidden
            
            #line 58 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( this.GetEventBusSubscriptionManagerInterfaceName() ));
            
            #line default
            #line hidden
            
            #line 58 ""
            this.Write(@">();
                await subscriptionManager.DispatchAsync(_serviceProvider, message, token);
                
                return SubscriberClient.Reply.Ack;
            });
        }
    }

    public override async Task StopAsync(CancellationToken cancellationToken)
    {
        await _subscriberClient.StopAsync(cancellationToken);
        await base.StopAsync(cancellationToken);
    }
}
");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public override void Initialize() {
            base.Initialize();
        }
    }
}
