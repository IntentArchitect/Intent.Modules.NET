<?xml version="1.0" encoding="utf-8"?>
<settings version="3.1.1">
  <id>6233bac2-8524-441a-ae4f-1fef1a38abe6</id>
  <name>Soft Delete Settings</name>
  <designerReferences />
  <packageSettings />
  <packageExtensions />
  <elementSettings />
  <elementExtensions>
    <elementExtension type="Attribute" typeId="0090fb93-483e-41af-a11d-5ad2dc796adf">
      <mappingSettings />
      <macros>
        <macro trigger="on-changed">
          <script>const stereotypeId = "65860af3-8805-4a63-9fb9-3884b80f4380";
const boolTypeId = "e6f92b09-b2c5-4536-8270-a4d9e5bbd930";

if (!element.getParent().hasStereotype(stereotypeId)) {
    return;
}

let isDeleteAttr = element.getParent().getChildren("Attribute").filter(x =&gt; x.hasMetadata("soft-delete"))[0];
if (!isDeleteAttr) {
    return;
}

isDeleteAttr.setName("IsDeleted");
isDeleteAttr.typeReference.setType(boolTypeId);</script>
        </macro>
        <macro trigger="on-deleted">
          <script>const stereotypeId = "65860af3-8805-4a63-9fb9-3884b80f4380";
const boolTypeId = "e6f92b09-b2c5-4536-8270-a4d9e5bbd930";

if (element.getParent().hasStereotype(stereotypeId)) {
    let isDeleteAttr = element.getParent().getChildren("Attribute").filter(x =&gt; x.hasMetadata("soft-delete"))[0] ||
        createElement("Attribute", "IsDeleted", element.id);
    isDeleteAttr.typeReference.setType(boolTypeId);
    isDeleteAttr.setMetadata("soft-delete", true);
    return;
}

let isDeleteAttr = element.getParent().getChildren("Attribute").filter(x =&gt; x.hasMetadata("soft-delete"))[0];
if (isDeleteAttr) {
    isDeleteAttr.delete();
}
</script>
        </macro>
      </macros>
    </elementExtension>
    <elementExtension type="Class" typeId="04e12b51-ed12-42a3-9667-a6aa81bb6d10">
      <mappingSettings />
      <macros>
        <macro trigger="on-changed">
          <script>const stereotypeId = "65860af3-8805-4a63-9fb9-3884b80f4380";
const boolTypeId = "e6f92b09-b2c5-4536-8270-a4d9e5bbd930";

if (element.hasStereotype(stereotypeId)) {
    let isDeleteAttr = element.getChildren("Attribute").filter(x =&gt; x.hasMetadata("soft-delete"))[0] ||
        createElement("Attribute", "IsDeleted", element.id);
    isDeleteAttr.typeReference.setType(boolTypeId);
    isDeleteAttr.setMetadata("soft-delete", true);
    return;
}

let isDeleteAttr = element.getChildren("Attribute").filter(x =&gt; x.hasMetadata("soft-delete"))[0];
if (isDeleteAttr) {
    isDeleteAttr.delete();
}
</script>
        </macro>
      </macros>
    </elementExtension>
  </elementExtensions>
  <associationSettings />
  <associationExtensions />
</settings>