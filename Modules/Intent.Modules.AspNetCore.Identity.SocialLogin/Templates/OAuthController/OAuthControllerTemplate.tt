<#@ template language="C#" inherits="CSharpTemplateBase<object>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.AspNetCore.Identity.SocialLogin.Templates" #>
<#@ import namespace="Intent.Modules.AspNetCore.Identity.AccountController.Templates" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    [Route("api/oauth")]
    [ApiController]
    public class <#= ClassName #> : ControllerBase
    {
        private readonly SignInManager<<#= this.GetIdentityUserClass() #>> _signInManager;
        private readonly UserManager<<#= this.GetIdentityUserClass() #>> _userManager;
        private readonly <#= this.GetTokenServiceInterfaceName() #> _tokenService;
        private readonly ILogger<<#= ClassName #>> _logger;

        public <#= ClassName #>(
            SignInManager<<#= this.GetIdentityUserClass() #>> signInManager,
            UserManager<<#= this.GetIdentityUserClass() #>> userManager,
            <#= this.GetTokenServiceInterfaceName() #> tokenService,
            ILogger<<#= ClassName #>> logger)
        {
            _signInManager = signInManager;
            _userManager = userManager;
            _tokenService = tokenService;
            _logger = logger;
        }

        [HttpGet("providers", Name="GetProviders")]
        [AllowAnonymous]
        public async Task<ActionResult<List<string>>> GetProviders()
        {
            var providers = (await _signInManager.GetExternalAuthenticationSchemesAsync()).Select(x => x.Name).ToList();

            return Ok(providers);
        }

        [HttpPost]
        [AllowAnonymous]
        public async Task<ChallengeResult> StartChallenge(string provider,
            string? returnUrl /* even though this is not used here, it does actually end up in the callback */
        )
        {
            var properties = _signInManager.ConfigureExternalAuthenticationProperties(provider, null);
            properties.AllowRefresh = true;

            return Challenge(properties, new[] { provider });
        }

        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> Callback(string? returnUrl, string? remoteError)
        {
            var info = await _signInManager.GetExternalLoginInfoAsync();
            if (info is null)
            {
                return BadRequest("Error loading external login information.");
            }

            // Duplicated from AccountController.Login START
            
            var email = "shaineg@gmail.com";
            var password = "Pass1234!";

            var user = await _userManager.FindByEmailAsync(email);
            if (user == null ||
                !await _userManager.CheckPasswordAsync(user, password))
            {
                _logger.LogWarning("Invalid login attempt.");
                return Forbid();
            }

            if (await _userManager.IsLockedOutAsync(user))
            {
                _logger.LogWarning("User account locked out.");
                return Forbid();
            }

            var claims = await _userManager.GetClaimsAsync(user);
            var roles = await _userManager.GetRolesAsync(user);
            foreach (var role in roles)
            {
                claims.Add(new Claim("role", role));
            }

            var accessToken = _tokenService.GenerateAccessToken(username: email, claims: claims.ToArray());
            var newRefreshToken = _tokenService.GenerateRefreshToken();

            user.RefreshToken = newRefreshToken.Token;
            user.RefreshTokenExpired = newRefreshToken.Expiry;
            await _userManager.UpdateAsync(user);

            _logger.LogInformation("User logged in.");

            var token = new TokenResultDto
            {
                AuthenticationToken = accessToken,
                RefreshToken = newRefreshToken.Token,
            };
            
            // Duplicated from AccountController.Login END
            
            var options = new CookieOptions()
            {
                //Needed so that domain.com can access  the cookie set by api.domain.com
                //Domain = settings.AppDomain,
                Expires = DateTime.UtcNow.AddMinutes(1),
            };

            Response.Cookies.Append(
                "OurCookieName", // <-- Key
                JsonSerializer.Serialize(token)
                /*Common.IdentityConstants.AuthTokenHolderCookieName,
                JsonConvert.SerializeObject(result, new JsonSerializerSettings
                {
                    ContractResolver = new DefaultContractResolver
                    {
                        NamingStrategy = new CamelCaseNamingStrategy()
                    },
                    Formatting = Formatting.Indented
                })*/, options);
            
            return Ok();
        }

    }
}