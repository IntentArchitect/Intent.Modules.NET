<#@ template language="C#" inherits="CSharpTemplateBase<object, Intent.Modules.IdentityServer4.SecureTokenServer.Templates.IdentityServerConfiguration.IdentityConfigurationDecorator>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
using System;
using System.Collections.Generic;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public static class <#= ClassName #>
    {
        public static IServiceCollection ConfigureIdentityServer(this IServiceCollection services, IConfiguration configuration)
        {
            var idServerBuilder = services.AddIdentityServer();
            <#= GetServiceConfigurations("            ") #>
            idServerBuilder.AddInMemoryClients(configuration.GetSection("IdentityServer:Clients"))
                .AddInMemoryApiResources(configuration.GetSection("IdentityServer:ApiResources"))
                .AddInMemoryApiScopes(configuration.GetSection("IdentityServer:ApiScopes"))
                .AddInMemoryIdentityResources(configuration.GetSection("IdentityServer:IdentityResources"));

            return services;
        }
        <#=  GetDecoratorsOutput(x => x.Methods()) #>
    }
}