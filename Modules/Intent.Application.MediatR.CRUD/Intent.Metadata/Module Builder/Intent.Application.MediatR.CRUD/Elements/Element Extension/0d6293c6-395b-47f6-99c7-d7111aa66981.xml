<?xml version="1.0" encoding="utf-8"?>
<class id="0d6293c6-395b-47f6-99c7-d7111aa66981" type="Element Extension" typeId="e3c7b1ca-f080-45c1-b56f-8d44226c8e20">
  <name>Service Extension</name>
  <display>Service Extension: Service</display>
  <isAbstract>false</isAbstract>
  <sort-children>by-type-then-manually</sort-children>
  <genericTypes />
  <typeReference id="cfec30f5-ba0f-4e56-bbd3-102c78ff0e1c">
    <typeId>b16578a5-27b1-4047-a8df-f0b783d706bd</typeId>
    <isNavigable>true</isNavigable>
    <isNullable>false</isNullable>
    <isCollection>false</isCollection>
    <isRequired>true</isRequired>
    <typePackageName>Intent.Modelers.Services</typePackageName>
    <typePackageId>4ba53041-59f9-4446-a207-6da4fbdf86fe</typePackageId>
    <stereotypes />
    <genericTypeParameters />
  </typeReference>
  <isMapped>false</isMapped>
  <parentFolderId>46410048-55e6-4cc9-8ee0-dcd0e24a8ee2</parentFolderId>
  <packageId>4c21efb8-ec70-4d57-8ea4-d6e9f7e6b9f6</packageId>
  <packageName>Intent.Application.MediatR.CRUD</packageName>
  <stereotypes>
    <stereotype stereotypeDefinitionId="159cbc8e-a910-40f7-8e45-3edadbb863c2" name="Type Reference Extension Settings">
      <addedByDefault>true</addedByDefault>
      <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
      <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
      <properties>
        <property name="35226a83-3965-4224-8aef-20c68a0c5180" display="Mode" value="Inherit" isActive="true" />
        <property name="7d3859d4-084d-4ff0-8b31-850b4a8f8cd0" display="Display Name" isActive="false" />
        <property name="17223dbd-8df0-4700-8b81-02274ca3ed7f" display="Hint" isActive="false" />
        <property name="b2cef034-5706-45d2-8554-f4dc582a18ff" display="Target Types" isActive="false" />
        <property name="93e4efa9-186d-4e88-ae0a-491bcd6e6f5e" display="Default Type Id" isActive="false" />
        <property name="7a0c4185-1c08-4d3e-9185-14683d7a3bd0" display="Allow Collection" value="Inherit" isActive="false" />
        <property name="e3dc90ec-4f5f-4f20-b271-e28a5094dc91" display="Allow Nullable" value="Inherit" isActive="false" />
      </properties>
    </stereotype>
    <stereotype stereotypeDefinitionId="312eab00-f6db-492e-bbb4-e41383c8d3d8" name="Extension Settings">
      <addedByDefault>true</addedByDefault>
      <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
      <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
      <properties>
        <property name="8c964307-9d03-4a14-9fd3-40ea2607955a" display="Display Text Function" value="" isActive="true" />
        <property name="996ed45f-2318-4587-9618-73db3d7cfed0" display="Validate Function" value="" isActive="true" />
      </properties>
    </stereotype>
  </stereotypes>
  <metadata />
  <childElements>
    <childElement id="b03de4cd-ac32-48f8-af0c-8df938845d98" type="Context Menu" typeId="d45e383d-90ba-4b64-aca7-34ca100cea21">
      <name>[context menu]</name>
      <display>[context menu]</display>
      <isAbstract>false</isAbstract>
      <sort-children>by-type-then-manually</sort-children>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>0d6293c6-395b-47f6-99c7-d7111aa66981</parentFolderId>
      <packageId>4c21efb8-ec70-4d57-8ea4-d6e9f7e6b9f6</packageId>
      <packageName>Intent.Application.MediatR.CRUD</packageName>
      <stereotypes />
      <metadata />
      <childElements>
        <childElement id="f68e3c40-be00-44d0-9a67-196dc1d96eae" type="Run Script Option" typeId="345d46fb-c500-409a-88c7-26720572c9af">
          <name>Create CRUD Operations</name>
          <display>Create CRUD Operations: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="c4f5d33d-f6ac-41db-a494-f812f2a0d649">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>b03de4cd-ac32-48f8-af0c-8df938845d98</parentFolderId>
          <packageId>4c21efb8-ec70-4d57-8ea4-d6e9f7e6b9f6</packageId>
          <packageName>Intent.Application.MediatR.CRUD</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="// Detect if we're running from the &quot;Execution Script dialogue&quot;, in which case we want to manually&#xD;&#xA;// set the element to something:&#xD;&#xA;let defaultDomainClassName = null;&#xD;&#xA;if (element?.id == null) {&#xD;&#xA;    // For testing as if a package was right clicked, substitute with package id:&#xD;&#xA;    // element = { id: &quot;7339add6-c32e-4d95-8e1b-1bbe86ca7f1c&quot; }; // Azure&#xD;&#xA;    // element = { id: &quot;ef5c352b-fc74-4f13-b61b-a970f8360b08&quot; }; // NestJS&#xD;&#xA;    element = { id: &quot;a7ab362f-e8a8-4490-90d5-484b0371d949&quot; };&#xD;&#xA;&#xD;&#xA;    // For element, substitute with service's element id:&#xD;&#xA;    // element = lookup(&quot;677c6801-e654-45c5-924e-886713db1f5e&quot;);&#xD;&#xA;&#xD;&#xA;    // When set, the dialog asking to select the class from the domain is skipped:&#xD;&#xA;    defaultDomainClassName = &quot;NewClass&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;let entity = await preselectOrPromptEntity(defaultDomainClassName);&#xD;&#xA;if (!entity) { return; }&#xD;&#xA;let service = getServiceFromCurrentContext(entity, element);&#xD;&#xA;&#xD;&#xA;let entityFolder = getEntityFolder(service, entity);&#xD;&#xA;createCqrsCreateOperation(entityFolder, entity);&#xD;&#xA;let resultCqrsTypeDto = createCqrsResultTypeDTO(entity, entityFolder);&#xD;&#xA;createCqrsFindByIdOperation(entity, entityFolder, resultCqrsTypeDto);&#xD;&#xA;createCqrsFindAllOperation(entity, entityFolder, resultCqrsTypeDto);&#xD;&#xA;createCqrsUpdateOperation(entity, entityFolder);&#xD;&#xA;createCqrsDeleteOperation(entity, entityFolder);&#xD;&#xA;&#xD;&#xA;// === FUNCTIONS ===&#xD;&#xA;&#xD;&#xA;async function showObject(object) {&#xD;&#xA;    await dialogService.info(JSON.stringify(object, null, &quot;  &quot;));&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function setHttpStereotype(element, stereotypeName, props) {&#xD;&#xA;    let stereotype = element.getStereotype(stereotypeName);&#xD;&#xA;    for (let key of Object.keys(props)) {&#xD;&#xA;        stereotype.getProperty(key).setValue(props[key]);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getSurrogateKeyType() {&#xD;&#xA;    const typeNameToIdMap = new Map();&#xD;&#xA;    typeNameToIdMap.set(&quot;guid&quot;, &quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;);&#xD;&#xA;    typeNameToIdMap.set(&quot;int&quot;, &quot;fb0a362d-e9e2-40de-b6ff-5ce8167cbe74&quot;);&#xD;&#xA;    typeNameToIdMap.set(&quot;long&quot;, &quot;33013006-E404-48C2-AC46-24EF5A5774FD&quot;);&#xD;&#xA;&#xD;&#xA;    let typeName = application.getSettings(&quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;)?.getField(&quot;Key Type&quot;)?.value ?? &quot;int&quot;;&#xD;&#xA;    if (typeNameToIdMap.has(typeName)) {&#xD;&#xA;        return typeNameToIdMap.get(typeName);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return typeNameToIdMap.get(&quot;guid&quot;);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function isAggregateRoot(element) {&#xD;&#xA;    return !element.getAssociations(&quot;Association&quot;)&#xD;&#xA;            .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function isUserMutable(attributeName) {&#xD;&#xA;    const userImmutableFieldNames = new Set([&quot;created&quot;, &quot;createdBy&quot;, &quot;id&quot;, &quot;updated&quot;, &quot;updatedBy&quot;]);&#xD;&#xA;    return !userImmutableFieldNames.has(attributeName.toLowerCase());&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;async function preselectOrPromptEntity(preselectedDomainClassName) {&#xD;&#xA;    let classes = lookupTypesOf(&quot;Class&quot;).filter(x =&gt; isAggregateRoot(x) || x.hasStereotype(&quot;Repository&quot;) || ownerIsAggregateRoot(x));&#xD;&#xA;    if (classes.length == 0) {&#xD;&#xA;        await dialogService.info(&quot;No Domain types could be found. Please ensure that you have a reference to the Domain package and that at least one class exists in it.&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let classId = preselectedDomainClassName != null&#xD;&#xA;        ? classes.find(x =&gt; x.getName() === preselectedDomainClassName)?.id&#xD;&#xA;        : await dialogService.lookupFromOptions(classes.map((x)=&gt;({&#xD;&#xA;            id: x.id, &#xD;&#xA;            name: getFriendlyDisplayNameForClassSelection(x)&#xD;&#xA;            })));&#xD;&#xA;    if (classId == null) {&#xD;&#xA;        await dialogService.error(`No class found with id &quot;${classId}&quot;.`);&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let foundEntity = lookup(classId);&#xD;&#xA;    return foundEntity;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getFriendlyDisplayNameForClassSelection(element) {&#xD;&#xA;    let found = element.getAssociations(&quot;Association&quot;).filter(x =&gt; x.isSourceEnd() &amp;&amp; &#xD;&#xA;            !x.typeReference.isNullable &amp;&amp; &#xD;&#xA;            !x.typeReference.isCollection &amp;&amp; &#xD;&#xA;            isAggregateRoot(x.typeReference.getType()))[0]?.typeReference?.getType();&#xD;&#xA;    return !found ? element.getName() : `${element.getName()} (${found.getName()})`;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function ownerIsAggregateRoot(entity) {&#xD;&#xA;    return entity.getAssociations(&quot;Association&quot;)&#xD;&#xA;        .some(x =&gt; isAggregateRoot(x.typeReference.getType()));&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getServiceFromCurrentContext(entity, packageOrServiceElement) {&#xD;&#xA;    // Auto detect if we're running in the context of a service or package.&#xD;&#xA;    if (packageOrServiceElement.specialization === &quot;Service&quot;) {&#xD;&#xA;        return packageOrServiceElement;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // Must be a package. See if we can find an existing service with the name we expect.&#xD;&#xA;    let expectedServiceName = `${pluralize(toPascalCase(entity.name))}Service`;&#xD;&#xA;    let services = packageOrServiceElement.getChildren(&quot;Service&quot;).filter(x =&gt; x.name === expectedServiceName);&#xD;&#xA;    if (services.length &gt; 0) {&#xD;&#xA;        return services[0];&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return createElement(&quot;Service&quot;, expectedServiceName, packageOrServiceElement.id);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getDtoFolder(service, entity) {&#xD;&#xA;    // Get or create folder in which to place DTOs:&#xD;&#xA;    let folder = service.getParent().getChildren(&quot;Folder&quot;).find(x =&gt; x.name == pluralize(entity.name));&#xD;&#xA;    if (folder == null) {&#xD;&#xA;        folder = createElement(&quot;Folder&quot;, pluralize(entity.name), service.getParent().id);&#xD;&#xA;    }&#xD;&#xA;    return folder;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getPrimaryKeyTypeId(entity) {&#xD;&#xA;    let pks = entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;    let pkTypeId;&#xD;&#xA;    switch (true) {&#xD;&#xA;        case pks.length == 0:&#xD;&#xA;            pkTypeId = getSurrogateKeyType();&#xD;&#xA;            break;&#xD;&#xA;        case pks.length == 1:&#xD;&#xA;            pkTypeId = pks[0].typeReference?.typeId ?? getSurrogateKeyType();&#xD;&#xA;            break;&#xD;&#xA;        case pks.length &gt; 1:&#xD;&#xA;            pkTypeId = null;&#xD;&#xA;            break;&#xD;&#xA;    }&#xD;&#xA;    return pkTypeId;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getReturnTypeMediatypeProperty(element) {&#xD;&#xA;    return element.getStereotype(&quot;Http Settings&quot;).getProperty(&quot;Return Type Mediatype&quot;);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getEntityFolder(service, entity) {&#xD;&#xA;    var existing = service.getParent().getChildren().find(x =&gt; x.name == pluralize(entity.name));&#xD;&#xA;    var folder = existing || createElement(&quot;Folder&quot;, pluralize(entity.name), service.getParent().id);&#xD;&#xA;    return folder;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function createCqrsCreateOperation(entityFolder, entity) {&#xD;&#xA;    if (!entityFolder.getChildren().some(x =&gt; x.name == `Create${entity.name}Command`)) {&#xD;&#xA;        let command = createElement(&quot;Command&quot;, `Create${entity.name}Command`, entityFolder.id);&#xD;&#xA;        command.setMapping(entity.id);&#xD;&#xA;&#xD;&#xA;        let pkTypeId = getPrimaryKeyTypeId(entity);&#xD;&#xA;        command.typeReference.setType(pkTypeId);&#xD;&#xA;&#xD;&#xA;        for (let attribute of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp; !x.hasStereotype(&quot;Foreign Key&quot;) &amp;&amp; !x.hasStereotype(&quot;Partition Key&quot;))) {&#xD;&#xA;            let field = createElement(&quot;DTO-Field&quot;, attribute.name, command.id);&#xD;&#xA;            field.typeReference.setType(attribute.typeReference.typeId)&#xD;&#xA;            field.setMapping(attribute.id);&#xD;&#xA;        }&#xD;&#xA;        command.collapse();&#xD;&#xA;&#xD;&#xA;        let operation = createElement(&quot;Operation&quot;, &quot;Post&quot;, service.id);&#xD;&#xA;        operation.setMapping(command.id);&#xD;&#xA;&#xD;&#xA;        setHttpStereotype(operation, &quot;Http Settings&quot;, {&quot;Verb&quot;: &quot;POST&quot;, &quot;Route&quot;: &quot;&quot;});&#xD;&#xA;&#xD;&#xA;        let param = createElement(&quot;Parameter&quot;, &quot;command&quot;, operation.id);&#xD;&#xA;        param.typeReference.setType(command.id);&#xD;&#xA;&#xD;&#xA;        operation.typeReference.setType(pkTypeId);&#xD;&#xA;        if (pkTypeId) {&#xD;&#xA;            getReturnTypeMediatypeProperty(operation).setValue(&quot;application/json&quot;);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        operation.collapse();&#xD;&#xA;    } else {&#xD;&#xA;        let command = entityFolder.getChildren().filter(x =&gt; x.name == `Create${entity.name}Command`)[0];&#xD;&#xA;        let pkTypeId = getPrimaryKeyTypeId(entity);&#xD;&#xA;        command.typeReference.setType(pkTypeId);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function createCqrsResultTypeDTO(entity, entityFolder) {&#xD;&#xA;    let dto = null;&#xD;&#xA;    if (!entityFolder.getChildren().some(x =&gt; x.name == `${entity.name}DTO`)) {&#xD;&#xA;        dto = createElement(&quot;DTO&quot;, `${entity.name}DTO`, entityFolder.id);&#xD;&#xA;        dto.setMapping(entity.id);&#xD;&#xA;&#xD;&#xA;        if (entity.getChildren(&quot;Attribute&quot;).every(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp; !x.hasStereotype(&quot;Partition Key&quot;))) {&#xD;&#xA;            let idField = createElement(&quot;DTO-Field&quot;, &quot;id&quot;, dto.id);&#xD;&#xA;            idField.typeReference.setType(getSurrogateKeyType())&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        for (let attribute of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; !x.hasStereotype(&quot;Partition Key&quot;))) {&#xD;&#xA;            let field = createElement(&quot;DTO-Field&quot;, attribute.name, dto.id);&#xD;&#xA;            field.typeReference.setType(attribute.typeReference.typeId);&#xD;&#xA;            field.typeReference.setIsNullable(attribute.typeReference.isNullable);&#xD;&#xA;            field.typeReference.setIsCollection(attribute.typeReference.isCollection);&#xD;&#xA;            field.setMapping(attribute.id);&#xD;&#xA;        }&#xD;&#xA;        dto.collapse();&#xD;&#xA;    } else {&#xD;&#xA;        dto = entityFolder.getChildren().filter(x =&gt; x.name == `${entity.name}DTO`)[0];&#xD;&#xA;    }&#xD;&#xA;    return dto;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function createCqrsFindByIdOperation(entity, entityFolder, resultTypeDto) {&#xD;&#xA;    if (!entityFolder.getChildren().some(x =&gt; x.name == `Get${entity.name}ByIdQuery`)) {&#xD;&#xA;        let query = createElement(&quot;Query&quot;, `Get${entity.name}ByIdQuery`, entityFolder.id);&#xD;&#xA;        query.typeReference.setType(resultTypeDto.id)&#xD;&#xA;        query.setMapping(entity.id);&#xD;&#xA;&#xD;&#xA;        let operation = createElement(&quot;Operation&quot;, &quot;Get&quot;, service.id);&#xD;&#xA;        operation.setMapping(query.id);&#xD;&#xA;&#xD;&#xA;        setHttpStereotype(operation, &quot;Http Settings&quot;, {&quot;Verb&quot;: &quot;GET&quot;, &quot;Route&quot;: &quot;{id}&quot;});&#xD;&#xA;&#xD;&#xA;        if (entity.getChildren(&quot;Attribute&quot;).every(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp; !x.hasStereotype(&quot;Partition Key&quot;))) {&#xD;&#xA;            let idField = createElement(&quot;DTO-Field&quot;, &quot;id&quot;, query.id);&#xD;&#xA;            idField.typeReference.setType(getSurrogateKeyType())&#xD;&#xA;&#xD;&#xA;            let idParam = createElement(&quot;Parameter&quot;, &quot;id&quot;, operation.id);&#xD;&#xA;            idParam.typeReference.setType(getSurrogateKeyType());&#xD;&#xA;            idParam.setMapping(idField.id);&#xD;&#xA;        } else {&#xD;&#xA;            for (let attribute of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;                let field = createElement(&quot;DTO-Field&quot;, attribute.name, query.id);&#xD;&#xA;                field.typeReference.setType(attribute.typeReference.typeId)&#xD;&#xA;                field.setMapping(attribute.id);&#xD;&#xA;&#xD;&#xA;                let param = createElement(&quot;Parameter&quot;, field.getName(), operation.id);&#xD;&#xA;                param.typeReference.setType(field.typeReference.typeId);&#xD;&#xA;                param.setMapping(field.id);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        query.collapse();&#xD;&#xA;        operation.collapse();&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function createCqrsFindAllOperation(entity, entityFolder, resultTypeDto) {&#xD;&#xA;    if (!entityFolder.getChildren().some(x =&gt; x.name == `Get${pluralize(entity.name)}Query`)) {&#xD;&#xA;        let query = createElement(&quot;Query&quot;, `Get${pluralize(entity.name)}Query`, entityFolder.id);&#xD;&#xA;        query.typeReference.setType(resultTypeDto.id)&#xD;&#xA;        query.typeReference.setIsCollection(true);&#xD;&#xA;        query.collapse();&#xD;&#xA;&#xD;&#xA;        let operation = createElement(&quot;Operation&quot;, &quot;Get&quot;, service.id);&#xD;&#xA;        operation.setMapping(query.id);&#xD;&#xA;        setHttpStereotype(operation, &quot;Http Settings&quot;, {&quot;Verb&quot;: &quot;GET&quot;, &quot;Route&quot;: &quot;&quot;});&#xD;&#xA;&#xD;&#xA;        operation.collapse();&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function createCqrsUpdateOperation(entity, entityFolder) {&#xD;&#xA;    if (!entityFolder.getChildren().some(x =&gt; x.name == `Update${entity.name}Command`)) {&#xD;&#xA;        let command = createElement(&quot;Command&quot;, `Update${entity.name}Command`, entityFolder.id);&#xD;&#xA;        command.setMapping(entity.id);&#xD;&#xA;&#xD;&#xA;        let operation = createElement(&quot;Operation&quot;, &quot;Put&quot;, service.id);&#xD;&#xA;        operation.setMapping(command.id);&#xD;&#xA;        setHttpStereotype(operation, &quot;Http Settings&quot;, {&quot;Verb&quot;: &quot;PUT&quot;, &quot;Route&quot;: &quot;{id}&quot;});&#xD;&#xA;&#xD;&#xA;        if (entity.getChildren(&quot;Attribute&quot;).every(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp; !x.hasStereotype(&quot;Partition Key&quot;))) {&#xD;&#xA;            let idField = createElement(&quot;DTO-Field&quot;, &quot;id&quot;, command.id);&#xD;&#xA;            idField.typeReference.setType(getSurrogateKeyType())&#xD;&#xA;&#xD;&#xA;            let idParam = createElement(&quot;Parameter&quot;, &quot;id&quot;, operation.id);&#xD;&#xA;            idParam.typeReference.setType(getSurrogateKeyType());&#xD;&#xA;            idParam.setMapping(idField.id);&#xD;&#xA;        } else {&#xD;&#xA;            for (let attribute of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;                let field = createElement(&quot;DTO-Field&quot;, attribute.name, command.id);&#xD;&#xA;                field.typeReference.setType(attribute.typeReference.typeId)&#xD;&#xA;                field.setMapping(attribute.id);&#xD;&#xA;&#xD;&#xA;                let param = createElement(&quot;Parameter&quot;, field.getName(), operation.id);&#xD;&#xA;                param.typeReference.setType(field.typeReference.typeId);&#xD;&#xA;                param.setMapping(field.id);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        for (let attribute of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp; !x.hasStereotype(&quot;Partition Key&quot;))) {&#xD;&#xA;            let field = createElement(&quot;DTO-Field&quot;, attribute.name, command.id);&#xD;&#xA;            field.typeReference.setType(attribute.typeReference.typeId)&#xD;&#xA;            field.setMapping(attribute.id);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        let commandParam = createElement(&quot;Parameter&quot;, &quot;command&quot;, operation.id);&#xD;&#xA;        commandParam.typeReference.setType(command.id);&#xD;&#xA;&#xD;&#xA;        command.collapse();&#xD;&#xA;        operation.collapse();&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function createCqrsDeleteOperation(entity, entityFolder) {&#xD;&#xA;    if (!entityFolder.getChildren().some(x =&gt; x.name == `Delete${entity.name}Command`)) {&#xD;&#xA;        let command = createElement(&quot;Command&quot;, `Delete${entity.name}Command`, entityFolder.id);&#xD;&#xA;        command.setMapping(entity.id);&#xD;&#xA;&#xD;&#xA;        let operation = createElement(&quot;Operation&quot;, &quot;Delete&quot;, service.id);&#xD;&#xA;        operation.setMapping(command.id);&#xD;&#xA;        setHttpStereotype(operation, &quot;Http Settings&quot;, {&quot;Verb&quot;: &quot;DELETE&quot;, &quot;Route&quot;: &quot;{id}&quot;});&#xD;&#xA;&#xD;&#xA;        if (entity.getChildren(&quot;Attribute&quot;).every(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp; !x.hasStereotype(&quot;Partition Key&quot;))) {&#xD;&#xA;            let idField = createElement(&quot;DTO-Field&quot;, &quot;id&quot;, command.id);&#xD;&#xA;            idField.typeReference.setType(getSurrogateKeyType());&#xD;&#xA;&#xD;&#xA;            let idParam = createElement(&quot;Parameter&quot;, &quot;id&quot;, operation.id);&#xD;&#xA;            idParam.typeReference.setType(getSurrogateKeyType());&#xD;&#xA;            idParam.setMapping(idField.id);&#xD;&#xA;        } else {&#xD;&#xA;            for (let attribute of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;                let field = createElement(&quot;DTO-Field&quot;, attribute.name, command.id);&#xD;&#xA;                field.typeReference.setType(attribute.typeReference.typeId)&#xD;&#xA;                field.setMapping(attribute.id);&#xD;&#xA;&#xD;&#xA;                let param = createElement(&quot;Parameter&quot;, field.getName(), operation.id);&#xD;&#xA;                param.typeReference.setType(field.typeReference.typeId);&#xD;&#xA;                param.setMapping(field.id);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        command.collapse();&#xD;&#xA;        operation.collapse();&#xD;&#xA;    }&#xD;&#xA;}" isActive="true" />
              </properties>
            </stereotype>
            <stereotype stereotypeDefinitionId="cbe77364-d1d0-400b-a8c4-646a4c869612" name="Option Settings">
              <comment />
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="b2c3a117-23d3-47e5-8b83-5b902c55a226" display="Icon" isActive="true" />
                <property name="0abff08a-3986-40b1-a28f-4cc03c4fc1ec" display="Shortcut" value="ctrl + shift + u" isActive="true" />
                <property name="79f6973f-5e3a-4618-9d4c-d7cc604bffe0" display="Shortcut (macOS)" isActive="true" />
                <property name="e034a0ca-0101-4594-8384-43048b714578" display="Type Order" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
      </childElements>
    </childElement>
  </childElements>
</class>