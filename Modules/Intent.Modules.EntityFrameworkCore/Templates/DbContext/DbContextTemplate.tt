<#@ template  debug="true" inherits="CSharpTemplateBase<IList<Intent.Modelers.Domain.Api.ClassModel>, Intent.Modules.EntityFrameworkCore.Templates.DbContext.DbContextDecoratorBase>"#>
<#@ output extension=".cs" #>
<#@ import namespace="Intent.Modelers.Domain.Api" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public class <#= ClassName#> : <#= GetBaseTypes() #>
    {
        <#= GetPrivateFields() #>
        public <#= ClassName#>(<#= GetDbContextOptionsType() #> options<#= GetConstructorParameters() #>) : base(options)
        {<#= GetConstructorInitializations() #>
        }

<#
foreach (var typeConfiguration in _entityTypeConfigurations)
{
#>
        public DbSet<<#= GetEntityName(typeConfiguration.Template.Model) #>> <#= GetEntityName(typeConfiguration.Template.Model).ToPluralName()#> { get; set; }
<#
}
#>

        public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            <#= GetDecoratorsOutput(x => x.BeforeCallToSaveChangesAsync()) #>
            var result = await base.SaveChangesAsync(cancellationToken);
            <#= GetDecoratorsOutput(x => x.AfterCallToSaveChangesAsync()) #>
            return result;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            ConfigureModel(modelBuilder);

<#  foreach (var typeConfiguration in _entityTypeConfigurations) { #>
            modelBuilder.ApplyConfiguration(new <#= typeConfiguration.Template.ClassName #>());
<#  } #>
        }

        [IntentManaged(Mode.Ignore)]
        private void ConfigureModel(ModelBuilder modelBuilder)
        {
            // Customize Default Schema
            // modelBuilder.HasDefaultSchema("<#= Project.Application.Name #>");
            
            // Seed data
            // https://rehansaeed.com/migrating-to-entity-framework-core-seed-data/
            /* Eg.

            modelBuilder.Entity<Car>().HasData(
                new Car() { CarId = 1, Make = "Ferrari", Model = "F40" },
                new Car() { CarId = 2, Make = "Ferrari", Model = "F50" },
                new Car() { CarId = 3, Make = "Labourghini", Model = "Countach" });
            */
        }<#= GetMethods() #>
    }
}