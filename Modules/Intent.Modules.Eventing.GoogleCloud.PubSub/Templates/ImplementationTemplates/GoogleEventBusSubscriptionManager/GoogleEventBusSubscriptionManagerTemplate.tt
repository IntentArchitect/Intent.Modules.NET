<#@ template language="C#" inherits="CSharpTemplateBase<object>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.Eventing.Contracts.Templates" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Google.Cloud.PubSub.V1;
using Microsoft.Extensions.DependencyInjection;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>;

public class <#= ClassName #> : <#= this.GetEventBusSubscriptionManagerInterfaceName() #>
{
    private delegate Task MessageHandlerFunc(IServiceProvider provider, PubsubMessage message, CancellationToken cancellationToken);
    
    private readonly Dictionary<string, MessageHandlerFunc> _handlers;

    public <#= ClassName #>()
    {
        _handlers = new Dictionary<string, MessageHandlerFunc>();
    }

    public void RegisterEventHandler<TMessage>()
        where TMessage : class
    {
        _handlers.Add(typeof(TMessage).FullName!, async (provider, message, cancellationToken) =>
        {
            var messageObj = JsonSerializer.Deserialize<TMessage>(System.Text.Encoding.UTF8.GetString(message.Data.ToArray()));
            var handler = provider.GetService<<#= this.GetIntegrationEventHandlerInterfaceName() #><TMessage>>()!;
            await handler.HandleAsync(messageObj!, cancellationToken);
        });
    }

    public async Task DispatchAsync(IServiceProvider serviceProvider, PubsubMessage message, CancellationToken cancellationToken)
    {
        if (!message.Attributes.TryGetValue("MessageType", out var messageTypeStr) || 
            string.IsNullOrEmpty(messageTypeStr) || 
            !_handlers.TryGetValue(messageTypeStr, out var messageHandler))
        {
            var handler = serviceProvider.GetService<<#= this.GetIntegrationEventHandlerInterfaceName() #><GenericMessage>>()!;
            await handler.HandleAsync(new <#= this.GetGenericMessageName() #>(
                MessageId: message.MessageId, 
                Attributes: message.Attributes, 
                MessageBody: System.Text.Encoding.UTF8.GetString(message.Data.ToArray())), cancellationToken);
            return;
        }

        await messageHandler(serviceProvider, message, cancellationToken);
    }
}