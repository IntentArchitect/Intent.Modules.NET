// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.Azure.BlobStorage.Templates.AzureBlobStorageImplementation
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Azure.BlobStorage\Templates\AzureBlobStorageImplementation\AzureBlobStorageImplementationTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class AzureBlobStorageImplementationTemplate : CSharpTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;
using Microsoft.Extensions.Configuration;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace ");
            
            #line 23 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Azure.BlobStorage\Templates\AzureBlobStorageImplementation\AzureBlobStorageImplementationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public class ");
            
            #line 25 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Azure.BlobStorage\Templates\AzureBlobStorageImplementation\AzureBlobStorageImplementationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 25 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Azure.BlobStorage\Templates\AzureBlobStorageImplementation\AzureBlobStorageImplementationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetBlobStorageInterfaceName()));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n        private const PublicAccessType ContainerPublicAccessType = Publi" +
                    "cAccessType.None;\r\n        private readonly BlobServiceClient _client;\r\n\r\n      " +
                    "  public ");
            
            #line 30 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Azure.BlobStorage\Templates\AzureBlobStorageImplementation\AzureBlobStorageImplementationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("(IConfiguration configuration)\r\n        {\r\n            _client = new BlobServiceC" +
                    "lient(configuration.GetValue<string>(\"AzureBlobStorage\"));\r\n        }\r\n\r\n       " +
                    " public async Task<Uri> GetAsync(string containerName, string blobName, Cancella" +
                    "tionToken cancellationToken = default)\r\n        {\r\n            var blobClient = " +
                    "await GetBlobClient(containerName, blobName, cancellationToken).ConfigureAwait(f" +
                    "alse);\r\n            return blobClient.Uri;\r\n        }\r\n        \r\n        public " +
                    "async IAsyncEnumerable<Uri> ListAsync(string containerName, \r\n            [Enume" +
                    "ratorCancellation] CancellationToken cancellationToken = default)\r\n        {\r\n  " +
                    "          var containerClient = await GetContainerClientAsync(containerName, can" +
                    "cellationToken).ConfigureAwait(false);\r\n            await foreach (var blobItem " +
                    "in containerClient.GetBlobsAsync(cancellationToken: cancellationToken))\r\n       " +
                    "     {\r\n                yield return await GetAsync(containerName, blobItem.Name" +
                    ", cancellationToken);\r\n            }\r\n        }\r\n        \r\n        public Task<U" +
                    "ri> UploadAsync(Uri cloudStorageLocation, Stream dataStream, CancellationToken c" +
                    "ancellationToken = default)\r\n        {\r\n            var blobUriBuilder = new Blo" +
                    "bUriBuilder(cloudStorageLocation);\r\n            return UploadAsync(blobUriBuilde" +
                    "r.BlobContainerName, blobUriBuilder.BlobName, dataStream, cancellationToken);\r\n " +
                    "       }\r\n\r\n        public async Task<Uri> UploadAsync(string containerName, str" +
                    "ing blobName, Stream dataStream, \r\n            CancellationToken cancellationTok" +
                    "en = default)\r\n        {\r\n            var blobClient = await GetBlobClient(conta" +
                    "inerName, blobName, cancellationToken).ConfigureAwait(false);\r\n            await" +
                    " blobClient.UploadAsync(dataStream, overwrite: true, cancellationToken).Configur" +
                    "eAwait(false);\r\n            return blobClient.Uri;\r\n        }\r\n        \r\n       " +
                    " public async IAsyncEnumerable<Uri> BulkUploadAsync(\r\n            string contain" +
                    "erName,\r\n            IEnumerable<BulkBlobItem> blobs,\r\n            [EnumeratorCa" +
                    "ncellation] CancellationToken cancellationToken = default)\r\n        {\r\n         " +
                    "   foreach (var blob in blobs)\r\n            {\r\n                yield return awai" +
                    "t UploadAsync(containerName, blob.Name, blob.DataStream, cancellationToken);\r\n  " +
                    "          }\r\n        }\r\n\r\n        public Task<Stream> DownloadAsync(Uri cloudSto" +
                    "rageLocation, CancellationToken cancellationToken = default)\r\n        {\r\n       " +
                    "     var blobUriBuilder = new BlobUriBuilder(cloudStorageLocation);\r\n           " +
                    " return DownloadAsync(blobUriBuilder.BlobContainerName, blobUriBuilder.BlobName," +
                    " cancellationToken);\r\n        }\r\n\r\n        public async Task<Stream> DownloadAsy" +
                    "nc(string containerName, string blobName, CancellationToken cancellationToken = " +
                    "default)\r\n        {\r\n            var blobClient = await GetBlobClient(containerN" +
                    "ame, blobName, cancellationToken).ConfigureAwait(false);\r\n            var result" +
                    " = await blobClient.DownloadAsync(cancellationToken: cancellationToken).Configur" +
                    "eAwait(false);\r\n            return result.Value.Content;\r\n        }\r\n\r\n        p" +
                    "ublic async Task DeleteAsync(Uri cloudStorageLocation, CancellationToken cancell" +
                    "ationToken = default)\r\n        {\r\n            var blobUriBuilder = new BlobUriBu" +
                    "ilder(cloudStorageLocation);\r\n            await DeleteAsync(blobUriBuilder.BlobC" +
                    "ontainerName, blobUriBuilder.BlobName, cancellationToken).ConfigureAwait(false);" +
                    "\r\n        }\r\n\r\n        public async Task DeleteAsync(string containerName, strin" +
                    "g blobName, CancellationToken cancellationToken = default)\r\n        {\r\n         " +
                    "   var blobClient = await GetBlobClient(containerName, blobName, cancellationTok" +
                    "en);\r\n            await blobClient.DeleteAsync(cancellationToken: cancellationTo" +
                    "ken).ConfigureAwait(false);\r\n        }\r\n\r\n        private async Task<BlobContain" +
                    "erClient> GetContainerClientAsync(string containerName, CancellationToken cancel" +
                    "lationToken)\r\n        {\r\n            var containerClient = _client.GetBlobContai" +
                    "nerClient(containerName);\r\n            await containerClient.CreateIfNotExistsAs" +
                    "ync(ContainerPublicAccessType, cancellationToken: cancellationToken); \r\n        " +
                    "    return containerClient;\r\n        }\r\n\r\n        private async Task<BlobClient>" +
                    " GetBlobClient(string containerName, string blobName, CancellationToken cancella" +
                    "tionToken)\r\n        {\r\n            var containerClient = await GetContainerClien" +
                    "tAsync(containerName, cancellationToken: cancellationToken);\r\n            return" +
                    " containerClient.GetBlobClient(blobName);\r\n        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
