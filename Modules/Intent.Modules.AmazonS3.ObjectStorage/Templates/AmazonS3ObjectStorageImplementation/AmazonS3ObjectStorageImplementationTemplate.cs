// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.AmazonS3.ObjectStorage.Templates.AmazonS3ObjectStorageImplementation
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\Intent.Modules.NET\Modules\Intent.Modules.AmazonS3.ObjectStorage\Templates\AmazonS3ObjectStorageImplementation\AmazonS3ObjectStorageImplementationTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class AmazonS3ObjectStorageImplementationTemplate : CSharpTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing Amazon.S3;\r\nusing Amazon.S3.Model;\r\nusing Amazon.S3.Util;\r\n\r\n[assembly: DefaultIntentManaged(Mode.Fully)]\r\n\r\nnamespace ");
            
            #line 21 "E:\Intent.Modules.NET\Modules\Intent.Modules.AmazonS3.ObjectStorage\Templates\AmazonS3ObjectStorageImplementation\AmazonS3ObjectStorageImplementationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\npublic class ");
            
            #line 23 "E:\Intent.Modules.NET\Modules\Intent.Modules.AmazonS3.ObjectStorage\Templates\AmazonS3ObjectStorageImplementation\AmazonS3ObjectStorageImplementationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 23 "E:\Intent.Modules.NET\Modules\Intent.Modules.AmazonS3.ObjectStorage\Templates\AmazonS3ObjectStorageImplementation\AmazonS3ObjectStorageImplementationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetObjectStorageInterfaceName()));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    private readonly IAmazonS3 _client;\r\n    private readonly IConfiguration _configuration;\r\n\r\n    public ");
            
            #line 28 "E:\Intent.Modules.NET\Modules\Intent.Modules.AmazonS3.ObjectStorage\Templates\AmazonS3ObjectStorageImplementation\AmazonS3ObjectStorageImplementationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("(IAmazonS3 client, IConfiguration configuration)\r\n    {\r\n        _client = client;\r\n        _configuration = configuration;\r\n    }\r\n\r\n    public async Task<Uri> GetAsync(string bucketName, string key, CancellationToken cancellationToken = default)\r\n    {\r\n        var request = new GetPreSignedUrlRequest\r\n        {\r\n            BucketName = bucketName,\r\n            Key = key,\r\n            Expires = DateTime.Now.Add(_configuration.GetValue<TimeSpan?>(\"AWS:PreSignedUrlExpiry\") ?? TimeSpan.FromMinutes(5))\r\n        };\r\n\r\n        var url = await _client.GetPreSignedURLAsync(request).ConfigureAwait(false);\r\n        return new Uri(url);\r\n    }\r\n\r\n    public async IAsyncEnumerable<Uri> ListAsync(string bucketName, CancellationToken cancellationToken = default)\r\n    {\r\n        var request = new ListObjectsV2Request\r\n        {\r\n            BucketName = bucketName\r\n        };\r\n\r\n        var response = await _client.ListObjectsV2Async(request, cancellationToken).ConfigureAwait(false);\r\n        foreach (var s3Object in response.S3Objects)\r\n        {\r\n            yield return await GetAsync(bucketName, s3Object.Key, cancellationToken);\r\n        }\r\n    }\r\n\r\n    public Task<Uri> UploadAsync(Uri cloudStorageLocation, Stream dataStream, CancellationToken cancellationToken = default)\r\n    {\r\n        var s3Uri = new AmazonS3Uri(cloudStorageLocation);\r\n        return UploadAsync(s3Uri.Bucket, s3Uri.Key, dataStream, cancellationToken);\r\n    }\r\n\r\n    public async Task<Uri> UploadAsync(string bucketName, string key, Stream dataStream, CancellationToken cancellationToken = default)\r\n    {\r\n        var putRequest = new PutObjectRequest\r\n        {\r\n            BucketName = bucketName,\r\n            Key = key,\r\n            InputStream = dataStream\r\n        };\r\n\r\n        await _client.PutObjectAsync(putRequest, cancellationToken).ConfigureAwait(false);\r\n        return await GetAsync(bucketName, key, cancellationToken);\r\n    }\r\n\r\n    public async IAsyncEnumerable<Uri> BulkUploadAsync(string bucketName, IEnumerable<BulkObjectItem> objects, CancellationToken cancellationToken = default)\r\n    {\r\n        foreach (var blob in objects)\r\n        {\r\n            yield return await UploadAsync(bucketName, blob.Name, blob.DataStream, cancellationToken);\r\n        }\r\n    }\r\n\r\n    public Task<Stream> DownloadAsync(Uri cloudStorageLocation, CancellationToken cancellationToken = default)\r\n    {\r\n        var s3Uri = new AmazonS3Uri(cloudStorageLocation);\r\n        return DownloadAsync(s3Uri.Bucket, s3Uri.Key, cancellationToken);\r\n    }\r\n\r\n    public async Task<Stream> DownloadAsync(string bucketName, string key, CancellationToken cancellationToken = default)\r\n    {\r\n        var getRequest = new GetObjectRequest\r\n        {\r\n            BucketName = bucketName,\r\n            Key = key\r\n        };\r\n\r\n        var response = await _client.GetObjectAsync(getRequest, cancellationToken).ConfigureAwait(false);\r\n        return response.ResponseStream;\r\n    }\r\n\r\n    public Task DeleteAsync(Uri cloudStorageLocation, CancellationToken cancellationToken = default)\r\n    {\r\n        var s3Uri = new AmazonS3Uri(cloudStorageLocation);\r\n        return DeleteAsync(s3Uri.Bucket, s3Uri.Key, cancellationToken);\r\n    }\r\n\r\n    public async Task DeleteAsync(string bucketName, string key, CancellationToken cancellationToken = default)\r\n    {\r\n        var deleteRequest = new DeleteObjectRequest\r\n        {\r\n            BucketName = bucketName,\r\n            Key = key\r\n        };\r\n\r\n        await _client.DeleteObjectAsync(deleteRequest, cancellationToken).ConfigureAwait(false);\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
}
