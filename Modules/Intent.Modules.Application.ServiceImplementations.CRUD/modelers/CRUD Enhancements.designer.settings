<?xml version="1.0" encoding="utf-8"?>
<settings>
  <id>63beeea4-819d-42f9-9baf-a08f8eaf49be</id>
  <name>CRUD Enhancements</name>
  <designerReferences />
  <packageSettings />
  <packageExtensions />
  <elementSettings />
  <elementExtensions>
    <elementExtension type="Service" typeId="b16578a5-27b1-4047-a8df-f0b783d706bd">
      <creationOptions />
      <scriptOptions>
        <option>
          <text>Create CRUD Operations</text>
          <icon type="FontAwesome" source="code" />
          <script>let options = element.lookupTypesOf("Class");
if (options.length == 0) {
    dialogService.info("No Domain types could be found. Please ensure that you have a reference to the Domain package.");
} else {
    dialogService.lookupFromOptions(options).then(classId =&gt; {
        let entity = element.lookup(classId);
        if (entity != null) {
            let entityName = entity.name;

            // CREATE DTO:
            let createDTO = createElement("DTO", `${entityName}CreateDTO`, context.getParent().id);
            for(let attribute of entity.getChildren("Attribute")) {
                let field = createElement("DTO-Field", attribute.name, createDTO.id);
                field.typeReference.setType(attribute.typeReference.typeId);
                field.typeReference.setIsNullable(attribute.typeReference.isNullable);
                field.typeReference.setIsCollection(attribute.typeReference.isCollection);
            }

            // CREATE OPERATION:
            let createOperation = createElement("Operation", "Create", context.id);
            let createOperationParam = createElement("Parameter", "dto", createOperation.id);
            createOperationParam.typeReference.setType(createDTO.id);
            let stereotype = createOperation.getStereotype("Http Settings");
            stereotype.getProperty("Verb").setValue("POST");
            createOperation.collapse();

            // FIND DTO:
            let dto = createElement("DTO", `${entityName}DTO`, context.getParent().id);
            dto.setMapping(entity.id);
            let idField = createElement("DTO-Field", "id", dto.id);
            idField.typeReference.setType("6b649125-18ea-48fd-a6ba-0bfff0d8f488")

            for(let attribute of entity.getChildren("Attribute")) {
                let field = createElement("DTO-Field", attribute.name, dto.id);
                field.typeReference.setType(attribute.typeReference.typeId);
                field.typeReference.setIsNullable(attribute.typeReference.isNullable);
                field.typeReference.setIsCollection(attribute.typeReference.isCollection);
                field.setMapping(attribute.id);
            }

            // FIND-BY-ID
            let findByIdOperation = createElement("Operation", "FindById", context.id);
            findByIdOperation.typeReference.setType(dto.id);
            let findByIdOperationParam = createElement("Parameter", "id", findByIdOperation.id);
            findByIdOperationParam.typeReference.setType("6b649125-18ea-48fd-a6ba-0bfff0d8f488");
            stereotype = findByIdOperation.getStereotype("Http Settings");
            stereotype.getProperty("Verb").setValue("GET");
            stereotype.getProperty("Route").setValue("{id}");
            findByIdOperation.collapse();

            // FIND-ALL:
            let findByAllOperation = createElement("Operation", "FindAll", context.id);
            findByAllOperation.typeReference.setType(dto.id);
            findByAllOperation.typeReference.setIsCollection(true);
            stereotype = findByAllOperation.getStereotype("Http Settings");
            stereotype.getProperty("Verb").setValue("GET");
            findByAllOperation.collapse();

            // UPDATE DTO:
            let updateDTO = createElement("DTO", `${entityName}UpdateDTO`, context.getParent().id);
            for(let attribute of entity.getChildren("Attribute")) {
                let field = createElement("DTO-Field", attribute.name, updateDTO.id);
                field.typeReference.setType(attribute.typeReference.typeId);
                field.typeReference.setIsNullable(attribute.typeReference.isNullable);
                field.typeReference.setIsCollection(attribute.typeReference.isCollection);
            }
            
            // UDPATE OPERATION:
            let updateOperation = createElement("Operation", "Update", context.id);
            let updateOperationIdParam = createElement("Parameter", "id", updateOperation.id);
            updateOperationIdParam.typeReference.setType("6b649125-18ea-48fd-a6ba-0bfff0d8f488");
            let updateOperationDtoParam = createElement("Parameter", "dto", updateOperation.id);
            updateOperationDtoParam.typeReference.setType(updateDTO.id);
            stereotype = updateOperation.getStereotype("Http Settings");
            stereotype.getProperty("Verb").setValue("PUT");
            stereotype.getProperty("Route").setValue("{id}");
            updateOperation.collapse();

            // DELETE:
            let deleteOperation = createElement("Operation", "Delete", context.id);
            let deleteOperationIdParam = createElement("Parameter", "id", deleteOperation.id);
            deleteOperationIdParam.typeReference.setType("6b649125-18ea-48fd-a6ba-0bfff0d8f488");
            stereotype = deleteOperation.getStereotype("Http Settings");
            stereotype.getProperty("Verb").setValue("DELETE");
            stereotype.getProperty("Route").setValue("{id}");
            deleteOperation.collapse();
        }
        else {
            dialogService.error(`Could not find an Entity with the name '${entityName}'. The name of your service must correlate to an Entity in the domain.`);
        }
    });
}</script>
        </option>
      </scriptOptions>
      <typeOrder />
    </elementExtension>
  </elementExtensions>
  <associationSettings />
</settings>