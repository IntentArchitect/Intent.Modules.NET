trigger:
  batch: true
  branches:
    include:
    - '*'

variables:
- name: 'vstsFeed'
  value: '4bb4c1b9-5b56-4972-8bac-0ad3fa64204e/intentarchitect-feed'
- name: 'vstsFeedUrl'
  value: 'https://pkgs.dev.azure.com/intentarchitect/4bb4c1b9-5b56-4972-8bac-0ad3fa64204e/_packaging/intentarchitect-feed/nuget/v3/index.json'
- name: 'targetsToBuild'
  value: '**/*.sln'
- group: 'Intent Architect Credentials'
- name: 'intent-solution'
  value: 'Modules/Intent.Modules.NET.Tests.isln'
- name: 'warning-logging-command'
  value: '##vso[task.logissue type=warning;]{@m} {@x}\n'
- name: 'error-logging-command'
  value: '##vso[task.logissue type=error;]{@m} {@x}\n'

pool:
  vmImage: 'ubuntu-latest'

steps:

- checkout: 'self'
  persistCredentials: true
  fetchDepth: 1
  submodules: 'recursive'

# Required for entry in NuGet.Config that is generated as part of 'dotnet pack'.
- task: NuGetAuthenticate@0

# We pack upfront as some projects rely on NuGet packages from this same solution.
- task: PowerShell@2
  displayName: 'dotnet pack'
  inputs:
    pwsh: true
    failOnStderr: true
    ignoreLASTEXITCODE: true
    filePath: 'dotnet-pack-all.ps1'
    arguments: '-dotnetPackOutputDirectory $(Build.ArtifactStagingDirectory) -vstsFeedUrl $(vstsFeedUrl)'

# Push the NuGet packages so that regardless of whether or not this build succeeds, they are 
# available to other pipelines.
- task: NuGetCommand@2
  displayName: 'nuget push'
  condition: succeededOrFailed()
  inputs:
      command: 'push'
      feedsToUse: 'select'
      includeNuGetOrg: false
      publishVstsFeed: $(vstsFeed)
      allowPackageConflicts: true
      packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
      nuGetFeedType: 'internal'

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  env:
    DOTNET_NOLOGO: '1'
  inputs:
    command: 'restore'
    feedsToUse: 'select'
    vstsFeed: $(vstsFeed)
    projects: $(targetsToBuild)

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  env:
    DOTNET_NOLOGO: 1
  inputs:
    command: 'build'
    projects: $(targetsToBuild)
    arguments: '--no-restore'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  env:
    DOTNET_NOLOGO: 1
  inputs:
    command: 'test'
    projects: $(targetsToBuild)
    arguments: '--no-build'

- task: PowerShell@2
  displayName: 'Install Intent CLI'
  inputs:
    targetType: 'inline'
    pwsh: true
    script: dotnet tool install Intent.SoftwareFactory.CLI --global

- task: PowerShell@2
  displayName: 'Run Intent CLI'
  inputs:
    targetType: 'inline'
    pwsh: true
    script:
      ./prepare-intent-testing.ps1;
      $testSln = [xml] (Get-Content ./Modules/Intent.Modules.NET.Tests.isln -Encoding UTF8);
      $testSln.solution.applications.application | % {
        $appId = $_.id;
        Write-Host ==================================================;
        Write-Host Application = $_.name;
        Write-Host ==================================================;
        intent-cli "$(intent-architect-user)" "$(intent-architect-password)" "$(intent-solution)" "$($appId)" "--warning-logging-command" "$(warning-logging-command)" "--error-logging-command" "$(error-logging-command)";
      }

- task: PowerShell@2
  displayName: 'Install Intent.IArchitect.Packager.CommandLine'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    targetType: 'inline'
    pwsh: true
    script: dotnet tool install Intent.IArchitect.Packager.CommandLine --global --add-source '$(vstsFeedUrl)'


