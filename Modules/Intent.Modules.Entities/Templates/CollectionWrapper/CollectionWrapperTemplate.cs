// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.Entities.Templates.CollectionWrapper
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.CSharp.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Entities\Templates\CollectionWrapper\CollectionWrapperTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class CollectionWrapperTemplate : CSharpTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using System.Collections;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\n[assembly: DefaultIntentManaged(Mode.Fully)]\r\n\r\nnamespace ");
            
            #line 16 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Entities\Templates\CollectionWrapper\CollectionWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    /// <summary>\r\n    /// Provides a wrapper over an <see cref=\"ICollection{TImplementation}\"/> to make it behave as an <see cref=\"ICollection{TInterface}\"/>.  \r\n    /// </summary>\r\n    /// <typeparam name=\"TInterface\">The interface type the collection should be exposed as.</typeparam>\r\n    /// <typeparam name=\"TImplementation\">The actual type of the items in the collection. Must implement <typeparamref name=\"TInterface\"/>.</typeparam>\r\n    public class ");
            
            #line 23 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Entities\Templates\CollectionWrapper\CollectionWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("<TInterface, TImplementation> : ICollection<TInterface>\r\n        where TImplementation: TInterface\r\n    {\r\n        private readonly ICollection<TImplementation> _wrappedCollection;\r\n\r\n        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"CollectionWrapper{TInterface, TImplementation}\"/> class.\r\n        /// </summary>\r\n        /// <param name=\"wrappedCollection\">The collection to be wrapped.</param>\r\n        public ");
            
            #line 32 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Entities\Templates\CollectionWrapper\CollectionWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("(ICollection<TImplementation> wrappedCollection)\r\n        {\r\n            _wrappedCollection = wrappedCollection;\r\n        }\r\n\r\n        /// <inheritdoc />\r\n        public IEnumerator<TInterface> GetEnumerator()\r\n        {\r\n            return _wrappedCollection.Cast<TInterface>().GetEnumerator();\r\n        }\r\n\r\n        /// <inheritdoc />\r\n        IEnumerator IEnumerable.GetEnumerator()\r\n        {\r\n            return GetEnumerator();\r\n        }\r\n\r\n        /// <summary>\r\n        /// Adds an item to the collection.\r\n        /// </summary>\r\n        /// <param name=\"item\">The item to add to the collection.</param>\r\n        public void Add(TInterface item)\r\n        {\r\n            _wrappedCollection.Add((TImplementation)item!);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Removes all items from the collection.\r\n        /// </summary>\r\n        public void Clear()\r\n        {\r\n            _wrappedCollection.Clear();\r\n        }\r\n\r\n        /// <summary>\r\n        /// Determines whether the collection contains a specific value.\r\n        /// </summary>\r\n        /// <param name=\"item\">The object to locate in the collection.</param>\r\n        /// <returns>true if <paramref name=\"item\"/> is found in the collection; otherwise, false.</returns>\r\n        public bool Contains(TInterface item)\r\n        {\r\n            return _wrappedCollection.Contains((TImplementation)item!);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Copies the elements of the collection to an array, starting at a particular array index.\r\n        /// </summary>\r\n        /// <param name=\"array\">The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.</param>\r\n        /// <param name=\"arrayIndex\">The zero-based index in array at which copying begins.</param>\r\n        public void CopyTo(TInterface[] array, int arrayIndex)\r\n        {\r\n            _wrappedCollection.Cast<TInterface>().ToArray().CopyTo(array, arrayIndex);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Removes the first occurrence of a specific object from the collection.\r\n        /// </summary>\r\n        /// <param name=\"item\">The object to remove from the collection.</param>\r\n        /// <returns>true if <paramref name=\"item\"/> was successfully removed from the collection; otherwise, false. This method also returns false if <paramref name=\"item\"/> is not found in the original collection.</returns>\r\n        public bool Remove(TInterface item)\r\n        {\r\n            return _wrappedCollection.Remove((TImplementation)item!);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Gets the number of elements contained in the collection.\r\n        /// </summary>\r\n        public int Count => _wrappedCollection.Count;\r\n\r\n        /// <summary>\r\n        /// Gets a value indicating whether the collection is read-only.\r\n        /// </summary>\r\n        public bool IsReadOnly => _wrappedCollection.IsReadOnly;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Provides extension methods for <see cref=\"ICollection{T}\"/>.\r\n    /// </summary>\r\n    public static class ");
            
            #line 110 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Entities\Templates\CollectionWrapper\CollectionWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Extensions\r\n    {\r\n        /// <summary>\r\n        /// Creates a wrapper for a collection to expose it as a different interface.\r\n        /// </summary>\r\n        /// <typeparam name=\"TInterface\">The interface type the collection should be exposed as.</typeparam>\r\n        /// <typeparam name=\"TImplementation\">The actual type of the items in the collection. Must implement <typeparamref name=\"TInterface\"/>.</typeparam>\r\n        /// <param name=\"collection\">The collection to be wrapped.</param>\r\n        /// <returns>An <see cref=\"ICollection{TInterface}\"/> that wraps the provided collection.</returns>\r\n        public static ICollection<TInterface> CreateWrapper<TInterface, TImplementation>(this ICollection<TImplementation> collection) \r\n            where TImplementation : TInterface\r\n        {\r\n            return new ");
            
            #line 122 "C:\Dev\Intent.Modules.NET\Modules\Intent.Modules.Entities\Templates\CollectionWrapper\CollectionWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("<TInterface, TImplementation>(collection);\r\n        }\r\n    } \r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
}
