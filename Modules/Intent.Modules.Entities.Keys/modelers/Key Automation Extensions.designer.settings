<?xml version="1.0" encoding="utf-8"?>
<settings version="3.1.1">
  <id>b18a7a44-a229-42f6-8ce7-d7191162bb2d</id>
  <name>Key Automation Extensions</name>
  <designerReferences />
  <packageSettings />
  <packageExtensions />
  <elementSettings />
  <elementExtensions>
    <elementExtension type="Class" typeId="04e12b51-ed12-42a3-9667-a6aa81bb6d10">
      <mappingSettings />
      <macros>
        <macro trigger="on-created">
          <script>if (!application || application.getSettings("Entity Key Settings").getField("Create Keys Explicitly").value == "false"){
    return;
}

let keyType = application.getSettings("Entity Key Settings").getField("Key Type").value;

let pk = createElement("Attribute", "Id", element.id);
if (keyType == "System.Guid")
    pk.typeReference.setType("6b649125-18ea-48fd-a6ba-0bfff0d8f488"); // guid id
if (keyType == "int")
    pk.typeReference.setType("fb0a362d-e9e2-40de-b6ff-5ce8167cbe74"); // int id
if (keyType == "long")
    pk.typeReference.setType("33013006-E404-48C2-AC46-24EF5A5774FD"); // guid id
pk.addStereotype("b99aac21-9ca4-467f-a3a6-046255a9eed6");</script>
        </macro>
      </macros>
    </elementExtension>
  </elementExtensions>
  <associationSettings />
  <associationExtensions>
    <associationExtension type="Association" typeId="eaf9ed4e-0b61-4ac1-ba88-09f912c12087">
      <sourceEndExtension>
        <typeReferenceExtension>
          <isRequired>true</isRequired>
          <targetTypes />
          <allowIsNavigable>inherit</allowIsNavigable>
          <allowIsNullable>inherit</allowIsNullable>
          <allowIsCollection>inherit</allowIsCollection>
        </typeReferenceExtension>
      </sourceEndExtension>
      <targetEndExtension>
        <typeReferenceExtension>
          <isRequired>true</isRequired>
          <targetTypes />
          <allowIsNavigable>inherit</allowIsNavigable>
          <allowIsNullable>inherit</allowIsNullable>
          <allowIsCollection>inherit</allowIsCollection>
        </typeReferenceExtension>
      </targetEndExtension>
      <macros>
        <macro trigger="on-changed">
          <script>if (!application || application.getSettings("Entity Key Settings").getField("Create Keys Explicitly").value == "false"){
    return;
}

function requiresForeignKey(associationEnd)
{
    return isManyToVariantsOfOne(associationEnd) || isSelfReferencingZeroToOne(associationEnd);
}

function isManyToVariantsOfOne(associationEnd)
{
    return !associationEnd.typeReference.isCollection &amp;&amp; associationEnd.getOtherEnd().typeReference.isCollection;
}

function isSelfReferencingZeroToOne(associationEnd)
{
    return !associationEnd.typeReference.isCollection &amp;&amp; associationEnd.typeReference.isNullable &amp;&amp; 
            associationEnd.typeReference.typeId == associationEnd.getOtherEnd().typeReference.typeId;
}

let sourceType = association.getOtherEnd().typeReference.getType();
let targetType = association.typeReference.getType();

if (sourceType &amp;&amp; targetType) {

    if (requiresForeignKey(association)) {
        let pks = targetType.getChildren("Attribute").filter(x =&gt; x.getStereotype("Primary Key") != null);
        pks.forEach((pk, index) =&gt; {
        let fk = sourceType.getChildren().filter(x =&gt; x.getExternalReference() == association.id)[index] ||
                 createElement("Attribute", "", sourceType.id);
            fk.setName(`${association.getName()}${toPascalCase(pk.getName())}`);
            fk.setExternalReference(association.id);
            fk.typeReference.setType(pk.typeReference.typeId);
            fk.typeReference.setIsNullable(association.typeReference.isNullable);
        });
        sourceType.getChildren().filter(x =&gt; x.getExternalReference() == association.id).forEach((x, index) =&gt; {
            if (index &gt;= pks.length)
                x.delete();
        })
        targetType.getChildren().filter(x =&gt; x.getExternalReference() == association.id).forEach(x =&gt; x.delete());
    }
    else if (requiresForeignKey(association.getOtherEnd())) {
        let pks = sourceType.getChildren("Attribute").filter(x =&gt; x.getStereotype("Primary Key") != null);
        pks.forEach((pk, index) =&gt; {
        let fk = targetType.getChildren().filter(x =&gt; x.getExternalReference() == association.id)[index] ||
                 createElement("Attribute", "", targetType.id);
            fk.setName(`${association.getOtherEnd().getName()}${toPascalCase(pk.getName())}`);
            fk.setExternalReference(association.id);
            fk.typeReference.setType(pk.typeReference.typeId);
            fk.typeReference.setIsNullable(association.getOtherEnd().typeReference.isNullable);
        });
        targetType.getChildren().filter(x =&gt; x.getExternalReference() == association.id).forEach((x, index) =&gt; {
            if (index &gt;= pks.length)
                x.delete();
        })
        sourceType.getChildren().filter(x =&gt; x.getExternalReference() == association.id).forEach(x =&gt; x.delete());
    }
    else { // many-to-many
        targetType.getChildren().filter(x =&gt; x.getExternalReference() == association.id).forEach(x =&gt; x.delete());
        sourceType.getChildren().filter(x =&gt; x.getExternalReference() == association.id).forEach(x =&gt; x.delete());
    }
}</script>
        </macro>
        <macro trigger="on-deleted">
          <script>
association.typeReference.getType().getChildren().filter(x =&gt; x.getExternalReference() == association.id).forEach(x =&gt; x.delete());
association.getOtherEnd().typeReference.getType().getChildren().filter(x =&gt; x.getExternalReference() == association.id).forEach(x =&gt; x.delete());
</script>
        </macro>
      </macros>
    </associationExtension>
  </associationExtensions>
</settings>