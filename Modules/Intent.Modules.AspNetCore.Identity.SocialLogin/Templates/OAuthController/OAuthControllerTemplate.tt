<#@ template language="C#" inherits="CSharpTemplateBase<object>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    [Route("api/oauth")]
    [ApiController]
    public class <#= ClassName #> : ControllerBase
    {

        private readonly SignInManager<<#= this.GetIdentityUserClass() #>> _signInManager;
        private readonly ILogger<<#= ClassName #>> _logger;

        public <#= ClassName #>(
            SignInManager<<#= this.GetIdentityUserClass() #>> signInManager,
            ILogger<<#= ClassName #>> logger)
        {
            _signInManager = signInManager;
            _logger = logger;
        }

        [HttpGet("providers")]
        [AllowAnonymous]
        public async Task<ActionResult<List<string>>> Providers()
        {
            var providers = (await _signInManager.GetExternalAuthenticationSchemesAsync()).Select(x => x.Name).ToList();

            return Ok(providers);
        }

        [HttpPost]
        [AllowAnonymous]
        public async Task<ChallengeResult> StartChallenge(string provider,
            string? returnUrl /* even though this is not used here, it does actually end up in the callback */
        )
        {
            var properties = _signInManager.ConfigureExternalAuthenticationProperties(provider, null);
            properties.AllowRefresh = true;

            return Challenge(properties, new[] { provider });
        }

        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> Callback(string? returnUrl, string? remoteError)
        {
            return Ok();
        }

    }
}